## 互联网应用软件工程

由[Eve Andersson](http://eveandersson.com/)、[Philip Greenspun](/)和[Andrew Grumet](http://grumet.net/)撰写

麻省理工学院出版社 2006 年; ISBN 0262511916; [从亚马逊网站订购实体书](http://www.amazon.com/exec/obidos/ASIN/0262511916/pgreenspun-20)

* * *

[前言](preface)

[致谢](acknowledgments)

章节：

1.  [介绍](introduction)

1.  [基础知识](basics)

1.  [规划](planning)

1.  [软件结构](software-structure)

1.  [用户注册和管理](user-registration-and-management)

1.  [内容管理](content-management)

1.  [软件模块化](software-modularity)

1.  [讨论](discussion)

1.  [向您的社区添加移动用户](mobile/)

1.  [语音（VoiceXML）](voice/)

1.  [优雅扩展](scaling)

1.  [搜索](search)

1.  [重新规划](planning-redux)

1.  [使用 HTTP、XML、SOAP 和 WSDL 进行分布式计算](distributed-computing)

1.  [元数据](metadata)（编写程序的程序）

1.  [用户活动分析](user-activity-analysis)

1.  [写作](writeup)

参考章节：

1.  [HTML](html)

1.  [参与管理](engagement-management) by Cesar Brea

1.  [评分标准](grading-standards)（主要针对麻省理工学院学生）

[术语表](glossary)

[给教师的话](to-the-instructor)

[示例合同（学生团队与客户之间）](contract) [关于作者](about-the-authors) * * *

返回至[目录](/seia/)

[eve@eveandersson.com](mailto:eve@eveandersson.com), [philg@mit.edu](mailto:philg@mit.edu), [aegrumet@mit.edu](mailto:aegrumet@mit.edu)

## 前言

* * *

这是麻省理工学院课程“互联网应用软件工程”的教科书。该课程面向计算机科学专业的大三和大四学生。我们假设他们知道如何编写计算机程序并调试它。我们不假设他们了解任何特定的编程语言、标准或协议。该课程目标的最简明表述是“学生完成后能够独立构建亚马逊网站”。

其他可能会发现这本书有用的人包括以下人士：

+   专业软件开发人员构建在线社区或其他多用户互联网应用程序

+   正在评估旨在支持在线社区的打包软件的管理人员——各章包含评判产品特性的标准，如微软 Sharepoint 或微软内容管理服务器

+   寻求在计算机科学学位结束时为“毕业设计”项目增加一些结构的大学生和教职人员

如果你对“学生知道如何构建amazon.com”这一说法感到困惑，我们可以从原则和技能的角度来解释。基于服务器的互联网应用与学生已经学会构建的桌面应用程序之间的根本区别在于服务器应用具有多个同时用户。再加上网络的不可靠性，这就带来了并发和事务的问题。无状态通信协议（如HTTP）意味着学生必须学会如何在无状态协议之上构建有状态的用户体验。为了在点击之间保持持久性并管理并发和事务，学生需要学会使用关系数据库管理系统。最后，尽管这超出了简单的独立amazon.com风格的服务，学生们应该学习关于面向对象的分布式计算，其中每个对象都是一个Web服务。

除了学习这些原则，我们希望学生学会一些技能。这是一个实验课程，我们希望毕业的学生能够成为胜任的软件工程师。我们希望我们的学生能够将模糊和雄心勃勃的规范转化为一个可以在几个月内构建和推出的系统设计，首先构建最重要和最容易开发的功能，将困难的花哨功能推迟到第二个版本。我们希望我们的学生知道如何与最终用户测试原型并在一个三个月的项目中一两次完善他们的应用设计。当业务需求极端时，例如，“在三个月内独自构建一个amazon.com”，我们希望我们的学生能够理解如何通过自动生成代码和在适当的情况下使用开源工具包来应对挑战。

我们可以从使用的技术角度重新解释“学生知道如何构建amazon.com”这一说法。当某人完成阅读并完成本书中的练习时，他或她将了解HTTP、HTML、SQL、手机浏览器、VoiceXML、数据建模、页面流和交互设计、服务器端脚本、以及可用性分析。

这本书可以在网上免费获取，供读者或其他采用该课程的大学使用，永久链接为：http://philip.greenspun.com/seia/。如果你不喜欢，作者们将乐意退还你的购买价格。:-)

伊夫·安德森，菲利普·格林斯潘，安德鲁·格鲁梅特

麻省剑桥

2003年12月

继续阅读[介绍](introduction)

## 致谢

* * *

本书是在麻省理工学院和其他大学六个学期的教学经验的基础上发展而来的。因此，我们首先要感谢我们的学生，他们教会了我们什么有效，什么无效。在麻省理工学院教书是一种特权，每位讲师应该有一生中的一次机会。

我们并不是孤军奋战。哈尔·阿贝尔森和已故的迈克尔·德托佐斯是我们在讲台上的合作伙伴。哈尔是教学大师，也推动了分布式计算理念的前沿。迈克尔为我们早期进入语音应用程序领域提供了推动力。莉迪亚·桑顿是我们的第一位助教。本·阿迪达是我们在 2003 年秋季在麻省理工学院的 TA，当这本书进行最后的预印本试航时。

在没有全职 TA 的学期里，学生最宝贵的合作伙伴是他们的行业导师，其中大多数是麻省理工学院的校友，自愿投入时间：大卫·阿伯克隆比、特蕾西·亚当斯、本·阿迪达、迈克·邦内特、克里斯蒂安·布雷克布勒、詹姆斯·布萨德-韦尔切尔、布莱恩·切、布鲁斯·凯林、克里斯·麦肯尼里、亨利·明斯基、尼尔·梅利、丹·帕克、理查德·彭、莉迪亚·桑顿、迈克·舒尔皮克、史蒂夫·斯特拉斯曼、杰西卡·王，当然还有一些名字已经从我们的记忆中消失了。

我们从其他大学的教师那里得到了宝贵的反馈，特别是来自加州理工学院的奥勒留斯·普罗哈茨卡和危地马拉大学的奥斯卡·博尼亚。

## 介绍

* * *

> “对人类及其命运的关注必须始终是所有技术努力的主要兴趣。在你的图表和方程式之间永远不要忘记这一点。”
> 
> -- 阿尔伯特·爱因斯坦

一个十二岁的孩子可以使用任何 Linux 或 Windows 机器上标准配备的工具构建一个不错的 Web 应用程序。因此，值得我们问自己，“基于互联网的应用程序有什么具有挑战性、有趣和启发性的地方呢？”

有一些易于识别的与技术相关的挑战。例如，在许多情况下，通过说话和倾听与信息系统交互会更方便。你正在浴缸里读《纽约客》。你想知道你的日历上是否有任何早上的约会会让你无法待在浴缸里完成一篇有趣的文章。你买了一台新的 DVD 播放机。你可以阅读说明书并掌握遥控器。但在黑暗的房间里，如果你可以简单地问房子或机器“后退 30 秒”会不会更容易呢？你正在开车，好奇知道泰国的人口和该国与加利福尼亚州的大小的比例；语音是你唯一的选择。

在典型的基于Web的应用程序中有一些容易识别的缺失功能。例如，可共享和可移植的会话。你可以使用互联网分享你的照片。你可以使用互联网分享你的音乐。你可以使用互联网分享你的文档。但你通常无法在互联网上分享你使用互联网的体验。假设你正在浏览一个旅行网站，为自己和三个朋友计划一次旅行。如果你的同伴可以看到你一页页浏览的内容，并在共享的语音会话中发表评论，那不是很好吗？如果每个人都有相同品牌的计算机和特殊软件，这是很容易的。但可共享的会话应该是任何浏览器可用的网站的内置功能。同样的基础设施可以用来使会话可移植。你可以在具有大屏幕的台式计算机上开始浏览，然后在出租车上用手机完成你的会话。

谈到移动浏览器，它们的小屏幕引发了多模用户界面和个性化的问题。随着全球普及的GPRS（General Packet Radio Service）在2001年末推出，移动用户可以在使用Web连接的同时进行语音通话和听取文本屏幕。作为一名工程师，你需要决定何时与用户交谈，倾听用户，向用户打印选项屏幕，并要求用户在选项屏幕中进行突出显示和选择。例如，在预订航班时，直接说出出发和到达城市比从全球数千个机场的菜单中选择要方便得多。但如果有十个选项可供选择，你不想等待计算机读出这十个选项，也不想记住这十个选项的所有信息。旅行服务向你发送一个包含十个选项的可打印和可滚动的网页会更方便。

在个性化方面，考虑企业的“知识共享”或“知识管理”系统。最初，员工们只是很高兴有这样一种系统。但几年后，系统变得充斥着各种东西，很难找到相关的内容。在一个每天生成一千份文档的组织中，如果有一台智能计算机系统能够找出最可能对你感兴趣的三篇文档，那不是很好吗？并在你手机显示屏的三行上显示这三篇文档的标题？

更有趣的挑战是提出这样一个问题：“计算机能帮助我充分发挥自己的能力吗？”工程师经常建造容易工程化的东西。在电视发展五十年后，我们开始建造高清晰度电视（HDTV）。工程师能建造更高分辨率的标准吗？当然可以。消费者在意吗？到目前为止，似乎并不是太在意。

让我们这样说吧：在观看*拉弗恩和雪莉*的高清电视和减轻二十磅的体重之间，你更喜欢哪个？

没想错。

如果你拿着卷尺去你当地书店的自助区，你会发现一个未满足的人类目标世界。很多这些目标很难实现，因为我们缺乏意志力。奥运会的运动员有时也缺乏意志力。但是他们参加了奥运会，而我们还是胖乎乎的。为什么呢？也许是因为他们有教练，而我们没有。构建基于网络的饮食教练的工程挑战在哪里？首先看看我们将称之为“Rachel 博士”的计算机系统的拟议交互：

| **0900:** 你正在步行上班的路上；你用手机给 Rachel 博士打电话：

+   Dr. Rachel：“今天早上你吃了什么早餐？”（她知道现在是你典型时区的早上；她知道你今天还没有打电话来）

+   你：“一杯橙汁。两个鸡蛋。两片面包。加奶和糖的咖啡。”

+   Dr. Rachel：“橙汁杯是小杯、中杯还是大杯？”

+   你：“中杯”

+   Dr. Rachel：“还要别的吗？”

+   你：挂断电话。

**1045:** 你的程序员同事带来了一盒甜甜圈；你吃了一个。既然你已经在电脑旁边了，你从浏览器的“收藏夹”菜单中下拉出了 Rachel 博士的书签。你迅速地告诉 Rachel 博士你的消费情况。她确认了甜甜圈，并向你展示了一个摘要页面，显示你当前的估计体重、你今天报告的食物、今天已消耗的总卡路里以及你的预算中还剩多少。页面显示一个警告红色的“午餐不要吃超过一个小三明治”的提示。

**1330:** 你正在街边的咖啡馆，吃着一个小三明治和一杯健怡可乐。这里很吵，你不想打扰到邻桌的人。你用手机浏览器连接到 Rachel 博士。她知道现在是午餐时间，而你没告诉她关于午餐，所以午餐菜单首先出现。你报告你的消费情况。

**1600:** 你的台式机又死机了。幸运的是，你工作的软件公司提供免费的零食和苏打水。你去厨房吃了一袋薯片和一些山露。当你回到桌子旁时，你的电脑还是坏的。你用有线电话给 Rachel 博士打电话，告诉她关于零食和苏打水的情况。她警告你今晚必须去健身房。

**1900:** 从健身房开车回来时，你在车里打电话给 Rachel 博士，告诉她你锻炼了 45 分钟。

**2030年：**你已经吃完晚饭并称重。您使用家用计算机上的Web浏览器报告了由秤测得的食物摄入量和体重。Rachel博士用Web页面回应您，告知您测得的体重高于她的预测值。她将调整对您部分估计的假设，例如，将来当您说“中等”时，她会假设“大份”。

从样本交互中，您可以推断出Rachel博士必须包括以下组件：用户的自适应模型；不同食物的卡路里计数数据库；关于有效节食的一些知识，例如，如果一个人打算在日期Y之前达到X重，每天可以摄入多少卡路里；一个Web浏览器界面；一个移动浏览器界面；一个对话式语音界面（尽管也许可以通过一个简单的VoiceXML界面来完成）。

如果两个月后，你还是胖胖的怎么办？Rachel博士应该在吃饭时打电话给您，建议您不需要把盘子清空吗？有效和烦人之间的界线在哪里？计算机系统能否读取您的面部表情以确定何时退后？

持久的未满足人类目标是什么？与其他人联系和学习。根据1999年12月由Norman Nie和Lutz Erbring进行的一项调查，并在2000年1月斯坦福大学社会数量研究所的报告“互联网与社会”中报道，电子邮件和“参考图书馆”是互联网的两个普遍吸引人的应用。娱乐和面向消费者的电子商务在列表中排名较低。

让我们考虑“与其他人联系”的目标。假设这些人已经互相认识。他们可以面对面会面。他们几乎肯定可以使用一个始于19世纪的系统互相打电话。他们可以选择交换电子邮件，这是一个始于1960年代的系统。在这里看起来没有任何二十一世纪工程师的挑战。

假设这些人彼此并不认识。技术能帮忙吗？首先我们可能会问“技术应该帮忙吗？”为什么你想和一群陌生人交谈，而不是和你的亲密朋友和家人呢？和你的朋友和家人的问题在于，大体上他们（a）知道你知道的东西，和（b）认识你认识的人。马克·格拉诺维特在1973年的经典研究《弱关系的力量》（《美国社会学杂志》78:1360-80）表明，大多数人得到工作的方式是通过他们并不太熟悉的人。也许是朋友的朋友的朋友。与那些拥有许多弱关系的人群网络相比，这些网络具有更快的信息流动速度。如果你正在探索一个新的职业或兴趣领域，你需要接触超出你非常熟悉的人群。如果你正在创办一家新企业，你将需要雇佣具有与你完全不同技能的人。在哪里能够遇见这些新人，比互联网更好的地方吗？你可能不会像对你最好的朋友那样与他们建立强烈的联系。但他们会给你提供你所需要的帮助。

但是你如何找到能够帮助你的人呢？你应该向所有1亿互联网用户发送广播电子邮件吗？这似乎是一种流行的策略，但不清楚它在产生你所需要的好意方面有多有效。也许我们需要一个信息系统，让对某一特定主题感兴趣的个人之间可以相互交流，即*在线社区*。这正是接下来的章节将要探讨的信息系统类型。

那么第二个重要目标（学习）呢？从1960年代开始，教育领域一直在应用重型技术武器。基本思想始终是要放大我们最伟大的现有教师的努力，通常是通过录制视频并将其发送给新的学生。录制机制几乎总是视频摄像机。在1960年代，我们通过闭路电视发送了这些录制品。在1970年代，中国计划通过卫星电视将他们最好的教育录制品发送到他们九百万平方公里的土地上。在1980年代，我们通过VHS录像带发送这些录制品。在1990年代，我们通过流媒体互联网发送这些录制品。我们已经追求了大约四十年基本上相同的方法。如果它奏效，你会期望看到戏剧性的结果。

如果我们不是增加每位教师的学生人数，而是增加教师的数量会怎样呢？已经有很多学习机会可以随时随地学习。如果是凌晨3点，你想学习量子力学，你只需从书架上拿一本书，打开阅读灯就可以了。但是如果你想在凌晨3点教学呢？你的朋友可能不会喜欢被叫醒并被告知“嘿，我刚学到1914年弗兰克-赫兹实验证实了电子只占据离散、量子化能量状态的理论”。如果你可以进入一个基于服务器的信息系统并说“给我展示其他用户发布的所有未解答问题的列表”呢？你可能愿意回答一些问题，仅仅是为了帮助他人并感觉自己像个专家。当你累了，你就去睡觉。如果不用每周工作四十小时三十年，教学是很有趣的。

想象一下，如果每位学习摄影的摄影师都有一群经验丰富的摄影师回答他或她的问题会怎样？这就是由一位作者于1993年创建的在线社区[photo.net](http://www.photo.net/)，作为教程文章和问答论坛的集合，截至2005年8月，已有426,000注册用户互相回答问题和评论彼此的照片。想象一下，如果每位当前的麻省理工学院学生都有一位校友导师会怎样？这是麻省理工学院的一些人一直在努力的方向。从90,000名校友中获得一些志愿劳动似乎比从930名教职工中挤出更多更有效。大多数麻省理工学院的校友并不住在波士顿地区。只有当（1）学生-教师互动以计算机中介的方式进行，以便被授权的导师能看到，以及（2）导师可以使用与学生和教职员工相同的信息系统来获取讲义、作业和讲座笔记时，学生才能从远程校友的志愿劳动中受益。我们正在协调时空分隔的人们，他们分享着共同的目标。再次强调，这就是一个在线社区。

在线社区很具挑战性，因为学习很困难，而人们各有特点。在线社区很具挑战性，因为适用于200人社区的软件不适用于2,000或20,000人社区。在线社区是激发人们工程项目的灵感，因为它们为用户提供了生活中最想要的两样东西：与他人的联系和教育。

如果你对本书感兴趣是因为想要构建一个简单的电子商务网站，不要绝望。事实证明，最成功的电子商务和协作商务网站实际上都是在线社区。亚马逊是最著名的例子。1995年有数十家拥有全面目录的在线书店。亚马逊有一个目录，但是，通过其读者评论功能，亚马逊还有一个让用户相互交流的机制。亚马逊的程序员们就是这样击败了竞争对手。

当你阅读本书时，你将建立一个在线学习社区。在这个过程中，你将掌握构建桌面 Web、移动 Web 和各种类型语音应用程序的所有重要原则、技能和技术。

### 更多

+   关于 GPRS 的信息：“Emerging Technology: Clear Signals for General Packet Radio Service”（2000年12月《网络杂志》）Peter Rysavy 编写，可在 [http://www.rysavy.com/Articles/GPRS2/gprs2.html](http://www.rysavy.com/Articles/GPRS2/gprs2.html) 获取

+   关于易于构建语音应用程序的最新技术：[第10章 VoiceXML](voice/)（可以独立阅读）

## 基础知识

* * *

在本章中，你将学习如何评估互联网应用程序开发环境。然后你会选择一个。然后你会学习如何使用它。

你还将了解到一种无状态和匿名的协议，这使得 Web 开发不同于传统的计算机间应用程序开发。你将了解为什么关系型数据库管理系统对于控制多个同时用户带来的并发问题至关重要。你将开发软件来读写可扩展标记语言（XML）。

### 旧式通信协议

在传统通信协议中，计算机程序 A 打开到计算机程序 B 的连接。两个程序持续运行，直到通信结束。这使得程序 B 能够轻松记住程序 A 已经说过的内容。程序 B 可以在内存中建立*状态*。实际上，内存中可以包含从程序 A 接收的每一条信息的完整记录。

**** 在此插入图 ****

**图2.1：** 在传统的有状态通信协议中，两个在两台独立计算机上运行的程序建立连接，并在必要时使用该连接，通常直到其中一个程序终止。

### HTTP：无状态和匿名

超文本传输协议（HTTP）是在 Web 上交换信息和请求服务的基本手段。HTTP 在为手机用户开发文本服务时也会使用，并且配合 VoiceXML，还用于实现语音控制应用程序。

关于HTTP最重要的一点是它是*无状态*的。如果您查看了十个网页，您的浏览器将向发布者的Web服务器发出十个独立的HTTP请求。在这些请求之间的任何时间，您都可以重新启动浏览器程序。在这些请求之间的任何时间，发布者都可以重新启动其服务器程序。

这是典型HTTP会话的解剖：

+   用户在浏览器中输入 "www.yahoo.com"。

+   浏览器将www.yahoo.com翻译成IP地址，并尝试打开该地址的端口80的TCP连接（TCP是 "传输控制协议"，是两台互联网计算机之间发送字节流的基本系统。）

+   一旦建立连接，浏览器发送以下字节流："GET / HTTP/1.0"（加上两个回车换行）。"GET" 表示浏览器正在请求一个文件。"/" 是文件的名称，在本例中简单地是根索引页面。"HTTP/1.0" 表示此浏览器希望获得一个符合HTTP 1.0协议的结果。

+   雅虎以一组标头响应，指示实际使用的协议，请求的文件是否找到，该文件包含多少字节，以及该文件中包含的信息类型（多用途Internet邮件扩展或 "MIME" 类型）。

+   雅虎的服务器发送一个空行以指示标头的结束。

+   雅虎发送其索引页面的内容。

+   当浏览器接收到文件后，TCP连接将关闭。

您可以在操作系统Shell中自己尝试：

> |
> 
> ```
> bash-2.03$ telnet www.yahoo.com 80
> Trying 216.32.74.53...
> Connected to www.yahoo.akadns.net.
> Escape character is '^]'.
> GET / HTTP/1.0
> 
> HTTP/1.0 200 OK
> Content-Length: 18385
> Content-Type: text/html
> 
> <html><head><title>Yahoo!</title><base href=http://www.yahoo.com/>...
> 
> ```
> 
> |

在这种情况下，我们使用了Unix `telnet` 命令，并使用了一个可选参数指定目标主机的端口号 —— 程序员键入的所有内容都以粗体表示。我们自己键入了 "GET ..." 行，然后在键盘上按了两次 Enter 键。雅虎的第一个返回头是 "HTTP/1.0 200 OK"。HTTP状态码为200表示找到了文件（"OK"）。

有关HTTP的更多信息，请参阅[http://www.w3.org/Protocols/](http://www.w3.org/Protocols/) 的HTTP标准。

不要过于深入研究HTTP示例的细节。关键是当连接结束时，它就结束了。例如，如果用户从雅虎首页跟随超链接到 "摄影"，那就是一个全新的HTTP请求。如果雅虎正在使用多台服务器来运行其站点，那么第二个请求可能会发送到完全不同的机器上。对于浏览雅虎来说，这听起来很好。但是假设您正在一个电子商务网站如亚马逊购物。如果您在一个HTTP请求中将某物品放入购物车，您希望在后续十次点击中仍然能够看到它。或者假设您在第23次点击时登录了photo.net，并且在第45次点击时正在回复一个讨论论坛帖子。您不希望photo.net服务器忘记了您的身份并要求您再次输入用户名和密码。

这给你，工程师，带来了一个挑战：在一个基本上无状态的协议之上创建一个有状态的用户体验。

你可以在哪里存储从请求到请求的状态？也许可以在Web服务器上的日志文件中。服务器会记录下"乔·史密斯想要三本由里奥·布斯卡利亚创作的《九号公共汽车到天堂》"。在乔·史密斯的任何后续请求中，服务器端脚本只需检查日志并显示购物车的内容。然而，这个想法的一个问题是，HTTP是*匿名*的。Web服务器不知道连接的是乔·史密斯。服务器只知道发出请求的计算机的IP地址。有时这会转换为主机名。如果是joe-smiths-desktop.stanford.edu，也许你可以将来自这个IP地址的后续请求标识为来自同一个人。但如果是cache-rr02.proxy.aol.com，这是HTTP代理服务器之一，将美国在线的2000万用户连接到公共互联网？同一用户的下一个请求很可能来自不同的IP地址，即AOL机架上的另一台物理计算机。cache-rr02.proxy.aol.com的下一个请求很可能来自另一个人，即AOL的2000万订户中共享一组代理机器的另一个物理人。

你需要以某种方式向个别用户写入一些信息，这些信息将在该用户的下一个请求中返回。

如果你的所有页面都是由计算机程序生成而不是静态HTML，一个想法是重写页面上的所有超链接。不要向每个人发送相同的文件，带有相同的嵌入式URL，定制输出，以便跟踪链接的用户向服务器发送额外信息。这里是亚马逊如何在URL中嵌入会话密钥的示例：

1.  假设一个购物者跟随一个链接到显示单本图书出售的页面，例如，[http://www.amazon.com/exec/obidos/ASIN/1588750019/](http://www.amazon.com/exec/obidos/ASIN/1588750019/)。请注意，1588750019是国际标准书号（ISBN），完全标识要呈现的产品。

1.  亚马逊服务器将请求重定向到一个包含会话ID的URL，例如，"http://www.amazon.com/exec/obidos/ASIN/1588750019/103-9609966-7089404"

1.  如果购物者将鼠标滚动到页面上的超链接上，他或她会注意到所有超链接的末尾都包含相同的会话ID。

请注意，无论购物者的会话有多长或购物车中放置了多少商品，此会话ID的长度都不会改变。会话ID被用作在亚马逊的数据库中查找购物篮内容的关键。另一种实现方式是在URL中编码购物车的完整内容而不是会话ID。例如，假设Joe Shopper将三本书放入购物车。亚马逊的服务器可以简单地将他可能跟随的所有超链接URL中添加三个ISBN，用斜杠分隔。URL会变得有点长，但亚马逊的程序员可以从HTTP规范中的这段引用中获得鼓励：

> HTTP协议对URI的长度没有任何先验限制。服务器必须能够处理它们提供的任何资源的URI，并且如果提供了可以生成这种URI的基于GET的表单，服务器应该能够处理无限长度的URI。如果URI超过服务器可以处理的长度，服务器应返回414（请求URI过长）状态（参见第10.4.15节）。

无需担心拒绝亚马逊最好的客户，那些购物车很大的客户，返回状态为“414请求URI过长”。或者有吗？以下是HTTP规范中的一条评论：

> 注意：服务器应该谨慎依赖超过255字节的URI长度，因为一些较旧的客户端或代理实现可能不正确地支持这些长度。

或许这就是为什么真实的亚马逊商店只在URL中存储会话ID。

#### Cookies

我们可以利用HTTP的扩展——*cookies*，而不是在HTML页面中重写超链接来玩游戏。我们说我们需要一种方法将一些信息写入到一个个体用户，这些信息将在该用户的下一个请求中返回。Netscape的“持久客户端状态HTTP Cookies — 初步规范”（[http://wp.netscape.com/newsref/std/cookie_spec.html](http://wp.netscape.com/newsref/std/cookie_spec.html)）的第一段读到

> Cookies是服务器端连接（如CGI脚本）可以使用的一般机制，用于在连接的客户端端存储和检索信息。简单、持久的客户端状态的添加显著扩展了基于Web的客户端/服务器应用程序的功能。

它是如何工作的？当Joe Smith将一本书添加到购物车后，服务器会写入

> ````
> Set-Cookie: cart_contents=1588750019; path=/
> 
> ````

只要Joe不退出浏览器，在对您的服务器的每个后续请求中，浏览器都会添加一个标头：

> ````
> Cookie: cart_contents=1588750019
> 
> ````

您的服务器端脚本可以读取此标头并提取购物车的当前内容。

听起来像是完美的解决方案？在某些方面是的。如果你是一个计算机科学的专家，你可以为此感到自豪，因为这是一个分布式数据库管理系统。与其在服务器上保留一个大的日志文件，不如在全球数千用户的机器上保留信息的片段。但 cookie 的一个问题是，规范限制你要求每个浏览器代表你的服务器存储不超过 20 个 cookie，并且每个 cookie 的大小不能超过 4 千字节。一个小问题是，cookie 信息将在每次页面加载时传回到您的服务器。如果您确实在 20 个 cookie 中放置了 80 K 字节的信息，并且您的用户使用的是调制解调器，这将减慢 Web 交互。

对于用户来说，cookie 的一个更深层次的问题是它们对用户来说并不便携。如果 Joe Smith 从他的工作台式电脑开始购物，然后想要在出租车上的手机或者家里的网络浏览器上继续，他无法检索到迄今为止购物车中的内容。购物车存储在他工作的计算机的内存中。

cookie 的最后一个问题是，由于图 2.2 中展示的隐私问题，有一小部分用户已经禁用了它们。

![](../Images/079de92caf29d6f99c35a6ac6b4787b2.jpg)

**图 2.2：** 20世纪90年代浏览器的开放行为与 cookie 相结合，意味着互联网隐私的终结。假设三家出版商合作并同意从 http://noprivacy.com 提供所有的横幅广告。当 Joe 用户访问 search-engine.com 并输入“痤疮霜”时，页面返回一个引用 noprivacy.com 的 IMG。Joe 的浏览器将自动访问 noprivacy.com 并请求“SE9734的 GIF”。如果这是 Joe 第一次使用这三个合作服务中的任何一个，noprivacy.com 将向 Joe 的浏览器发出 Set-Cookie 头。与此同时，search-engine.com 向 noprivacy.com 发送消息说“SE9734是一个请求痤疮霜页面的请求。”“痤疮霜”字符串与“browser_id 7586”一起存储在 noprivacy.com 的数据库中。当 Joe 访问 bigmagazine.com 时，他被迫注册并提供他的姓名、电子邮件地址、邮寄地址和信用卡号。bigmagazine.com 中没有广告。他们对此太过正直。因此，他们在页面中包含一个引用 noprivacy.com 的空白 GIF 的 IMG。Joe 的浏览器请求“BM17377的空白 GIF”，由于它正在与发出 Set-Cookie 头的 noprivacy.com 通信，浏览器包含一个 cookie 头，说“我是 browser_id 7586”。最终，noprivacy.com 的人知道 Joe 用户的姓名、兴趣，以及他从 kiddieporn.com 下载了六个 spanking JPEGs 的事实。

使用Cookie的一个合理的工程方法是发送数据的唯一标识符而不是数据本身，就像之前描述的amazon.com中的“URL中的会话ID”示例一样。关于购物车内容的信息将保存在服务器上的某种日志中。这意味着它可以从另一个位置获取。要看看这在实践中是如何运作的，请转到操作系统shell并请求photo.net的主页：

> |
> 
> ```
> bash-2.03$ telnet www.eveandersson.com 80
> Trying 64.94.245.206...
> Connected to www.eveandersson.com.
> Escape character is '^]'.
> GET / HTTP/1.0
> 
> HTTP/1.0 200 OK
> Set-Cookie: ad_browser_id=3291092; Path=/; Expires=Fri, 01-Jan-2010 01:00:00 GMT
> Set-Cookie: ad_session_id=3291093%2c0%2c6634C478EF46FC%2c10622158; Path=/; Max-Age=86400
> Set-Cookie: last_visit=1071622158; path=/; expires=Fri, 01-Jan-2010 01:00:00 GMT
> Content-Type: text/html; charset=iso-8859-1
> MIME-Version: 1.0
> Date: Thu, 03 Feb 2005 00:49:18 GMT
> Server: AOLserver/3.3.1+ad13
> Content-Length: 8289
> Connection: close
> 
> <html>
>   <head>
> ...
> 
> ```
> 
> |

请注意设置了两个Cookie。第一个，`ad_browser_id`在2010年1月被赋予了明确的过期日期。这指示浏览器将Cookie值记录在硬盘上，本例中为“3291092”。即使用户退出并重新启动浏览器，该Cookie的值在接下来的五年内仍将被发送回服务器。浏览器Cookie的目的是什么？如果用户说“我更喜欢纯文本”或“我更喜欢法语”，那可能是值得保留在浏览器中的信息。纯文本偏好可能与该计算机的慢互联网连接有关。如果计算机位于一个充满法语使用者的家庭中，那么共享浏览器的所有人可能更喜欢法语。

设置的第二个Cookie，`ad_session_id`被设置为在一小时后过期（“Max-Age=3600”）。如果没有明确设置过期时间，当用户退出浏览器时它将过期。值得与会话ID关联的事物包括电子商务网站上购物车的内容，尽管请注意，如果photo.net是一个购物网站，将会话Cookie设置为一小时后过期并不是一个好主意！在构建购物车，离开计算机几个小时，然后在返回到你认为是一个正常工作的网页时不得不重新开始是很烦人的。

如果我们登录到photo.net，将会有第三个Cookie，用于识别用户。存储在服务器上的语言和显示偏好将覆盖与浏览器ID保持的偏好。

### 服务器端存储

您已经通过HTTP的Cookie扩展或URL重写将ID信息发送到浏览器并从浏览器返回。现在您必须想出一种方法在Web服务器上保留相关信息。

为了灵活地呈现和分析用户贡献的数据，您可能希望以结构化形式保存信息。例如，有一个包含各种用户放入购物车的物品的表格会很不错。还有一个订单表。还有一个读者贡献的产品评论表。还有一个问题和答案表。

什么是存储信息表的好工具？首先考虑电子表格程序。这些程序价格低廉且易于使用。解决问题时，永远不要应用比必要更复杂的技术。像Visicalc、Lotus *1-2-3*、Microsoft *Excel*或StarOffice Calc似乎是不错的选择。

电子表格程序的问题在于它是为单个用户设计的。该程序从两个来源接收用户输入：鼠标和键盘。该程序将其结果报告给一个地方：屏幕。任何Web服务器的持久性来源都必须应对潜在的数千名同时读写数据库的用户。这就是*数据库管理系统（DBMS）*旨在解决的问题。

一个好的方法来思考关系数据库管理系统（RDBMS，最流行的DBMS类型）是将其视为一个坐落在黑暗壁橱中的电子表格程序。如果你需要创建一个新表，你可以在一张纸条上写下"CREATE TABLE ..."并将其滑入门下。要向该表添加一行数据，你可以再滑入另一张写着"INSERT..."的小纸条。要更改表中的一些数据，你可以在一张纸条上写下"UPDATE.."。要删除一行，你可以发送一张以"DELETE"开头的纸条。

注意，我们在这里解决了*并发*问题。假设你的库存中只剩下一本《通往天堂的第九辆公共汽车》的副本，同时有1000名用户请求布斯卡利亚博士的作品。通过将纸条排成一排，壁橱中的程序可以决定处理一个INSERT到订单表中，并拒绝其他999个。这比1000人争夺一台键盘和鼠标要好。

一旦我们把信息发送到壁橱里，我们如何把它取回来？我们可以在一张纸条上写下一个以"SELECT"开头的报告请求，然后将其滑入门下。黑暗壁橱中的数据库管理系统将为我们准备一份报告，并将其从同一门下滑回给我们。

我们如何评估一个DBMS是否足够强大适用于我们的应用程序？从上世纪60年代开始，IBM提出了"ACID测试"：

> 原子性
> 
> 事务执行的结果要么全部提交，要么全部回滚。所有更改生效，或者都不生效。假设一个用户通过上传姓名、地址和JPEG肖像到三个单独的表来注册。一个Web脚本告诉数据库作为事务的一部分执行三次插入。如果硬盘在插入姓名和地址后填满，但在肖像存储之前填满，那么对姓名和地址表的更改将被回滚。
> 
> 一致性
> 
> 数据库从一个有效状态转换为另一个有效状态。只有遵守用户定义的完整性约束条件的事务才是合法的。不允许非法事务，如果完整性约束条件无法满足，则事务将被回滚。例如，假设您定义了一个规则，讨论论坛表中的帖子必须归因于有效的用户ID。然后您雇佣了乔·新手来编写一些管理页面。乔编写了一个删除用户页面，没有检查删除是否会导致孤立的讨论论坛帖子。但是符合ACID标准的DBMS会进行检查，并中止任何导致您拥有被删除用户的讨论论坛帖子的事务。
> 
> 隔离性
> 
> 事务的结果对其他事务是不可见的，直到事务完成。例如，假设您有一个页面显示新用户及其照片。这个页面是根据发布者的指示编写的，即每个用户都会有一张肖像，并且如果没有的话会显示一个损坏的图像。简·新用户正在注册您的网站，同时比尔·老用户正在查看新用户页面。处理简的注册的脚本已经完成将她的姓名和地址插入到各自的表中。但是还没有存储她的JPEG肖像。如果比尔的查询在简的事务提交之前开始，比尔在他的新用户页面上根本看不到简，即使简在某些表中的插入已经完成。
> 
> 持久性
> 
> 一旦提交（完成），事务的结果是永久的，并且可以在未来的系统和媒体故障中幸存。假设您的电子商务系统将客户的订单插入到数据库表中，然后指示CyberSource向客户收取500美元。一毫秒后，在您的服务器从CyberSource那里听到回复之前，有人绊倒了机器的电源线。符合ACID标准的DBMS不会忘记新订单。此外，如果程序员将咖啡洒入磁盘驱动器中，将可以安装新磁盘并恢复直到咖啡溢出的事务，显示您尝试向某人收取500美元，但仍不确定CyberSource那边发生了什么。请注意，要实现ACID的D部分，您的计算机需要多于一个硬盘。

### 为什么关系数据库管理系统？

为什么关系数据库管理系统（RDBMS）是Web服务器背后的持久性的主导技术？有三个主要因素。

RDBMS流行的第一个支柱是一种称为“SQL”的声明性查询语言。最常见的编程风格不是声明性的；它被称为“命令式”或“过程式”。您逐步告诉计算机要做什么：

+   做这个

+   做这个

+   做这个

+   如果是在2023年3月17日之后，做这个，这个，然后这个；否则做这个

+   做这个

    ...

以这种风格编写的程序有两个缺点。首先，它们很快变得复杂，只能由专业程序员开发和维护。其次，它们包含很多错误。例如，上面草拟的程序可能有很多错误。现在还不是2023年3月17日。因此，我们不能确定IF语句的THEN子句中指定的步骤是否没有错误。

另一种编程风格是“声明性”。我们告诉计算机我们想要什么，比如，一个注册超过一年但在讨论论坛中没有回答任何问题的用户报告。我们不告诉RDBMS是先扫描用户表还是先检查讨论论坛表。我们只是指定报告的期望特征，而RDBMS的工作就是准备它。

在街上拦住一个人。选择一个穿着时尚的人，这样你就可以确定他或她不是专业程序员。问这个人，“你有没有用过声明性计算机语言编程？”接着问，“你有没有使用过电子表格程序？”很有可能你会找到很多人告诉你，他们从未编写过任何类型的计算机程序，但他们已经开发了相当复杂的电子表格模型。为什么？电子表格语言是声明性的：“使这个单元格成为这三个其他单元格的总和”。用户不告诉电子表格程序计算的顺序，只是告诉期望的结果。

电子表格的声明性语言引发了能够开发可用计算机程序的人数激增。直到1970年代中期，处理数据的组织保留了一支程序员队伍。如果你想进行一些分析，你会叫一个程序员到你的办公室，解释要使用的假设和公式，然后等几天才能得到报告。1979年，[丹·布里克林](http://www.bricklin.com)（MIT EECS '73）和[鲍勃·弗兰克斯顿](http://www.frankston.com/)（MIT EECS '70）开发了Visicalc，突然间大多数一直在呼唤编程服务的人能够建立自己的模型。

使用关系数据库管理系统（RDBMS），象征性的小纸条被推送到门下，是SQL语言中的声明性程序。（参见[http://philip.greenspun.com/sql/](http://philip.greenspun.com/sql/)的《Web极客的SQL教程》。）

RDBMS流行的第二支柱是将重要数据与程序员的错误隔离开来。使用其他类型的数据库管理系统，计算机程序可以对数据集进行任意更改。这对于具有非常复杂数据结构的应用程序（如计算机辅助设计系统）可能很方便。然而，如果您的目标是在二十五年的时间内保留数据集，让任意有错误的命令式程序进行任意更改并不是一个好主意。RDBMS限制程序员只能发出形式为INSERT、DELETE和UPDATE的非常简单的语句。此外，如果您对数据库的内容不满意，您只需查看所有被推送到门下的纸条。每个纸条都会包含一个SQL语句以及编写该纸条的程序或程序员的名称。这样就很容易纠正错误和改正违规者。

RDBMS流行的第三个也是最后一个支柱是在许多千万级同时用户下表现良好的性能。这更多地反映了像IBM DB2、Oracle、Microsoft SQL Server和开源的PostgreSQL等系统的商业开发的精细状态，而不是RDBMS本身的固有特性。

### 步骤

在构建任何互联网应用程序时，您将经历以下步骤：

1.  开发数据模型。您将存储哪些信息以及如何表示它？

1.  在该模型上开发一系列合法交易，例如插入和更新。

1.  设计页面流程。用户将如何与系统进行交互？哪些步骤将导致其中一个合法交易？（请注意，“页面流程”包括Web、移动浏览器上的交互设计，以及VoiceXML中的分层语音菜单，但*不包括*会话式语音系统。）

1.  实现各个页面。您将编写查询数据模型信息的脚本，将该信息包装在模板中（对于Web应用程序为HTML），并将组合结果返回给用户。

很少有可能在持久存储工具上有选择的余地。您将使用RDBMS，并且在步骤1或2中不会做出任何基本技术决策。设计页面流程是一个纯粹的抽象练习。界面上有一些技术上的限制，但这些限制通常源自公共标准，如HTML、XHTML移动配置文件和VoiceXML。因此，在第3步中您不需要做出任何技术选择。

第4步在智力上是无趣的，从工程角度看也是无趣的。一个互联网服务的生死取决于第1到第3步。这项服务能为用户做什么？页面流程是否易于理解和可用？这些问题的答案是在第1到第3步确定的。然而，第4步是你有很多技术选择的地方，因此似乎引发了很多讨论。这门课程和这本书对如何进行第4步并不持有立场，但我们提供了一些关于如何做出选择的指导。

不过，首先让我们退后一步，确保每个人都了解HTML。

### HTML 这里是一些合法的HTML：

> ````
> My Samoyed is really hairy.
> ````

那是一个完全可接受的HTML文档。在文本编辑器中输入它，保存为index.html，并将其放在您的Web服务器上。Web服务器可以提供它。使用Netscape Navigator的用户可以查看它。搜索引擎可以对其进行索引。

假设你想要更具表现力的东西。你希望单词*really*以斜体显示：

> ````
> My Samoyed is <I>really</I> hairy.
> ````

HTML代表超文本标记语言。<I>是标记。它告诉浏览器开始以斜体呈现单词。</I>关闭<I>元素并停止斜体。如果你想更加考究，你可以告诉浏览器强调单词*really*：

> ````
> My Samoyed is <EM>really</EM> hairy.
> ````

大多数浏览器使用斜体来强调，但有些使用粗体，而古老ASCII终端的浏览器（例如Lynx）必须忽略此标记或提出巧妙的渲染方法。一个挑剔的用户可以使用正确的浏览器程序甚至自定义特定标记的渲染。

HTML中还有几十个标签。您可以通过在访问格式令人钦佩的网站时选择“查看源代码”来学习它们。您可以查看[本书的HTML参考章节](html)。您可以通过从Yahoo的HTML指南和教程目录开始学习，[http://dir.yahoo.com/Computers_and_Internet/Data_Formats/HTML/Guides_and_Tutorials/](http://dir.yahoo.com/Computers_and_Internet/Data_Formats/HTML/Guides_and_Tutorials/)。或者您可以购买[HTML & XHTML: The Definitive Guide](http://www.amazon.com/exec/obidos/ASIN/059600382X/pgreenspun-20)（Musciano和Kennedy；O'Reilly，2002）。

#### 文档结构

拥有一大堆标签后，你可以开始在你的文字中更多或更少地随意散布它们。虽然浏览器对技术上不合法的标记非常宽容，但了解HTML文档正式由两部分组成是有用的：*head*和*body*。头部包含关于整个文档的信息，如标题。主体包含用户浏览器要显示的信息。

另一个结构问题是，您应该尽量确保关闭您打开的每个元素。如果您的文档有一个<BODY>，则应在末尾有一个</BODY>。如果您用<TABLE>开始一个HTML表格，却没有一个</TABLE>，则浏览器可能不会显示任何内容。标签可以重叠，但是您应该先关闭最近打开的标签，然后再关闭其他标签，例如，对于同时加粗和斜体的内容：

> ````
> My Samoyed is <B><I>really</I></B> hairy.
> 
> ````

许多新用户困惑的另一个问题是，用于包围段落的<P>元素有一个可选的关闭标签</P>。按照惯例，浏览器会假定开放的<P>元素会被下一个<P>元素隐式关闭。这导致很多出版商（包括我们这些懒惰的老家伙）将<P>元素用作段落分隔符。

这是一个简单格式的网页文档的源HTML：

> ```
>  <html>
>  <head>
>   <title>Nikon D1 Digital Camera Review</title>
>  </head>
>  <body bgcolor=white text=black>
>   <h2>Nikon D1</h2>
>   by <a href="http://philip.greenspun.com/">Philip Greenspun</a>
>   <hr>
>   Little black spots are appearing at the top of every ...
>   <h3>Basics</h3>
>   The Nikon D1 is a good digital camera for ... 
>   <p>
>   The camera's 15.6x23.7mm CCD image sensor ...
>   <h3>User Interface</h3>
>   If you wanted a camera with lots of buttons, switches, and dials ...
>   <hr>
>   <address>
>     <a href="mailto:philg@mit.edu">philg@mit.edu</a>
>   </address>
>  </body>
> </html> 
> ```

让我们逐个部分来看这份文档（参见[![](capture.gif)](examples-basics/simple-page.html)以了解在浏览器中的呈现方式）。

顶部的<HTML>标签表示“我是一个HTML文档”。请注意，此标签在文档末尾关闭。事实证明，这个标签是不必要的。我们将文档保存在文件“simply-page.html”中。当用户请求此文档时，Web服务器查看“.html”扩展名并添加一个[MIME](glossary#MIME)头，告诉用户的浏览器此文档的类型为“text/html”。

这里的HEAD元素主要用于TITLE元素，以便为该文档命名。您在<TITLE>和</TITLE>之间放置的任何文本将出现在用户浏览器窗口的顶部，在Go（Netscape）或Back（MSIE）菜单中，并且在用户将此页面加为书签时也会出现在书签菜单中。在用</HEAD>关闭头部后，我们用一个<BODY>标签打开文档的主体，其中添加了一些将背景设置为白色和文本设置为黑色的参数。一些Web浏览器默认为灰色背景，由于背景和文本之间的缺乏对比度会给用户带来很大的困扰，因此手动更改颜色可能值得一试。这违反了界面设计原则，因为它可能会引入用户对Web体验的不一致性。但是，我们在photo.net上这样做并不感到太愧疚，因为（1）很多浏览器默认使用白色背景，（2）足够多的其他发布商设置了白色背景，以至于我们的页面不会显得不一致，而且（3）它不像设置自定义链接颜色那样影响核心用户界面。

就在body下面，我们有一个大小为2的标题，包裹在<H2>标签中。这将显示在页面顶部供用户查看。我们可能应该使用<H1>，但浏览器通常会以令人惊讶的大字体呈现它。在标题下面，“Philip Greenspun”这个短语是一个超文本*锚点*，这就是为什么它被包裹在一个A元素中的原因。 `<A HREF=`表示“这是一个超链接”。如果读者从这里点击到</A>，浏览器应该获取http://philip.greenspun.com/。

在标题、作者和可选导航之后，我们放入一个水平线标签：`<HR>`。我们从设计师戴夫·西格尔那里学到的一件好事情是不要过度使用水平线：真正的图形设计师使用空白来分隔。我们在文本中使用`<H3>`标题来分隔部分，并且只在文档的最底部放置一个`<HR>`。

在最后的水平线下面，我们用作者的电子邮件地址签署我们的文档。这样，读者可以滚动到浏览器窗口的底部，找出他们刚刚阅读的内容是谁负责的，并找到发送更正的位置。`<ADDRESS>` 标签通常由浏览器程序以斜体显示。请注意，这个标签被包装在一个目标为 "mailto:" 而不是 "http:" 的锚标签中。如果用户点击锚文本（Philip 的电子邮件地址），浏览器将弹出一个 "发送邮件给 philg@mit.edu" 窗口。

### 选择一个编程环境

现在你可以选择一个编程环境来度过剩下的学期。如果你已经建立了一段时间的基于RDBMS的互联网应用程序，那么你可以继续使用你一直在用的工具。更换工具很少是通往荣耀的途径。如果你以前没有建立过这种类型的软件，请继续阅读...

#### 选择一个RDBMS

本学期的RDBMS可能有三个合理的选择：（1）Microsoft SQL Server，（2）Oracle和（3）PostgreSQL。

对于经验丰富的Windows程序员来说，Microsoft SQL Server易于安装和管理。如果你期望在微软环境中度过余生，那么你也可以学会它。

相对于商业竞争对手来说，并发是Oracle的最大优势。在Oracle中，读者永远不用等待写者，写者也永远不用等待读者。假设一个大型网站的发布者在12:00 PM开始一个查询，汇总用户的使用情况。Oracle可能需要花一个小时来筛选200 GB的跟踪数据。硬盘驱动器嘎嘎作响，一个CPU完全被使用直到1:30 PM。进一步假设用户#356712在12:30 PM进来，并在12:30 PM更改了他的电子邮件地址，从而更新了`users`表中的一行。如果使用情况跟踪查询在12:45 PM到达此行，Oracle将注意到此行在查询开始后最后一次修改。根据ACID中的"I"，Oracle需要将发布者与用户的更新隔离开来。Oracle通过进入回滚段并从用户行#356712在12:00 PM开始查询时的数据中生成数据来做到这一点。以下是表格中的情景：

> | 时间 | 发布者 | 公共网络应用 |
> | --- | --- | --- |
> | 12:00 PM | 开始一个90分钟的查询，总结前一年的使用情况 | -- |
> | 12:30 PM | 使用摘要持续进行 | 用户#356712将电子邮件地址从"joe@foobar.com"更改为"joe@yahoo.com" |
> | 下午12:45 | 使用情况摘要到达用户 #356712；Oracle 从回滚段中提取出“joe@foobar.com”用于报告，因为这就是12:30 PM时的值 | -- |
> | 下午1:30 | 使用情况总结报告完成 | -- |

在Microsoft SQL Server中会怎么样？ 当你阅读时，你会对即将阅读的信息进行读取锁定。 在你释放它们之前，没有人可以写入。 当你写入时，你会对即将更新的信息进行写入锁定。 在上述示例中，用户 #356712 将在下午12:30提交他的地址变更请求。 Web服务器上的线程将被阻塞，等待读锁定清除。 它会等多久？ 浏览器窗口右上角会有一个旋转/挥动的“浏览器仍在接收信息”图标。 如果你考虑周到，你可以在SQL Server中围绕这种锁定架构进行编程，但大多数互联网服务运营商宁愿安装Oracle，而不是训练他们的程序员更加仔细地思考并发问题。

开源纯粹主义者唯一现实的关系型数据库选择是 PostgreSQL，可从[www.postgresql.org](http://www.postgresql.org)获取。 在某些方面，PostgreSQL具有比任何商业关系型数据库更先进的特性，它具有类似Oracle的多版本并发系统。 PostgreSQL易于安装和管理，但由于没有办法构建真正庞大的PostgreSQL安装或者能够容忍硬件故障的安装，所以不被大型服务的运营商所使用。

本书中的大多数SQL示例将使用Oracle语法。 这部分是因为Oracle是世界上最流行的关系型数据库，但主要是因为当我们1994年开始在这个领域工作时，我们在MIT上运行的是Oracle，因此我们有整个文件系统都是Oracle代码。 问题集补充材料（见章末）可能包含对ANSI SQL数据库（如Microsoft SQL Server和PostgreSQL）的翻译。

#### 选择过程语言

如上所述，大多数情况下，你的过程代码，即“Web脚本”，只会做更多的事情，即查询RDBMS并将结果与HTML、XHTML Mobile Profile或VoiceXML模板合并。 因此，你的生产力和代码可维护性不会受到你选择的过程性语言的太大影响。

话虽如此，让我们为脚本语言说几句好话。 如果你需要编写一些重度抽象，你可以在Oracle内部运行的Java中或在Microsoft .NET中运行的C#中完成。 但对于你的展示层，即单个页面，请不要忽视使用更简单更简洁的语言，如Perl、Tcl和Visual Basic的优势。

#### 选择执行环境

以下是选择Web服务器和Web/application服务器时要注意的一些事项。

##### 一个 URL = 一个文件

在执行环境中首先要查找的属性是，一个用户可见的 URL 对应一个文件系统中的文件。如果能够根据对 http://photo.net/foobar 的投诉知道，你会在文件系统的/web/photonet/www/foobar.something中找到负责的计算机程序，那么调试系统将快得多。如果编程环境符合这一条件

+   Perl CGI

+   微软活动服务器页面

+   Java 服务器页面

+   AOLserver ADP 模板和 .tcl 脚本

此属性的一个显著例外是 Java servlet。一个 servlet 通常处理多个 URL。这在实践中变得很麻烦，因为在试图修复其他人代码中的错误时会减慢你的速度。模块化和代码重用的思想很好，但试想一下程序员必须查阅多少文件才能修复一个错误。一个文件还好，两个可能还可以。N个文件（其中N是不确定的）就不好了。

##### 过滤器

我们说，为了保持“一个 URL = 一个文件”的神圣原则，模块化和代码重用可以抛弃。通过 *过滤器*，你可以重新获得模块化和代码重用的功能，即指示 Web 服务器“在为以/yow/开头的任何 URL 提供服务之前运行此代码片段”。这对于访问控制代码特别有用。假设你有十五个脚本构成一个比赛系统的管理体验。你希望只有授权管理员才能使用这些页面。检查管理权限需要执行 SQL 查询。你可以编写一个名为 `CheckForContestAdminAuthority` 的过程，并指示你的脚本作者在这十五个管理脚本中的每一个中包含对此过程的调用。你仍然有一些代码的十五个副本：一个 IF 语句，一个过程调用以及如果 `CheckForContestAdminAuthority` 返回“未经授权”则调用错误消息过程的调用。但 SQL 查询仅出现在一个地方，可以集中更新。

这种方法的主要问题不是 IF 语句及其结果的十五个副本。问题在于不可避免地有一个脚本作者会忘记包含检查。因此，你的站点存在安全漏洞。通过将代码安装为服务器过滤器，可以关闭漏洞并消除 IF 语句的十四个副本。请注意，为使此功能正常工作，过滤器机制必须包含用于中止请求页面服务的 API。你的过滤器需要能够告诉 Web 服务器“不要继续为用户提供所请求的脚本或文档”。

##### 抽象 URL

作为一名工程师，你对互联网服务的主要贡献将是数据模型和交互设计（第1步到第3步）。当你在白板上为讨论论坛勾画页面流程时，你会给页面命名，比如“all-topics”，“one-topic”，“one-thread”，“post-reply”，“post-reply-confirm”等。让我们称这些为 *抽象 URL*。假设你决定在 Java Server Pages 中实现你的服务。将 URL 设置为 "all-topics.jsp"，"one-topic.jsp"，"one-thread.jsp" 等是否合理？用户应该关心你是否使用了 JSP 吗？如果你改变主意，转而使用 Perl，你会将用户可见的 URL 更改为 "all-topics.pl"，"one-topic.pl"，"one-thread.pl" 等吗？这将破坏所有人的书签。更重要的是，这个改变将破坏其他网站到你网站的所有链接。这是一个应该对终端用户不可见的实现变化，所付出的巨大代价。

你需要一个足够强大的 Web 编程环境，可以构建我们称之为 *请求处理器* 的东西。这个程序会查看传入的抽象 URL，例如，“one-topic”，并按照以下逻辑进行操作：

+   在文件系统中是否有一个 .jsp 文件；如果是，则执行它

+   寻找请求 XHTML 移动配置文件的手机浏览器的头；如果是，并且文件系统中有一个 .mobile 文件，则提供它，否则继续

+   寻找一个 .html 文件

+   寻找一个 .jpg

+   寻找一个 .gif

（你将想要自定义服务器的首选顺序。）

##### 关于关系数据库管理系统（RDBMS）查询的集中式日志记录

你的 Web 脚本的主要工作是制定 SQL 查询和事务。如果出了问题，你可以得到的最有价值的信息是“我的 Web 脚本告诉 RDBMS 做了什么以及什么顺序”。最好的 Web/应用服务器程序有一个单一的错误日志文件，可以选择性地将所有发送到 RDBMS 的查询写入其中。

### 练习

解决了这些问题之后，你会知道

+   如何登录你的开发服务器

+   你选择的任何编程语言的基础知识

+   如何创建、执行、测试和调试动态 Web 页面

+   如何编写一个查询外部服务器的 Web 页面

+   SQL 的基础知识

+   如何从 shell 查询 RDBMS

+   如何编写一个查询 RDBMS 的 Web 页面

+   如何通过发出和读取 cookies 来个性化 Web 应用程序

+   如何在 XML 中读取和写入数据

+   如何将一个扁平文件的数据加载到 RDBMS 表中

如果你使用 Microsoft .NET，你会发现 [http://philip.greenspun.com/seia/examples-basics/dot-net-examples/](examples-basics/dot-net-examples/) 中的示例很有帮助。

#### 练习1：找到你在世界中的位置

找到你的 Web 服务器的页面根目录，即 Web 服务器开始查找文件的目录。在那里放一个名为 "index.html" 的文件，并填写文本，说明这是你的服务器。在页面底部包含你的超链接电子邮件地址。

仅使用主机名从Web浏览器连接到您的服务器。在接下来的问题集中，我们将假设您的主机名是“yourhostname.com”。验证当您请求http://yourhostname.com时，您的定制页面是否显示。如果您看到的是目录列表而不是您的Web服务器可能没有配置为查找名为“index.html”的索引文件；您将需要重新配置您的服务器。现在使用HTML验证器确保您的HTML是合法的（请参阅雅虎的HTML验证器目录[http://dir.yahoo.com/Computers_and_Internet/Data_Formats/HTML/Validation_and_Checkers/](http://dir.yahoo.com/Computers_and_Internet/Data_Formats/HTML/Validation_and_Checkers/)以获取程序和服务的列表）。

您现在至少已经从您的Web服务器发出了两个请求。这些请求将被记录在服务器访问日志中。在文件系统中找到它，并验证显示的请求时间和文件是否对您有意义。

#### 练习2：您的第一个程序

在与刚刚创建的index.html文件在文件系统中同一级别的位置创建一个名为“basics”的子目录，即basics应该在Web服务器根目录的下一级。该目录应该可以通过http://yourhostname.com/basics/访问。

将一个文件放入目录中，以便可以通过http://yourhostname.com/basics/my-first-program访问（如果您还没有弄清楚如何实现抽象URL，这可能是“my-first-program.pl”或“my-first-program.asp”或类似的文件）。

当我们访问http://yourhostname.com/basics/my-first-program时，我们应该看到当前时间包裹在某种合法的HTML页面中，并附有您的电子邮件地址。

向您的程序添加一些代码，以生成一个除零错误。查找并访问服务器错误日志，查看如何将此错误传达给您。在某些执行环境中，当错误发生时，可能会在浏览器窗口中向您呈现错误消息和堆栈回溯。如果您可以配置您的服务器如此，您会发现本学期的调试速度更快。如果不能，请确保您知道如何快速显示最新的错误。在Unix机器上，您可以在shell中使用“tail -f error.log”命令或在访问错误日志的Emacs编辑器中使用“M-x revert-buffer”命令。

在生成除零错误的代码之前，添加一行代码将以下消息写入错误日志中：“即将除以零”。再次从浏览器请求http://yourhostname.com/basics/my-first-program，然后访问错误日志以验证您的“即将除以零”声明在实际错误之前。

#### 练习3：处理表单

访问[http://philip.greenspun.com/seia/examples-basics/lens](/seia/examples-basics/lens)，查看“你到底需要多长的镜头？”下的焦距计算器。

使这项服务在你的服务器上运行。请注意，这将涉及（1）学习一些关于HTML表单的知识，（2）在photo.net的结果页面上点击“查看源代码”链接，并从那里的程序中提取数学公式，（3）在你的服务器上的/basics/lens-calculator目录下放置一个包含表单的静态.html文件，以及（4）在/basics/lens-calculator-2目录下放置一个处理表单的程序。

（请注意上面的命名约定。本学期尽可能遵循这样的想法，即处理名为“foobar”的表单的脚本位于“foobar-2”处。如果用户必须遵循一系列步骤，我们希望看到它们位于“foobar”、“foobar-2”、“foobar-3”等处。）

#### 练习3a：添加查看源代码链接

本学期我们工作的重要部分是查看其他人的源代码。我们这样做是为了研究解决同一问题的替代方法。你可以通过在刚刚制作的页面底部添加一个“查看源代码”链接来促进这一点。点击此链接的用户应该被提供一个文件，显示所讨论页面背后的所有源代码，但不包括与站点上其他页面共享的程序。

提示：你需要以“text/plain” MIME类型传递你的脚本和任何模板文件（如果适用）。这样接收的浏览器就不会尝试呈现HTML源代码。一些网络浏览器非常主动，即使没有text/html MIME类型，它们也会尝试呈现任何看起来像HTML的内容。适用于这种浏览器的另一种方法是引用所有的HTML，将`<`替换为`&lt;`，将`>`替换为`&gt;`，将`&`替换为`&amp;`，然后将源代码包装在`<PRE>`标签中。

#### 查询外部服务器的服务器

一些最高的成就与努力比例可以通过从多个现有数据源聚合信息来实现。例如，考虑一下比尔·盖茨个人财富时钟，位于[http://philip.greenspun.com/WealthClock](http://philip.greenspun.com/WealthClock)（图2.3）。该程序查询一个公共股票报价服务器（第一个“外部服务器”），以查找微软公司股票的当前价格。第二个查询的外部服务器是美国人口普查局的“人口时钟”，用于估算当前美国人口。

[![](capture.gif)](http://philip.greenspun.com/WealthClock)

**图2.3：** 比尔·盖茨个人财富时钟。该程序查询一个公共股票报价服务器以查找微软股票的价格，查询美国人口普查局的服务器以获取当前美国人口，然后将这些数字组合在一个页面上。

这个程序有几个有趣的地方，它是由其中一位作者在1995年构建的。其中一个有趣的地方是，它是通过AOLserver内置的一个程序`ns_httpget`来抓取互联网上的页面而实现的。这使得整个项目在一个小时内完成。工程学关乎成本。如果构建这个小应用程序需要几天的工作，那么可能就不会完成。另一个值得注意的地方是，这个程序在多年来需要大量的维护，远远超过了最初的开发成本。该程序依赖于使用正则表达式从为人类眼睛设计的HTML页面中提取数据。随着基础数据源的发布者多年来改变他们的HTML格式，这些正则表达式必须不断更新。

关于这个程序值得一提的最后一点是，编码的一部分用于构建一个通用的缓存或*记忆化*系统，以记录评估任何Tcl表达式的结果并存储在全局变量中。为什么？因为编写一个有可能对人口普查局和股票报价服务器施加不合理负载的程序似乎是不礼貌的。此外，如果财富时钟变得受欢迎，它将每秒向基础服务器请求多次相同的数据。最后，似乎用户不应该等待两个子页面被获取，如果他们不需要实时数据。将完整的HTML页面存储在全局变量中，可以从AOLserver的虚拟内存空间中更快地访问，甚至比静态文件还要快。想要实时答案的用户可以通过额外的鼠标点击要求。然后为他们执行的计算会更新缓存以供普通用户使用。

缓存机制可能听起来有些过度设计，但是有时候财富时钟会被极受欢迎的新闻网站链接，并每秒接收到多个请求。在20世纪90年代，能够处理像这样相当高的负载，而不需要庞大的服务器农场是相当罕见的。如果这些请求直接传递给人口普查局，那么整个服务将变得非常缓慢。

该程序的源代码可在[http://philip.greenspun.com/seia/examples-basics/wealth-clock.tcl.txt](examples-basics/wealth-clock.tcl.txt)找到，可能对进行下一个练习有所帮助。

#### 练习4：比较购书

借鉴比尔·盖茨个人财富时钟及其源代码作为模型，构建一个新的Web应用程序，通过一个表单输入书籍的ISBN，并查询几家在线书店以查找价格和库存信息。结果应显示在一个HTML表格中（每家商店的价格和有货/缺货情况）。将您的服务提供在/basics/books（输入表单）和/basics/books-2（结果页面）。

我们建议查询barnesandnoble.com和www.powells.com。你的程序应该能够处理超时、外部网站错误和网络问题。换句话说，在任何情况下，你的用户都不应该看到"服务器错误500"页面。为了确保这一点，你需要学习所选语言中的异常处理。例如，在Java中，你需要使用`try`和`catch`。使用以下ISBN测试你的程序：0590353403，0140260404，0679762906，1588750019。

尝试添加更多书店，但你可能会遇到问题。例如，如果客户端没有在查询中提供会话ID，amazon.com和wordsworth.com通常会响应302重定向。

额外加分：在前述书籍中哪本书提到了"明显的数学突破将是开发一种简单的方法来分解大素数"？

"记住，将哈利·波特与莎士比亚进行比较是一个错误...因为哈利·波特是一个虚构的角色，而莎士比亚是一位作家。你真正应该比较的是J.K. *罗琳*和莎士比亚" -- 金·S·崔。

#### 练习5：与关系数据库管理系统交流

事实证明，学习SQL的基础知识所需的时间比弄清如何将SQL命令传递给关系数据库管理系统要少。这些说明适用于Oracle。如果你使用其他关系数据库管理系统，请参考相关补充资料。

在Unix系统上，通常从Emacs中驱动Oracle是最方便的方式，假设你已经是Emacs用户。键入"M-x shell"以获取Unix shell。键入"M-x rename-buffer"将shell重命名为"sql-shell"，这样你就可以随时再次键入"M-x shell"并获取操作系统shell。在sql-shell缓冲区中键入"sqlplus"以启动Oracle shell客户端SQL*Plus。如果你使用Windows，寻找程序"SQLPLUS.EXE"或"PLUS80.EXE"。

SQL*Plus将提示你输入用户名和密码。如果你使用学校提供的开发服务器，可能需要从助教那里获取这些信息。如果你自己设置了关系数据库管理系统，可能需要在执行此操作之前创建一个新的表空间和用户。

在SQL*Plus提示符下键入以下内容以创建一个表，用于跟踪你本学期所选的课程：

> ````
> create table my_courses (
> 	course_number	varchar(20)
> );
> 
> ````

请注意，在SQL*Plus中，你必须用分号结束你的SQL命令。这些不是SQL语言的一部分，在编写Web脚本时不应使用这些。

插入几行，例如，

> ````
> insert into my_courses (course_number) values ('6.171');
> 
> ````

查看你得到了什么：

> ````
> select * from my_courses;
> 
> ````

提交你的更改：

> ````
> commit;
> 
> ````

请注意，在你键入 COMMIT 之前，另一个连接到数据库的用户是无法看到你插入的行的。"连接到数据库的用户"包括 Web 服务器。学生在使用 Oracle 时常见的困扰之一是，他们使用 SQL*Plus 插入了信息，但却忘记了 COMMIT。新信息不会出现在他们的任何网页上，他们会因此而苦苦调试。当然，他们的脚本没有任何问题。只是 ACID 保证意味着 Web 服务器看到的数据库视图与正在进行事务的用户看到的视图不同。

提交后你对表的视图不应该改变，但或许再检查一下：

> ````
> select * from my_courses;
> 
> ````

使用 RDBMS 的主要好处之一是*持久性*。无论何时你创建的东西都会保留，即使你退出登录也是如此。通常情况下，这是一件好事，但在这种情况下，你可能想要在实验结束后进行清理：

> ````
> drop table my_courses;
> 
> ````

使用`quit`命令退出 SQL*Plus。

#### 读书间歇

现在是休息一下并阅读有关 SQL 的好时机。我们建议阅读 [SQL for Web Nerds](http://philip.greenspun.com/sql/) 的第 1 至 9 章。

#### 练习 6：与 RDBMS 对话的 Web 脚本

查看伪代码文件 [此处](/seia/examples-basics/quotations-pseudo-code.txt)，该文件是用于显示已存储在 Oracle 数据库中的引用的页面的伪代码。

如果你的教师对你很好，他们可能已经将这个伪代码转换成了与你学校使用的基础设施兼容的东西。如果没有，你就得自己翻译，同时还要翻译 [此处](/seia/examples-basics/quotation-add-pseudo-code.txt) 的伪代码。将完成的程序存放在 /basics/quotations（如果必要，加上文件扩展名）。在你的站点索引页上添加到此服务的超链接。

使用网页上的表单手动添加一些引用。如果你没有灵感冲浪的话，这里有一些引用可以帮助你启动：

+   "我觉得自己就像 1942 年德国的犹太人一样。" —— 泰德·特纳（对于被阻止购买另一家电视台的感受）

+   "如果一个男人在森林里说话，而没有女人在那里听到，他还会错吗？" —— 未知女英雄

+   "男人就像一瓶美酒。他们都像葡萄一样起步，而我们的工作就是踩在他们身上，并将他们置于黑暗之中，让他们成熟为你愿意与之共进晚餐的东西。" —— 未知女英雄

+   "女人生活需要四种动物。衣橱里需要一件貂皮。车库里需要一辆捷豹。床上需要一只老虎。付账的时候需要一头驴。" —— 安妮·斯莱特

+   "编辑应该有个兄弟是拉皮条的，这样他就有人可以仰慕了。" —— 吉恩·福勒

+   "最新的计算机只能以速度复合人类之间最古老的问题，最终，传达者将面临一个古老的问题，即该说什么以及如何说。" — 爱德华·R·默罗

+   "自负是麻醉剂，麻痹愚蠢之痛。" — 弗兰克·利希

+   "有些人为了名声，沉迷于零碎的知识，认为他们引用时就会变得不朽。" — 爱德华·扬

返回到您的 RDBMS shell 客户端（例如，Oracle 的 SQL*Plus）并从表中执行 `select *`，以查看您的引用是否已插入表中。

在您的 RDBMS shell 客户端中，使用一些手工编写的 SQL 插入一条引用。要查看应该使用的 SQL INSERT 命令的形式，请查看页面引用添加上的代码。创建这个新表行后，再次执行 `select *`，现在应该看到两行。

提示：不要忘记 SQL 使用单引号而不是双引号引用字符串。

现在从 Web 浏览器重新加载 `quotations` URL。如果您在这里看不到您的新引用，那是因为您��有在 SQL*Plus 中键入 "commit;"，并且 Web 服务器受到保护，不会看到未完成的事务。

#### 练习 6a：通过序列消除 `lock table`

在《SQL for Web Nerds》的“数据建模”和“事务”章节中了解有关Oracle的*序列*数据库对象。[http://philip.greenspun.com/sql/data-modeling](http://philip.greenspun.com/sql/data-modeling) 和 [http://philip.greenspun.com/sql/transactions](http://philip.greenspun.com/sql/transactions)。通过创建一个序列，您应该能够编辑引用添加脚本以

+   消除对 `lock table` 的需求

+   消除事务机制（因为您不再将多个 SQL 语句绑定在一起）

+   在 INSERT 语句中为新引用生成一个唯一键

#### 练习 7：改进数据输入的用户界面

返回到主引用页面并修改它，以便通过现有类别的选择框进行输入（您将需要使用 "SELECT DISTINCT" SQL 命令）。对于新类别，提供一个标记为“新类别”的备用文本输入框。确保修改引用添加，以便在定义新类别时识别。

#### 练习 8：搜索

在/basics/quotations顶部添加一个小表单，用户可以从中输入一个查询词。构建一个针对此表单的目标，返回所有包含指定词的引用。您的搜索应该不区分大小写，并且还应该查找作者列。提示：`like '%foo%'` 和 SQL 的 `UPPER` 和 `LOWER` 函数。

#### 练习 9：使用 cookie 个性化您的服务

现在实现引用数据库的每个浏览器的个性化。总体目标应该是

+   用户可以“杀死”一条引用，并且无论是从顶层页面还是搜索页面，它都不会再出现。

+   杀死引用是持久的，并且在退出和重新启动浏览器后仍然存在。

+   一个用户杀死的引用对其他用户看到的内容没有影响。

+   用户可以通过单击主页上的“删除我的个性化”链接来擦除他们的个性化，并再次查看完整的引用数据库。只有当用户个性化了引用数据库时，此链接才应该出现。

你将使用 cookie 来实现这一点。从你的技术补充材料中，你需要学习如何读取传入的 HTTP 请求头，然后解析出 Cookie 头，或者你可能有一个 API，使得获取特定 cookie 的值变得容易。请注意，你可以通过重新发布具有已经过期的到期日期的 cookie 来使 cookie 过期。

提示1：可以使用 ID cookie 来为浏览器构建此系统，并将被抹掉的引用集合保存在 RDBMS 中。然而，如果你不打算允许用户登录并声明他们的个人资料，那么在服务器上保存数据实际上没有多少意义。

提示2：虽然与 cookie 规范不完全一致，但浏览器接受包含空格的 cookie 值。所以如果愿意，你可以将被抹掉的引用存储为以空格分隔的列表。

提示3：不要在你的 Web 脚本中过滤引用。当你从 RDBMS 中查询的数据比你要向最终用户显示的数据更多时，这通常是无能的编程的迹象。SQL 是一种非常强大的查询语言。你可以使用 NOT IN 功能来排除引用列表。

#### 练习10：在 XML 中发布数据

正如你从查询书店中了解到的，Web 上的数据传统上没有被格式化为计算机程序方便使用的形式。理论上，希望通过 Web 交换数据的人可以使用 XML，这是来自 Web Consortium 的 1998 年标准 ([http://www.w3.org/XML/](http://www.w3.org/XML/))。实际上，你很难从普通网站（2005 年）获得任何基于 XML 的合作。幸运的是，在完成这个问题集时，你可以与你的同学合作：总体目标是使你的数据库中的引用可在结构化格式中导出，以便其他学生的应用程序可以读取它们。

以下是我们需要合作的内容：

+   每个人服务器上的一个约定的 URL，可以获取引用数据库：“/basics/quotations-xml”

+   引用的一个约定格式。

(实际上，我们可以通过建立 *服务发现* 的基础设施和采用 *自描述数据* 的技术（这两者我们将在本学期后期处理）来避免需要事先达成协议，但目前我们会保持简单。)

我们将使用 XML 对引用进行格式化，XML 是一种描述结构化数据的常规符号。XML 结构由以 `<foo>` 和 `</foo>` 形式的 HTML 标签括起来的数据字符串组成，描述了数据应该是什么类型的。

以下是一个非正式示例，展示了我们将用于引用的结构：

> ````
> <quotations>
>   <onequote>
>     <quotation_id>1</quotation_id>
>     <insertion_date>2004-01-26</insertion_date>
>     <author_name>Britney Spears</author_name>
>     <category>Pop Musician Leisure Activities</category>
>     <quote>I shop, go to movies, soak up the sun when possible and go out to eat.</quote>
>   </onequote>
>   <onequote>
>   .. another row from the quotations table ...
>   </onequote>
>   ... some more rows
> </quotations>
> 
> ````

请注意，我们的 SQL 数据模型中每个列都有一个单独的标签：

> ````
> <quotation_id>
> <insertion_date>
> <author_name>
> <category>
> <quote>
> 
> ````

还有一个“包装器”标签，将每一行标识为`<onequote>`结构，并将标识为`<quotations>`文档的一系列`<onequote>`结构作为外部包装器。

#### 构建 DTD

我们可以通过 XML 文档类型定义（DTD）来给出我们的 XML 结构的正式描述，而不是非正式示例。

我们的 DTD 将以`quotations`标签的定义开始。

> ````
> <!ELEMENT quotations (onequote)+>
> 
> ````

这表示`quotations`元素必须至少包含一个`onequote`的出现，但可以包含多个。现在我们必须说明什么构成合法的`onequote`元素：

> ````
> <!ELEMENT onequote (quotation_id,insertion_date,author_name,category,quote)>
> 
> ````

这表示子元素，如`quotation_id`，必须分别按指定顺序出现一次。现在我们必须定义一个实际包含其他内容而不是其他 XML 元素的 XML 元素：

> ````
> <!ELEMENT quotation_id (#PCDATA)>
> 
> ````

这意味着位于`<quotation_id>`和`</quotation_id>`之间的任何内容都应被解释为原始字符，而不是包含更多标签（PCDATA代表“解析字符数据”）。

这是我们完整的 DTD：

> ````
> <!-- quotations.dtd -->
> <!ELEMENT quotations (onequote)+>
> 
> <!ELEMENT onequote (quotation_id,insertion_date,author_name,category,quote)>
> 
> <!ELEMENT quotation_id (#PCDATA)>
> <!ELEMENT insertion_date (#PCDATA)>
> <!ELEMENT author_name (#PCDATA)>
> <!ELEMENT category (#PCDATA)>
> <!ELEMENT quote (#PCDATA)>
> 
> ````

您会发现这非常有用... 嘿，实际上您根本不会发现这个 DTD 对完成问题集的这一部分有任何用处。只有在将文档提供给 XML 解析器时，DTD 才有用，因为解析器可以自动标记每个 XML 文档。对于实现您的引用-xml 页面，您只需要查看非正式示例。

这个练习的核心：编写一个脚本，查询`quotations`表，生成前述形式的 XML 文档，并以“application/xml” MIME 类型返回给客户端。将其放在文件系统中的`/basics/quotations-xml`，以便其他用户可以通过访问约定的 URL 检索数据。

#### 练习 11：导入 XML

编写一个程序，从另一位学生的 XML 输出页面导入引用。您的程序必须

+   从另一位学生的服务器上获取`/basics/quotations-xml`。

+   将生成的 XML 结构解析为记录，然后将记录解析为字段。

+   如果来自外部服务器的引用与您自己数据库中的引用的作者和内容相同，则忽略它；否则，将其插入到您的数据库中并使用新的`quotation_id`。（您不希望来自外部服务器的键与数据库中已有的内容发生冲突。）

提示：您可以使用`create table quotations_temp as select * from quotations`设置临时表，然后在调试完成后将其删除，以免弄乱您自己的引用数据库。

您不需要作为这个练习的一部分编写XML解析器。您可以使用通用的XML解析器，或者您的助教会给您一个只能解析这种特定格式的简单程序。如果您没有得到助教的帮助，而您使用的是Oracle，请记住，Oracle RDBMS具有广泛的内置支持来处理XML。阅读Oracle文档，特别是Oracle XML DB开发人员指南 - Oracle XML DB。如果您使用Java或Perl，那么有大量免费的开源XML解析器可用。Microsoft .NET Framework类库包含提供完整一套XML工具的类。

#### 练习12：接受信用

请查看您的源代码文件。确保顶部有一个标题，解释了（1）谁编写了代码，（2）编写日期是什么，以及（3）它试图解决什么问题。请查看您的网页。确保每个页面底部都有一个mailto:链接到您的永久电子邮件地址。

作为其他程序员的专业义务，您有责任对您的源代码负责。作为最终用户的专业义务，您有责任对他们使用您的程序的体验负责。

### 数据库练习

现在我们将转入问题集的一部分，旨在教授您更多关于关系数据库管理系统和SQL的知识。如果您使用的是Oracle之外的RDBMS，请查看您的补充材料。

为了便于提交问题集，请保留一个文本文件副本，其中包含您数据库会话的相关部分，网址为http://yourhostname.com/basics/db-exercises.txt。

#### 数据库练习1：SQL*Loader

+   使用标准文本编辑器创建一个纯文本文件，其中包含五行，每行包含您最喜欢的股票符号、持有的整数股数和购买日期（格式为MM/DD/YYYY）。在每行上用制表符分隔字段。

+   创建一个Oracle表来保存这些数据：

    > ```
    > create table my_stocks (
    >        symbol	       varchar(20) not null,
    >        n_shares	       integer not null,
    >        date_acquired   date not null       
    > );
    > 
    > ```

+   在Unix上使用`sqlldr` shell命令调用SQL*Loader将您的制表符分隔文件导入到`my_stocks`表中

根据您在浏览文档方面的资源丰富程度，这个练习可能需要十五分钟或一生。本章的更多部分讨论的书籍《Oracle：完全参考》非常有帮助。您也可以在官方Oracle文档中阅读有关SQL*Loader的内容，链接在[http://www.oracle.com/](http://www.oracle.com/)，通常在实用手册中。请注意，在线查找Oracle文档需要一定的耐心，通常需要注册（免费）。寻找标有“查看库”和标签为“书籍”的链接。

#### 数据库练习2：从一张表复制数据到另一张表

这个练习存在的原因是我们发现，当面临将数据从一张表移动到另一张表的任务时，程序员们会通过 SQL*Net 从 Oracle 拉取数据到他们的 Web 服务器，通过 Web 脚本对其进行操作，然后再通过 SQL*Net 推送回 Oracle。这不是正确的方式！SQL 是一种非常强大的语言，如果你想要在关系数据库管理系统内部移动数据，就没有必要引入任何其他工具。

+   只使用一个 SQL 语句，创建一个名为`stock_prices`的表，有三列：`symbol, quote_date, price`。在这个语句中，填充正在创建的表，每个符号在`my_stocks`中占一行。日期和价格列应填充为当前日期和一个名义价格。提示：`select symbol, sysdate as quote_date, 31.415 as price from my_stocks;`。

+   创建一个新表：

    > ```
    > create table newly_acquired_stocks (
    >        symbol	       varchar(20) not null,
    >        n_shares	       integer not null,
    >        date_acquired   date not null       
    > );
    > 
    > ```

+   使用一个单独的 `insert into ... select ...` 语句（带有适用于你的示例数据的 WHERE 子句），将`my_stocks`中约一半的行复制到`newly_acquired_stocks`中

#### 数据库练习 3: 连接

使用一个 SQL 语句 JOIN `my_stocks` 和 `stock_prices`，生成一个报告，显示符号、股票数量、每股价格和当前价值。

#### 数据库练习 4: 外连接

向`my_stocks`插入一行。重新运行上一个练习中的查询。注意到你的新股票没有出现在报告中。这是因为你已经将它们与约束条件中出现在两个表中的符号 JOIN 起来。

修改你的语句，使用外连接，这样你将获得所有股票的完整报告，但如果没有可用的价格信息，就不会获得价格信息。

#### 数据库练习 5: PL/SQL

受到华尔街对互联网公司估值方法的启发，我们为这个问题集开发了自己的估值方法：一支股票的价值等于其符号的 ASCII 字符的总和。（请注意，使用小写字母表示符号的学生将拥有比使用全大写符号的学生更高价值的投资组合；"IBM"只值 $216，而"ibm"值 $312！）

+   定义一个带有交易符号作为参数的 PL/SQL *函数*，返回股票价值。提示：Oracle 内置的 `ASCII` 函数会很有帮助。

+   使用一个 UPDATE 语句，更新`stock_prices`，将每支股票的价值设置为这个 PL/SQL 过程返回的值

+   定义一个不带参数的 PL/SQL 函数，返回投资组合的总值（每支股票的`n_shares * price`的总和）。你需要将上面的数据库练习 3 中的 JOIN 定义为一个游标，然后使用 PL/SQL 的游标 FOR LOOP 功能。提示：完成后，你可以在 SQL*Plus 中运行这个过程，使用`select portfolio_value() from dual;`。

SQL*Plus提示：虽然它不是SQL语言的一部分，但如果您通过SQL*Plus应用程序将它们传输给Oracle，您会发现在PL/SQL定义后键入“/”非常有用。除非您编写完美的代码，您还需要了解SQL*Plus命令“show errors”。要了解这种类型的所有混淆，参阅SQL*Plus用户指南和参考书，这是Oracle数据库文档中包含的书籍之一。

#### 数据库练习 6：多买一些赢家

而不是在赢家身上获利，多买一些！

+   使用 SELECT AVG() 计算您持有的股票的平均价格

+   使用单个带有SELECT语句的INSERT，将所有价格高于平均价格的股票的持股数量翻倍（`date_acquired`设置为`sysdate`）

重新运行您在数据库练习 4 中的查询。请注意，在某些情况下，您可能会对同一符号有两行记录。如果您真正感兴趣的是您当前的持仓情况，您希望一份报告中每个符号最多只有一行记录。

+   使用来自`my_stocks`的`select ... group by ...`查询生成一个按符号和总持股数的报告

+   使用一个`select ... group by ...`查询与`stock_prices`连接，生成一个按符号和每个符号持有的总价值报告

+   使用一个`select ... group by ... having ...`查询生成一个按符号、总持股数和每个符号总价值的报告，*限制在您至少持有两个股票块的符号*（即“赢家”）

#### 数据库练习 7：使用视图封装您的查询

使用上面的最终查询，创建一个名为`stocks_i_like`的视图，封装最终查询。

### 更多

+   关于HTTP：Web联盟在[http://www.w3.org/Protocols/](http://www.w3.org/Protocols/)上的规范标准

+   关于HTML：本书的HTML参考章节

+   关于ASP.NET：Stephen Walther的[ASP.NET Unleashed](http://www.amazon.com/exec/obidos/ASIN/067232542X)（Sams 2003）

+   关于Oracle RDBMS：一本非常有用的实体书是Kevin Loney的Oracle XX：来自Oracle Press的完全参考书，其中“XX”是Oracle的最新版本。在出版时[Oracle 10g：完全参考](http://www.amazon.com/exec/obidos/ASIN/0072253517/pgreenspun-20)（2004）可用。所有Oracle文档都可以在[www.oracle.com](http://www.oracle.com)上找到，但对于初学者来说可能会有些压倒性。

### 问题集补充内容

+   针对使用Microsoft .NET的人：[http://philip.greenspun.com/seia/examples-basics/dot-net-examples/](examples-basics/dot-net-examples/)

+   针对使用Java的人：[http://philip.greenspun.com/seia/examples-basics/java-examples/](examples-basics/java-examples/)

+   定期参考本章的在线版本以查找新的补充内容：[http://philip.greenspun.com/seia/basics](http://philip.greenspun.com/seia/basics)

### 时间和动作

最幸运的学生只需要花费两个小时设置他们的关系数据库管理系统和开发环境。做出合理技术选择的普通学生可以预计花费一两天的时间将事物正确连接起来。一些不幸的学生在系统管理员、硬件方面不幸，或者在互联网和面对面寻求帮助方面不够机智的学生可能会花费许多天时间才能建立一个可用的环境。在MIT，我们让学生在第一堂课开始前至少三周开始进行系统管理/数据库管理。

在一个已建立的开发环境中，本章的练习对于在有助教的实验室中工作的MIT学生来说需要花费六到十二个小时，对于那些独自工作的学生可能需要长达二十个小时。

## 计划

* * *

如果你正在阅读这一章节，我们假设你已经完成了“基础”问题集，并将在本学期的其余时间内继续学习课程。欢迎。现在是计划在课程核心期间工作的时候了。

本课程中的每个人都将建立一个在线学习社区，一个用户互相教授的网站。工作可以独自完成，也可以由两到三名学生组成的小组完成。理想情况下，你或你的教师会为你找到一个真实的客户，一个希望持续发布和管理社区的人。一个好的客户可能是一个非营利组织，希望教育人们关于其使命周围的主题。一个好的客户可能是一家中等规模的公司，希望为员工建立一个知识共享系统。一个好的客户可能是你大学的一个学生团体。如果找不到客户，选择你热衷的事物。可以是伊斯兰建筑。可以是非洲丽鱼（一种生活在东非裂谷湖泊中的淡水鱼类家族；参见[www.cichlid.org](http://www.cichlid.org/)）。可以是密码学。选择一些你认为可以轻松获得或生成*磁性内容*的东西，一些吸引用户到你服务的教程信息。

你正在构建与班上其他人相同类型的项目。因此，你可以轻松比较不同的方法，例如用户注册或内容管理。

然而，在开始编写代码之前，我们希望你进行一些规划和竞争分析。基本上，你需要回答“谁将向谁教授什么？”和“目前有哪些替代方案可用于这种学习？”这两个问题。

### 用户类别

首先，将你的用户分成不同的类别。如果你期望他们对你的服务有着基本相同的体验，那么两个用户应该属于同一类别。在将用户分成不同类别时，考虑不同级别的管理权限几乎总是有用的。几乎从不有用的是考虑教师与学习者之间的区别；在线社区的整个重点是每个用户在某个时候都在学习，每个用户在某个时候都在教授。

#### photo.net上的用户类别分解示例

为了让你了解用户类别分解可能是什么样子，我们将以[photo.net服务](http://www.photo.net)为例进行介绍。

首先，考虑一下photo.net的整体目标：一个人可以去那里得到关于摄影的任何问题的答案的地方。

其次，考虑管理特权的级别。有**全站管理员**，他们可以自由编辑或删除站点上的任何内容。这些管理员还有权调整其他用户的权限。我们有**版主**，他们有权批准或删除特定讨论区的帖子。最后有**普通用户**，他们可以阅读、发布和编辑自己的贡献。一个不太受欢迎的服务可能只需要两个管理特权级别。

另一种区分用户的方式是根据访问服务的目的：

+   **想成为快速拍摄者** — 想要快速获得关于应该购买哪款快速拍摄相机以及在哪里购买的建议；希望在摄影方面投入最少的时间、精力和金钱

+   **新手摄影爱好者** — 想要开始拍摄以表达艺术，但目前没有具有灵活控制的相机

+   **新手摄影学习者** — 拥有合适的设备，但想要关于何时、何地以及如何使用它的建议；希望对完成作品进行评价

+   **专业摄影师** — 想要新的想法，了解硬件领域的最新动态，分享专业知识，寻求社区

+   **想成为商业摄影师** — 可能是一个对未来感到好奇的高中或大学生，或者是一个想要转行的老年人；想要知道是否可以靠摄影谋生，以及如何开始。

+   **展商** — 想要将照片上传到照片分享系统，并在photo.net读者群中建立观众群体

+   **旅行者** — 想要了解全球各地的摄影地点，以便在已经计划好的旅行中拍摄照片，或者想要灵感去哪里旅行拍摄照片

+   **读者** — 喜欢像《与萨曼莎一起旅行》这样的旅行故事和观看照片，但不想自己拍照

另一种有用的用户分组方式是根据他们的连接方式。以photo.net为例，很容易想象**Web浏览器用户**。这个用户正在上传和下载照片，参与讨论，阅读教程，购物设备等。同一个人可能通过手机连接，这样他或她就成为**移动用户**。如果移动用户正在进行摄影项目，我们希望提供关于附近相机店，处理实验室，维修店，日落时间，好的拍摄地点等有用数据。如果移动用户是为了社交目的而连接，我们需要考虑手机用户如何参与在线社区的实际方式。我们的工程挑战与**电话用户**类似。

### 使用场景

对于每类用户，您应该大致写下这个类别的人从您的新服务中获得的想法。您可能想暗示页面流程。

#### 例：photo.net上的新手摄影购物者

新手应该从阅读一堆精心编写的购买相机建议文章开始，然后阅读特定相机的评论。许多最佳购物建议都包含在讨论论坛内的问答交流中，因此编辑需要一种方法来挑选并指向论坛存档中最佳的帖子。在我们的用户阅读了所有这些内容之后，如果他或她能够进入一个问答论坛，那将是理想的，“这是我决定购买的东西；你认为怎么样？”这样的问题会受到欢迎。这可以作为一个明确的社交购物系统来实现，其中一栏是其他读者的回复，另一栏是相机店的报价。

#### 例：photo.net的站点全局管理员

站点全局管理员应登录并查看一个页面，该页面提供社区脉搏的统计数据，包括新注册用户数量，上传到照片共享系统的照片数量，讨论论坛的活动情况，以及版主（社区志愿者）的相对努力。如果有一些未被封禁的用户负责大量版主工作，删除了与主题无关的帖子等，这些用户应列出其问题活动的摘要，并提供封禁选项。

### 练习1a

回答以下问题：

+   在您正在构建的社区中，人们将能够学习什么主题？

+   您希望人们在访问后对您的服务有何评价？

+   哪些是相关的不同用户类别？

+   移动手机用户应该能做什么？将语音和文本互动混合是否有效？（请参阅Web联盟的“多模式语音标记语言的需求”[http://www.w3.org/TR/multimodal-reqs](http://www.w3.org/TR/multimodal-reqs)以获取一些可能的提示。）

确保您对这个和所有后续练习的答案都可以在网络上访问。确保所有与您的项目相关的文档都可以在项目服务器本身上找到，可能在`/doc/`目录中是个好主意。

### 练习1b：构建用户个人资料页面

当构建一个应用程序时，最理想的情况是随时有潜在用户与您在同一房间。这样他们的需求就会具体而明显。然而，这并不太实际，因此为了帮助使您为之构建应用程序的人具体化，您应该构建两到三个个人资料页面。个人资料页面包含以下信息：（a）用户的照片，（b）用户的姓名、年龄、职业、婚姻状况、住房情况和收入，（c）与您正在构建的在线社区相关的用户的短期和长期目标，（d）此用户将带到网站的即时问题，（e）此人家中的计算机设备和连接类型，以及（f）任何其他信息，将有助于使这个虚构的人具人性化。

为了帮助您完成这项任务，我们为通用航空领域的在线学习社区创建了一些示例：

+   Rachel Lipschitz ([http://philip.greenspun.com/seia/examples-planning/user-profile-1](examples-planning/user-profile-1))

+   Melvin Cohen ([http://philip.greenspun.com/seia/examples-planning/user-profile-2](examples-planning/user-profile-2))

+   Mindy Silverblatt ([http://philip.greenspun.com/seia/examples-planning/user-profile-3](examples-planning/user-profile-3))

如果您没有自己的照片库，可以从photo.net和其他在线来源中获取照片（并注明出处）。

不要在这个练习上花费超过一个小时；许多真正糟糕的软件都是在程序员桌上有着花哨用户资料的情况下编写的。没有什么能代替向真实用户推出服务，然后密切观察他们的行为。

### 练习1c

对于在练习1a中确定的每类用户，为这些用户如何体验您的服务制作文本或图形使用场景。

### 评估备选方案：离线

[![Nick Gittes and Alex. 1998.](http://www.photo.net/photo/pcd0865/nick-gittes-and-alex-107.1.jpg)](http://www.photo.net/photo/pcd0865/nick-gittes-and-alex-107.tcl) 每当Nick Gittes（1902年-2000年；其中一位作者的祖父）看到电视上有计算机广告时，他会说：“家用计算机。为什么有人会想要这样的东西？”

互联网泡沫已经结束。您应该有一个建立信息系统的充分理由。如果一个吹毛求疵的人想知道为什么您需要所有这些花哨的计算机而不是一本书、一块粉笔和纸和铅笔，最好有一个令人信服的答案。

有充分理由去研究线下资源和系统的最佳元素。经过数千年的发展，许多这些系统已经被精心打磨，非常有效。通过仔细研究最佳的线下替代方案，你的在线社区和技术辅助学习环境可以得到很大改善。

#### 例子：《大众摄影》杂志

美国摄影界发行量最大的线下刊物是已有六十五年历史的《大众摄影》杂志。它非常擅长回答以下问题：尼康50/1.4镜头的价格是多少？最新的相机有哪些？新的佳能Elan 7机身在测试台上表现如何？

杂志并不适合从头到尾学习。《大众摄影》不可能卖足够的广告来刊登一篇二十页的教程文章，更不用说一本完整的摄影入门教材了。杂志也不适合找到二手或者冷门物品的平均价格。（《快门虫》是二手和经典相机经销商广告的地方。）

作为获取任意问题答案的手段，杂志并不有效。每期都有一个“太烫手了”栏目，承诺“对你最尖锐的问题给予诚实、直率的回答”。不幸的是，每期只回答四个问题。可以推测这些问题至少是几个月前提交的。而答案只来自杂志编辑；他们没有利用成千上万订阅者中可能存在的知识储备。

作为展示读者作品的手段，杂志并不有效。每期的“你的最佳作品”栏目展示了五六张读者投稿的照片，但被选中是一个缓慢而不确定的过程。

#### 例子：面对面课程

面对面摄影课程的主要优势在于有保证的导师指导。导师会跟踪每个学生的进展和问题。面对面课程的另一个优势是可以得到其他学生和导师的批评。

面对面课程需要更多的旅行、时间、精力和承诺，而许多人无法做到。一旦课程结束，学生就无法得到导师和其他学生的指导和批评。

### 练习2

写下线下替代学习服务主题的最佳特点。指出你认为哪些特点可以转化为在线社区，并说明如何转化。写下三句理由，解释为什么你的在线学习社区将比线下替代方案对某些人群更有改进。

### 评估替代方案：在线

在对在线竞争对手进行分析时，您应该查看您专业领域中任何学习服务或资源。但特别注意在线学习社区。在开始浏览之前，您可能会发现考虑以下可持续在线社区要素很有用：

1.  专家创作的磁性内容

1.  协作手段

1.  强大的浏览和搜索设施，既包括磁性内容，也包括贡献内容

1.  管理委派手段

1.  识别给社区带来不当负担的成员的手段，以及改变他们的行为和/或将他们从社区中排除，而不让他们意识到

1.  社区成员自行扩展软件的手段

当您访问网站时，请问自己“他们是否创作或许可了大量的教程内容？”查看由发布者创作和用户创作的内容比例。如果超过一半的内容是由用户创作的，该网站正在向*社区*而非*出版*方向发展。注意用户可以发布信息以供其他用户使用的各种方式的数量（“协作手段”）。查看网站上的默认搜索工具是否返回来自讨论论坛帖子等内容的结果。作为一个非特权用户，您很难确定网站是否提供了分发内容审核负担或排除难以处理的用户的规定。然而，您有时可以推断出第6个元素，即软件是否可以由常规用户和社区管理员扩展，但并非专业程序员。如果网站是商业性质的，请查看招聘信息以了解所需技能。如果网站还没有采用抽象URL规则（请参阅“基础”章节），则文件扩展名可能会提示您实现技术的线索。".pl"、".asp"、".php"、".adp"或".tcl"表示使用一种适合新手进行程序扩展的脚本语言。".jsp"或URL中的术语"servlet"表示使用Java，这是一种仅供专业程序员使用的语言。

### 练习3

查找您专业领域中最好的现有在线社区。注意它们与上述六个可持续性要素的紧密程度。还要记下注册过程和协作机制中任何显著优点或缺点，例如在讨论论坛、文章评论和聊天室中。寻找语音和移动界面。如果有的话，试试它们。（["将移动用户添加到您的社区"章节](mobile/)提供了一个桌面浏览器手机仿真器的列表，这样您就不必使用您的手机；或者在公共搜索引擎中输入“WAP仿真器”或“移动浏览器仿真器”）。寻找个性化和直接控制偏好的证据。

### 世界是否需要多于一个在线社区？

假设在练习3中，你在你的专业领域找到了100个在线社区。你应该感到沮丧吗？在亚马逊网站上搜索“水族馆”会得到679本关于在家养鱼的书。国家教育统计中心([nces.ed.gov](http://nces.ed.gov/))发现，1998年美国有3913所大学和大学。计算世界在历史上倾向于集中。只有一个或两个桌面用户界面，一个或两个文字处理器，一个或两个电子表格，少数企业会计系统等。两个因素阻止了在线学习社区领域的类似集中。一个是作者的个性化。一个人可能认为《安娜·卡列尼娜》是有史以来最好的小说，同时也对阅读C·D·佩恩的[《青春叛逆》](http://www.amazon.com/exec/obidos/ASIN/0385481969/pgreenspun-20)感兴趣。一个电影观众可能认为《飘》永远不会被超越，但仍然愿意花两个小时观看[《谎言》](http://www.amazon.com/exec/obidos/ASIN/0780022300/pgreenspun-20)。在明确的教程作品中，个性化的范围较窄。尽管如此，人们可以承认斯特罗贝尔的[《基本摄影材料和工艺》](http://www.amazon.com/exec/obidos/ASIN/0240804058/pgreenspun-20)的巨大成就，但仍然可以从学习[《黑白摄影的掌握》](http://www.amazon.com/exec/obidos/ASIN/1880559234/pgreenspun-20)（Bernhard Seuss 1995）中获益。

阻止在线学习社区世界集中的第二力量是社区本身的性质。克里斯托弗·亚历山大、莎拉·石川和默里·西尔弗斯坦在[《模式语言》](http://www.amazon.com/exec/obidos/ASIN/0195019199/pgreenspun-20)（牛津大学出版社1977年）中反对超过几百万人口的国家：

> "很容易看出为什么一个地区的政府随着规模的扩大变得越来越难以管理。在一个由N个人组成的人口中，需要大约N^2个人与人之间的联系来保持沟通渠道的畅通。当N超过一定限制时，民主、正义和信息所需的沟通渠道变得太过拥挤和复杂；官僚主义淹没了人类的进程。...
> 
> "我们认为当一个地区的人口达到2到10百万时，就已经达到了极限。超过这个规模，人们就会远离政府的大规模运作过程。在现代历史的光芒下，我们的估计可能看起来很不可思议：民族国家已经强大起来，它们的政府控制着数千万，有时甚至数亿的人口。但这些巨大的权力不能声称有一个自然的规模。它们不能声称已经在城镇和社区的需求与整个世界社区的需求之间取得平衡。事实上，它们的倾向是忽视当地需求，压制当地文化，同时使自己扩张到无法触及的地步，他们的权力对普通公民来说几乎无法想象。"

如果每个人都能聚集到一个社区中并获得良好的学习体验，美国在线早就吞并了互联网上所有较小的社区。本书的后面章节之一专门讨论了如何将在线社区优雅地发展到大规模的问题。但是，目前可以放心的是，这是一个没有人解决的难题。只要有足够高质量的磁铁内容和一群致力于教学的人，总会有新的学习社区的空间。

### 练习4

本学期为您的社区确定磁铁内容的来源。如果其中一些内容来自其他人，请写信向他们请求许可。即使您只是试验性地使用他们的作品，作者或出版商可能担心的一点是，您的网站将被搜索引擎索引，读者将被误导到您的网站而不是他们的网站。实际上，如果您的服务器无法从公共互联网访问，或者如果您包含一个`robots.txt`文件，指示搜索引擎排除某些内容，这不是一个问题。如果您同意提供超链接的信用并确保他们的内容不会被多次索引，您可能会得到版权持有者更友好的回应。

如果您有一个客户提供所有磁铁内容，请写下将要提供的内容以及时间的摘要。在每类文件旁边，注意负责汇编和交付它们的人员。作为一名工程师，您的工作不是汇编和开发内容，而是识别项目风险，比如“磁铁内容不足”或“没有人考虑磁铁内容”。

### 域名系统

域名系统（DNS）将人类可读的主机名，例如`www.google.com`，转换为机器可读和网络可路由的IP地址，例如`216.239.57.100`。 DNS是一个分布式应用程序，没有单个计算机保存所有可能主机名的转换。域名注册商，例如[register.com](http://www.register.com)，记录了google.com域的域名服务器位于特定IP地址。用户的本地*名称服务器*将查询google.com的域名服务器以找到主机名`www.google.com`的转换。请注意，“www”并没有什么神奇之处；它只是一个运行Web服务器的计算机的传统名称。翻译主机名，例如[`froogle.google.com`](http://froogle.google.com/)的过程与翻译`www.`的过程相同。

### 练习5：确定主机名

与您的客户合作，为您本学期将要构建的应用程序选择一个主机名。例如，如果您正在MIT内构建某些东西，您可能会选择`something.mit.edu`。您和您的客户将需要处理IT官僚主义，注册该主机名并将其映射到服务器的IP地址。如果您为没有互联网域的客户构建服务，请鼓励他们想出一个好名字并注册它。作者们在[register.com](http://www.register.com)上有很好的经验，该服务包括使用他们的DNS服务器的捆绑使用；域所有者可以通过Web浏览器界面编辑主机名到IP地址的转换。

### 练习6：协商知识产权

区分专业软件工程师的一件事是成功协商知识产权。如果您将您所生产的一切作为“按照要求工作”的方式赠与他人，您将没有个人工具包，可以在新项目中重复使用。如果您不放弃任何权利，没有人将能够运行您的软件，这可能意味着您将无法解决社会或组织问题。一个优秀的谈判者会放弃对对方有价值但对自己无价值的东西。

在本课程中，例如，您理想情况下希望保留您所生产的所有软件的所有权。因此，您将可以自由地以任何方式重复使用代码。然而，客户将会花费大量时间和精力与您合作数月，因此有权获得一些好处。您的大学学费可能已经耗尽了您银行账户中的所有现金，因此您不会向客户支付金钱作为对他或她时间的补偿。您可以给客户使用您的软件的许可证。这显然对客户有利，但也对您有利。越多人愉快地运行您的软件，您的专业简历看起来就越好。

您应该尝试限制客户对您的软件的使用吗？通常这是不值得的。任何寻求编程帮助的组织可能不是一个愿意挂出招牌并为其他人开发软件的组织。如果他们决定将您的软件调整到公司的另一个应用程序中，很可能他们会首先打电话给您，以提供咨询费以换取您的帮助。

如何限制您的责任？通常软件工程师被要求编写可能导致灾难性结果的程序。假设您被要求为一家投资银行编写一个交易程序，酬金是$100,000。这可能听起来很不错，直到银行因为您程序中的一个错误导致他们损失了$100 million 的利润而起诉您。在生物医学领域，错误可能更为严重。有一个著名的案例是 Therac-25 辐射治疗机器，其控制软件中的错误导致了生命的损失（见[http://sunnyday.mit.edu/therac-25.html](http://sunnyday.mit.edu/therac-25.html)）。

免责责任是困难的，即使对于受过培训的律师，因此最好交给专业人士处理。几乎每个商业软件许可证都包含免责声明。以下是微软最终用户许可协议（EULA）的一部分：

> **19\. 免责声明。在适用法律允许的最大范围内，微软及其供应商按原样提供软件和支持服务（如果有），并在此声明所有其他明示或暗示的保证和条件，包括但不限于任何（如果有）适销性，适用于特定用途，可靠性或可用性，回应的准确性或完整性，结果，努力程度，无病毒性和无过失的隐含保证，所有与软件有关，以及提供或未能提供支持或其他服务，信息，软件和相关内容，通过软件或其他方式使用软件产生的。此外，对于软件，没有所有权，安静享有权，安静拥有权，与描述的一致性或不侵权的保证或条件。
> 
> **排除附带、间接和某些其他损害。在适用法律允许的最大范围内，微软或其供应商对于任何特殊、附带、惩罚性、间接或后果性损害（包括但不限于利润损失、机密性或其他信息的损失、业务中断、个人受伤、隐私权的损失、未能履行任何义务（包括诚信义务或合理注意义务）、疏忽和任何其他金钱或其他损失）的任何可能与软件的使用或无法使用、通过软件提供或未能提供支持或其他服务、信息、软件和通过软件或其他方式与软件的使用有关的内容有关的损害，或本EULA的任何规定，在任何情况下，即使微软或任何供应商存在过失、侵权行为（包括疏忽）、虚假陈述、严格责任、违约或保证的违约，甚至如果微软或任何供应商已被告知此类损害的可能性。**
> 
> **责任限制和补救措施。尽管您因任何原因可能遭受的任何损害（包括但不限于此处提及的所有损害以及合同中的所有直接或一般损害或其他任何内容），微软及其任何供应商在本EULA的任何规定下的全部责任及您在此之下的独家补救措施（除了微软根据有限保修的任何违约而选择的修复或更换补救措施）应限于您因合理依赖软件而遭受的实际损害，最高不超过您为该软件实际支付的金额或5美元。前述限制、排除和免责声明应适用于适用法律允许的最大程度，即使任何补救措施未能达到其基本目的。**

这对于微软来说非常重要，它是一个十二页协议中唯一以粗体印刷的部分，也是加拿大客户以及法语翻译呈现的唯一部分。

如果您不想剪切和粘贴微软的措辞，这可能会使您面临来自雷德蒙德的版权侵权行为，请考虑使用标准的免费软件或开源许可证，其中GNU通用公共许可证是最为人所知的例子。请注意，使用免费软件许可证并不意味着您的软件现在对全世界都是免费的。您可能已经根据GNU GPL向一个客户授予了许可，但是是否决定向其他人提供许可证是未来的决定。

如果您愿意，您可以将[本书末尾的示例合同](contract)用作与客户谈判权利的起点。请记住那句老话：*你得到的不是你应得的，而是你谈判得到的。*

### 更多

+   "在线社区的案例"，麦肯锡季刊，Shona Brown等，2002年，第1期，[http://www.mckinseyquarterly.com/article_abstract.asp?ar=1143](http://www.mckinseyquarterly.com/article_abstract.asp?ar=1143)

### 对于教师

在课程的第二次会议期间，邀请客户来校园进行三分钟的演讲，介绍他们的项目。以下是建议给客户的演示大纲：

1.  介绍演讲者及其代表的组织（15秒）

1.  解释用户是谁以及为什么他们需要通过互联网应用程序进行互动，即这个在线社区解决了什么问题（1.5分钟）

1.  描述用户最初如何被吸引到网站上，例如，是否有一些这些人需要但其他地方找不到的磁性内容集合？（30秒）

1.  网站运行几个月后，新用户的典型互动会是什么样子？（30秒）

1.  学期结束后会发生什么，系统将如何获得资金和维持运营？（15秒）

客户应准备在演示后回答一两分钟的问题。

### 时间与动作

这个问题集包括与客户进行两小时的会议，也许是学生之间两小时的讨论和网络浏览，一个小时来构建用户个人资料页面，两小时的写作。总共是七个小时，其中大部分需要整个团队共同努力。

## 软件结构

* * *

在着手开发项目之前，最好先勾勒出要构建的系统的整体结构。

### 总体解剖

任何良好的在线学习社区都会有大致相同的核心结构：

1.  用户数据库

1.  内容数据库

1.  用户/内容地图

1.  用户/用户地图

如上所述，“数据库”是一个抽象术语。例如，用户数据库可以实现为关系数据库管理系统中的一组SQL表。用户数据库的表不需要以任何方式与用于实现其他模块的表分开，即它们都由同一用户拥有并驻留在同一表空间中。另一方面，用户数据库可能是在线学习社区核心持久性源的外部。用户数据库可能变成外部的常见情况是公司的知识管理系统，员工通过检查中央[LDAP服务器](glossary#LDAP)进行身份验证。

这些核心数据库如何分割的一个更现代的例子可能出现在Web服务的世界中。例如，Microsoft Hailstorm提供用户数据库服务给互联网的其他部分。一个大学可能建立互补的社区，一个是给高中学生，另一个是给其他学校的同事，两者都由相同的基因组内容数据库支持。基因组内容数据库可能在一个物理上独立的计算机上运行，并通过[WSDL](glossary#WSDL)进行服务广告，并通过[SOAP](glossary#SOAP)提供这些服务。

### 用户数据库

用户数据库至少需要记录用户的真实姓名和电子邮件地址。请记住，用户越被识别、认证和追踪，就越有机会将他们聚集在一起建立社区。在一个匿名用户互相在屏幕名后面互相叫嚷的环境中，编程和系统管理的努力是不值得的。用户数据库应该有一个记录用户姓名和电子邮件地址可靠性的功能，因为随着时间的推移，姓名可能会变得更加可靠，而电子邮件地址则可能变得不太可靠。

为了促进一个可追踪和可识别的环境，用户数据库应该能够为每个用户存储一个个人URL。如果这是一个Yahoo! Geocities页面，它对责任和识别度的贡献不会太大。另一方面，如果URL以"http://research.hp.com/personal/"开头，它将给其他用户一些信心。由于Web在1990年的架构中的一个令人沮丧的特点是URL会失效，用户数据库需要一个额外的字段来跟踪当机器人尝试访问记录的URL时发生了什么。如果一个URL在一个一周的时间内在几个不同的场合都无法访问，那么计算机程序可能可以安全地假设该URL已过时，并停止公开显示它。

用户数据库应该记录隐私和联系偏好。Jane用户是否愿意让您向公众显示她的电子邮件地址？对其他注册用户呢？Joe用户是否愿意让您用站点的新闻给他发垃圾邮件？

### 内容数据库

在在线学习社区的内容中总是包括讨论论坛中的问题和答案。程序员可能首先建立一个用于讨论论坛帖子的表。在在线社区的六个必需元素中，磁性内容排在第一位。大多数在线学习社区提供区分于用户贡献问题的已发布文章。因此，程序员将创建一个单独的表来保存文章。任何发布文章的精心设计的网站都提供用户对这些文章发表评论的功能。这将是另一个单独的表。

这里是否出现了一种模式？我们在讨论区表中区分问题，因为它是不是对任何其他讨论区帖子的回复。我们区分文章和评论，因为文章是不是对任何其他内容项的回复。也许文章、文章评论、问题、答案等的表示应尽可能统一。每个都是一个内容项。每个都有一个或多个作者。每个可以选择是对另一个内容项的回复。

以下是一些很好地集中在内容数据库中的单一内容存储库中的服务：

+   内容的版本控制

+   一个内容项是回复、评论还是附件的问题

+   一个内容项是否被站点管理员批准或不批准

+   内容应该展示给谁？仅限于某个群组的成员、特定用户，还是*le grand public*（法国人所说的）？

+   谁有权编辑内容？

+   谁有权更改谁有权查看或编辑？

+   谁有权评论一个项目？在发布之前，谁必须审核已发布的评论？

+   内容的时间安排：何时上线？何时过期？

+   内容的质量或重要性：是否应该向用户突出显示？是否应该等到从草稿状态毕业才公布？

+   对内容进行全文索引

+   内容的摘要、描述和关键词

+   一个一致的全站分类法

    #### 以及一些真正属于下面的用户/内容映射的事情

+   谁是内容的作者或贡献者，区分出由发布者撰写、群组撰写和用户撰写的内容

+   当有人在文章上发表评论或回复时应通过电子邮件通知谁

+   一个内容项是否被用户评为高兴趣或低/无兴趣；根据这些统计数据，这意味着有能力挑选出"可能对用户 #17 感兴趣的新内容"（取决于能计算文档相似性的文本处理软件）

### 用户/内容映射

一个在线学习社区通常需要能够记录以下声明：

+   用户 #21 在文章 #529 上做出了评论 #37

+   用户 #192 提出了问题 #512

+   用户 #451 发布了对问题 #924 的回答 #3

+   用户 #1392 已阅读文章 #456

+   用户 #8923 希望在文章 #223 发生变化时收到提醒

+   用户 #8923 希望在问题 #9213 的答案发布时收到提醒

我们小心记录作者信息，因为归属内容有助于我们建立真正的社区。为了向用户提供当有人回复问题或评论文章时发送电子邮件通知的服务，有必要记录作者信息。

为什么要记录特定用户是否阅读了或至少下载了特定文档？考虑一个大学的教授和学生在线学习社区。如果想要编写一个发送以下消息的机器人，则有必要记录读者行为：

> ````
> To: Sam Student
> From:  Community Nag Robot
> Date:  Friday, 4:30 pm
> Subject:  Your Lazy Bones
> 
> Sam,
> 
> I notice that you have four assignments due on Monday and that you
> have not even looked at two of them.  I hope that you aren't planning
> to go to a fraternity party tonight instead of studying.
> 
> Very truly yours,
> 
> Some SQL Code
> 
> ````

一旦在线学习社区记录读者的行为，自然会考虑记录阅读是否值得。一般来说，协同过滤是那些太胆怯编辑的人的最后避难所。然而，记录“用户＃7241真的很喜欢文章＃2451”为个性化开辟了有趣的可能性。

考虑一个企业知识管理系统。在开始时，数据库是空的，只有少数用户。扫描所有贡献内容的标题只需要几分钟。然而，五年后，数据库包含100,000个文档，而10,000名活跃用户每天贡献数百个新文档（请记住，讨论论坛中的问题或答案在本讨论中被视为“文档”）。如果Jane用户想要查看她的同事在过去24小时里做了什么，她可能需要30分钟来扫描新内容的标题。Jane用户很可能会放弃一个在规模较小时对她非常有用的在线学习社区。

现在假设数据库包含100个“Jane喜欢这篇文章”的条目和100个“Jane不喜欢这篇文章”的条目。在Jane上班之前，批处理作业可以将系统中的每篇新文章与Jane喜欢的100篇文章和Jane说她不喜欢的100篇文章进行比较。这种比较可以使用大多数标准全文搜索软件完成，该软件将根据使用的单词对两篇文档进行相似性评分。每篇新文档都会得到一个形式为

> ````
> avg(similarity(:new_doc, all_docs_marked_as_liked_by_user(:user_id)))
> -
> avg(similarity(:new_doc, all_docs_marked_as_disliked_by_user(:user_id)))
> 
> ````

然后，新文档按降序排名呈现给简。如果您是英特尔的股东，您将很高兴考虑这种个性化方案的计算影响。每个新文档必须与用户之前标记的每个文档进行比较。也许有200次比较。如果有10,000个用户，这个评分操作必须重复10,000次。因此，这是系统中每个新文档的2,000,000次比较。全文比较通常非常慢，因为它们依赖于查找文档中的每个单词，以找到它在标准书面英语中的出现频率。比较两个文档可能需要1/10秒的CPU时间。因此，每个新文档添加到系统中，我们大约需要200,000秒的CPU时间，再加上在数据库中插入10,000行，每行包含该文档对特定用户的个性化评分。一天有86,400秒。因此，我们大致需要足够的工作来让一个3-CPU多处理器机器整天忙碌。如果每天上传500个文档怎么办？我们将需要1500个CPU来计算个性化评分。

### 用户/用户映射

随着社区的增长，用户之间的关系变得越来越重要。在一个与其他100人讨论论坛的人可能希望说：“我对用户＃45的观点感到冒犯；我希望系统在向我提供的页面或发送给我的电子邮件提醒中抑制他的贡献。”这个技术术语称为*bozo过滤*，至少可以追溯到20世纪80年代初的USENET（Netnews）分布式讨论论坛系统。在一个与其他100,000人讨论论坛的人可能希望说：“我感到不知所措；我永远不想再看到这个论坛的任何内容*除非*用户＃67329在一个主题中有贡献。”

用户分组是用户/用户数据库中最基本的操作。在协作医疗记录系统中，您需要能够说：“所有这些用户在同一家医院工作，可以访问该医院的患者记录。”在企业知识共享系统中，您需要能够说：“所有这些用户在同一部门工作，因此应该可以访问私人部门文件、专门讨论部门问题的私人讨论论坛，并应该收到部门活动的电子邮件通知。”

让我们从核心数据模型转移到您即将在数据库之上构建的软件的一些建议...

### 发送SQL，而不是数据，到数据库的SQL解析器

在基础知识章节中，您可能已经编写了脚本，接受用户输入，将其与SQL片段组合，并将最终的单个字符串命令发送到关系数据库管理系统（RDBMS）。

这是一个从我们的一位学生那里偷来的C#示例：

> ````
> string cmd = "Insert into quotations(author_name, category, quote) 
>               values ('" + txtAuthor.Text.Replace("'", "''") + "', 
>                       '" + ctg.Replace("'", "''") + "', 
>                       '" + txtQuotation.Text.Replace("'", "''") + "')";
> 
> UpdateDB(cmd);  // ship that big string to SQL Server
> 
> ````

这种混合SQL和从用户获取的字符串文字的方法存在几个小问题：

+   程序员必须记住转义上传字符串中的任何单引号字符，将'替换为'' [这是两个单引号，不是一个双引号]

+   如果用户在浏览器中写得很详细，那么该语句可能会变得过长，以至于一些 RDBMS SQL 解析器无法处理和/或字符串文字可能会超过限制（Oracle 9.x 对字符串文字的限制为 4000 个字符）。

+   重复调用此脚本将导致 RDBMS 被提供的版本是形态上相同但实际文本不同的此 SQL 语句；取决于 RDBMS 的实现方式，这可能会阻止查询计划被重用。

然而，更为严重的是，恶意用户可能会精心制作一个表单提交，导致数据被销毁或违反隐私。例如，考虑以下代码：

> ````
> string EventQuery = "select * 
>                      from events 
>                      where event_id = " + EventIDfromBrowser;
> 
> ````

预期一个数字事件 ID，并知道数字不需要像字符串文字那样用引号括起来，程序员没有对从公开互联网读取的变量`EventIDfromBrowser`进行任何处理。

假设一个心怀不轨的人提交了一个表单，其中`EventIDfromBrowser`设置为`"42; select * from user_passwords"`。该字符串开头的分号可能会终止第一个 SELECT，并且未经授权的"select * from user_passwords"查询可能会被执行。如果未经授权的查询经过精心设计，则其结果可能会显示在浏览器窗口中。另一个可怕的构造是`"42; delete from customers"`。

你可以通过分离 SQL 代码和变量数据来解决所有这些问题。以下是使用自 1970 年代末以来的标准库执行的伪代码示例：

> ````
> // associate the name "event_query" with a string of SQL
> PrepareStatement("event_query","select * from events where event_id = :event_id");
> 
> // associate the bind variable :event_id with the particular value for this page
> BindVar("event_query",":event_id",3722);
> 
> // ask the RDBMS to execute the completed query
> ExecuteStatement("event_query");
> 
> ... fetch results ...
> 
> ````

注意，RDBMS 所看到的 SQL 结构是固定的`"select * from events where event_id = :event_id"`，无论在表单中收到的是什么输入。只有`:event_id`的值会改变。

这是使用*绑定变量*的一个示例，在大多数与 RDBMS 通信的软件中都是标准做法。

### C# 中的绑定变量

> ````
> using System;
> using System.Configuration;
> using System.Data;
> using System.Data.SqlClient;
> 
> namespace ExecuteScalar
> {
>     /// /// An example of how to use named parameters in ADO.NET.
>     /// 
>     class Class1
>     {
>         /// /// The main entry point for the application.
>         /// 
>         [STAThread]
>         static void Main(string[] args)
>         {
>             object objResult = null;
>             string strResult = null;
>             string strEmployeeID = "PMA42628M";
> 
>             //Initialize the database connection, command and parameter objects.
>             SqlConnection conn = new SqlConnection(
>                 ConfigurationSettings.AppSettings["connStr"]
>                 );
>             SqlCommand cmd = new SqlCommand(
>                 "select fname from employee where emp_id = @emp_id"
>                 );
>             SqlParameter param = new SqlParameter("@emp_id",strEmployeeID);
> 
>             //Associate the connection with the command.
>             cmd.Connection = conn;
> 
>             //Bind the parameter value to the command.
>             cmd.Parameters.Add(param);
> 
>             //Connect to the database and run the command.
>             try
>             {
>                 conn.Open();
>                 objResult = cmd.ExecuteScalar();
>             } 
>             catch (Exception e)
>             {
>                 Console.WriteLine("Database error: {0}", e.ToString());
>             }
>             finally
>             {
>                 //Clean up.
>                 if (!conn.State.Equals(ConnectionState.Closed))
>                 {
>                     conn.Close();
>                 }
>             }
>                 
> 
>             //Convert the query result to a string.
>             if (objResult == null)
>             {
>                 strResult = "[NULL]";
>             } 
>             else
>             {
>                 strResult = objResult.ToString();
>             }
> 
>             Console.WriteLine("Employee #{0}'s first name is: '{1}'", strEmployeeID, strResult);
>             Console.ReadLine();
>         }
>     }
> }
> 
> ````

微软似乎更喜欢使用`@emp_id`而不是 Oracle 的`:emp_id`，即，他们使用 @ 符号而不是冒号来指示某个东西是绑定变量，除此之外没有什么特别需要注意的地方。

### Java 中的绑定变量

这是一个显示 Java 中绑定变量使用的代码片段：

> ````
> PreparedStatement updateSales = con.prepareStatement(
> 	"UPDATE COFFEES SET SALES = ? WHERE COF_NAME LIKE ? ");
> updateSales.setInt(1, 75); 
> updateSales.setString(2, "Colombian"); 
> updateSales.executeUpdate():
> 
> ````

来源：Java 教程 [http://java.sun.com/docs/books/tutorial/jdbc/basics/prepared.html](http://java.sun.com/docs/books/tutorial/jdbc/basics/prepared.html)。

请注意，Java数据库连接库JDBC使用"?"作为绑定变量。程序员需要计算SQL字符串中"?"的第N次出现，并将一个值绑定到该位置。可以想象，如果SQL语句包含十五个或更多变量，这个过程就会变得容易出错，在实际应用中这是非常常见的情况。如果SQL查询被更改而绑定变量序列号没有正确更新，那么可能会引入微妙的错误。

据说在JDBC 3.0中这种情况已经得到改善，但是这个例子表明了Java相对于二十年前的C接口的劣势，应该让你对厂商对新语言和开发工具优势的宣称持怀疑态度。

### 可配置的查看源代码链接

在"基础"章节中，你为每个构建的页面添加了一个硬编码的"查看源代码"链接。在课程的其余部分中，继续使你的源代码对同事可用是很重要的。另一方面，当应用程序向公众发布时，你可能不希望每个人都看到你的内部细节。你可能希望在服务器的某个地方有一个单一的开关，可以打开或关闭站点上的所有"查看源代码"链接。这意味着所有的脚本都必须调用一个单一的过程来决定是否提供"查看源代码"链接。从长远来看，这个过程可能会根据IP地址或已登录用户ID来决定是否提供查看源代码链接。

### 将数据库用户名和密码从页面脚本中移出

假设你在一个页面脚本中有以下代码：

> ````
> dbconn = OpenDBConn("sysid=local,username=joestest,password=joerocks");
> 
> ````

连接到关系型数据库的这种方法存在几个问题：

1.  一个恶意读取这段源代码的人可能能够连接到运行在你服务器上的关系型数据库并删除所有的表。

1.  运行这段代码针对一个测试数据库，这个数据库必然会有一个不同的数据库用户名，将需要编辑每个页面脚本。

1.  在另一个项目上重用这段代码将需要更改数据库用户名和密码。

每个良好的Web开发环境都有一种方式从页面脚本到数据库中池化连接，这样Web服务器就不需要每天数百万次重新连接和重新认证到数据库。通常的想法是Web服务器将打开几个连接到关系型数据库并保持打开状态。当页面脚本需要执行查询时，它会从池中获取一个连接并使用它直到页面服务完成。然后将连接返回到池中。这个方案被称为*连接池*。

通常将数据库用户名和密码从页面脚本中移出的一个好方法是使用Web服务器的数据库连接池系统。

### 时间和动作

团队应该至少花一个小时一起画一张纸上草图，标识和定位系统将处理的基本信息。详细的数据建模并不是必要的，因为将在接下来的两章中介绍。

找出绑定变量、隐藏数据库密码和泛化视图源代码的工作可能会分配给团队成员。这应该可以在六到八个程序员小时内完成。

## 用户注册和管理

* * *

正如在“软件结构”章节中所指出的，被识别、认证和负责的人越多，就越有机会将一个群体建成一个社区。因此，用户数据库应尽可能记录可能有助于 A 评估 B 的可信度的信息。

正如你将在关于扩展的章节中看到的，促进用户子群体之间偶尔面对面会议可能变得重要。因此，记录他们的居住国家和邮政编码（美国人称之为“区域改进计划代码”或“邮政编码”）将是有帮助的。

### 胖与瘦：理念

假设系统规格从用户数据库的非常简单需求开始，可以通过以下单表处理：

> ````
> create table users (
> 	user_id			integer primary key,
> 	first_names		varchar(50),
> 	last_name		varchar(50) not null,
> 	email			varchar(100) not null unique,
> 	-- we encrypt passwords using operating system crypt function
> 	password		varchar(30) not null,
> 	registration_date	timestamp(0)
> );
> 
> ````

注意密码加密的注释是放在列名上方而不是下方，并且主键约束对其他程序员是清晰可见的。养成在文本编辑器中编写数据模型文件并包含注释和你期望支持的查询示例的习惯是很好的。如果你使用带有图形用户界面的桌面应用程序来创建表格，你将丢失很多重要的设计信息。记住，数据模型是你的应用程序中最关键的部分。你需要考虑如何向其他程序员传达你的设计决策。

几周后，在线上有人说，“能不能看到用户的照片并通过超链接跳转到他或她的个人主页呢？”

> ````
> create table users (
> 	user_id			integer primary key,
> 	first_names		varchar(50),
> 	last_name		varchar(50) not null,
> 	email			varchar(100) not null unique,
> 	password		varchar(30) not null,
> 	-- user's personal homepage elsewhere on the Internet
> 	url			varchar(200),
> 	registration_date	timestamp(0),
> 	-- an optional photo; if Oracle Intermedia Image is installed
> 	-- use the image datatype instead of BLOB
> 	portrait		blob
> );
> 
> ````

几个月后...

> ````
> create table users (
> 	user_id			integer primary key,
> 	first_names		varchar(50),
> 	last_name		varchar(50) not null,
> 	email			varchar(100) not null unique,
> 	password		varchar(30) not null,
> 	-- user's personal homepage elsewhere on the Internet
> 	url			varchar(200),
> 	registration_date	timestamp(0)
> 	-- an optional photo; if Oracle Intermedia Image is installed
> 	-- use the image datatype instead of BLOB
> 	portrait		blob,
> 	-- with a 4 GB maximum, we're all set for Life of Johnson
> 	biography		clob,
> 	birthdate		date,
> 	-- current politically correct column name would be "gender"
> 	-- but data models often outlive linguistic fashion so
> 	-- we stick with more established usage
> 	sex			char(1) check (sex in ('m','f')),
> 	country_code		char(2) references country_codes(iso),
> 	postal_code		varchar(80),
> 	home_phone		varchar(100),
> 	work_phone		varchar(100),
> 	mobile_phone		varchar(100),
> 	pager			varchar(100),
> 	fax			varchar(100),
> 	aim_screen_name		varchar(50),
> 	icq_number		varchar(50)
> );
> 
> ````

表格变得越来越庞大。随着表格变得越来越庞大，对于任何给定的用户，越来越多的列可能是空值。在 Oracle 9i 中，你不太可能遇到每个表格最多只能有 1000 列的硬性数据库限制。存储效率也不是问题。几乎每个数据库管理系统都能用一个位记录一个空值，即使该列被定义为`char(500)`或其他类型。然而，不断添加更多列以处理用户可能拥有更多电话号码的可能性似乎有些不太干净。

医疗信息学家多年来一直在处理这个问题。上面的例子被称为“fat数据模型”。在医院世界中，你很可能会发现类似于这样用于存储患者人口统计和保险覆盖数据的东西。但对于实验室测试来说，采用“fat”方法就开始变得丑陋了。一个医院可能对患者进行成千上万次可能的测试。每天都会对住院患者进行新的测试。一些医院已经尝试过用于实验室测试的“skinny”数据模型。表格看起来像下面这样：

> ````
> create table labs (
> 	lab_id		integer primary key,
> 	patient_id	integer not null references patients,
> 	test_date	timestamp(0),
> 	test_name	varchar(100) not null,
> 	test_units	varchar(100) not null,
> 	test_value	number not null,
> 	note		varchar(4000)
> );
> 
> -- make it fast to query for "all labs for patient #4527"
> -- or "all labs for patient #4527, ordered by recency"
> create index labs_by_patient_and_date on labs(patient_id, test_date);
> 
> -- make it fast to query for "complete history for patient #4527 insulin levels"
> create index labs_by_patient_and_test on labs(patient_id, test_name);
> 
> ````

注意，这个表没有太多的完整性约束。如果您将`patient_id`指定为唯一的，那么每个医院患者只能进行一次测试。也不能指定`patient_id`和`test_date`的组合为唯一，因为有些高级机器可以同时对单一血样进行多次测试，例如。

我们可以将这个想法应用到用户注册上：

> ````
> create table users (
> 	user_id			integer primary key,
> 	first_names		varchar(50),
> 	last_name		varchar(50) not null,
> 	email			varchar(100) not null unique,
> 	password		varchar(30) not null,
> 	registration_date	timestamp(0)
> );
> 
> create table users_extra_info (
> 	user_info_id		integer primary key,
> 	user_id			not null references users,
> 	field_name		varchar(100) not null,
> 	field_type		varchar(100) not null,
> 	-- one of the three columns below will be non-NULL
> 	varchar_value	varchar(4000),
> 	blob_value	blob,
> 	date_value	timestamp(0),
> 	check ( not (varchar_value is null and 
>                      blob_value is null and
> 		     date_value is null))
> 	-- in a real system, you'd probably have additional columns
> 	-- to store when each row was inserted and by whom
> 
> );
> 
> -- make it fast to get all extra fields for a particular user
> create index users_extra_info_by_user on users_extra_info(user_id);
> 
> ````

以下是一个填充此类数据模型的示例：

> `users`表
> 
> | 用户ID | 名 | 姓 | 电子邮件 | 密码 |
> | --- | --- | --- | --- | --- |
> | 1 | Wile E. | Coyote | supergenius@yahoo.com | IFUx42bQzgMjE |
> 
> `users_extra_info`表
> 
> | 用户信息ID | 用户ID | 字段名 | 字段类型 | varchar值 | blob值 | 日期值 |
> | --- | --- | --- | --- | --- | --- | --- |
> | 1 | 1 | 出生日期 | 日期 | -- | -- | 1949-09-17 |
> | 2 | 1 | 传记 | blob文本 | -- | 由Chuck Jones创建... | -- |
> | 3 | 1 | aim_screen_name | 字符串 | iq207 | -- | -- |
> | 4 | 1 | 年收入 | 数字 | 35000 | -- | -- |

**图5.1：** 拆分在skinny表和第二个表之间的示例用户记录。

| 如果您正在使用高级商业关系数据库管理系统并希望使这样的查询非常快，请查看位图索引，通常在“数据仓库”下有文档记录。这些索引适用于低基数的列，即与表中的行数相比没有太多不同的值。您将在`field_name`列上构建一个位图索引。 |
| --- |

注意，数字存储在VARCHAR类型的列中。这会排除诸如“查找注册用户的平均收入”之类的查询吗？如果您使用Oracle就不会。Oracle在字符串和数字之间自动转换方面很聪明。这将正常运作

> ````
> select average(varchar_value) 
> from users_extra_info
> where field_name = 'annual_income'
> 
> ````

这种数据模型的一个复杂之处在于，如果您还将`users_extra_info`用于多对一关系，则很难使用简单的内置完整性约束来强制执行唯一性。

例如，在info表中有两行，都是相同的用户ID，且字段名均为“birthdate”。一个用户只能有一个生日是没有意义的。也许我们应该

> ````
> create unique index users_extra_info_user_id_field_idx on users_extra_info (user_id, field_name);
> 
> ````

（注意，这将使得对特定用户的特定字段的提取非常快，并且执行唯一约束。）

那么"home_phone"呢？没有什么能阻止用户获取两个家庭电话号码并将它们都列出来。如果我们尝试在`field_name`列中插入两行，其中"home_phone"值为451，`user_id`列中为451，由于违反了上面定义的唯一约束，关系数据库管理系统将中止事务。

如何处理这个明显的问题？一种方法是决定`users_extra_info`表仅用于单值属性。另一种方法是放弃使用RDBMS来强制执行完整性约束的想法，并将逻辑放入应用程序代码中，以确保用户只能有一个出生日期。一个复杂但完整的方法是定义RDBMS触发器，在RDBMS内部运行一个简短的过程化程序—在Oracle中，这将是PL/SQL或Java编程语言中的程序。这个程序可以检查确实必须是唯一的字段的唯一性是否得到保留。

### 胖式与瘦式：决策

在胖式和瘦式之间做出工程判断是一个决策。您可以使用任何方法构建一个可工作的系统，但这给您多少指导？您知道您可以使用任何图灵完备的计算机语言构建计算机程序，但这并不使汇编语言像Basic、C#、Eiffel、Java、Lisp或ML一样实用。

支持胖式的一个论点是可维护性和自我文档化。在数据库世界中，胖是惯例。接管您工作的SQL程序员会期望胖。他或她将坐下来通过查询*RDBMS的数据字典*，即表定义的RDBMS内部表示，来了解您的系统。在Oracle中是这样的：

> ````
> select table_name from user_tables;
> 
> describe users
>  *** SQL*Plus lists the column names ***
> describe other_table_name
>  *** SQL*Plus lists the column names ***
> describe other_table_name_2
>  *** SQL*Plus lists the column names ***
> ...
> 
> ````

假设您将所有应用数据存储在单个表中：

> ````
> create table my_data (
> 	key_id			integer,
> 	field_name		varchar,
> 	field_type		varchar,
> 	field_value		varchar
> );
> 
> ````

这在某种意义上是一个足够的数据模型，就像图灵机的原始指令是一种足够的编程语言一样。查询数据字典对于理解应用程序的目的毫无帮助。人们必须抽样`my_data`行的内容，看看存储了什么。相比之下，假设您在一个陌生的数据库中瞎探索，并遇到了这个表定义：

> ````
> create table address_book (
> 	address_book_id	integer primary key,
> 	user_id		not null references users,
> 	first_names	varchar(30),
> 	last_name	varchar(30),
> 	email		varchar(100),
> 	email2		varchar(100),
> 	line1		varchar(100),
> 	line2		varchar(100),
> 	city		varchar(100),
> 	state_province	varchar(20),
> 	postal_code	varchar(20),
> 	country_code	char(2) references country_codes(iso),
> 	phone_home	varchar(30),
> 	phone_work	varchar(30),
> 	phone_cell	varchar(30),
> 	phone_other	varchar(30),
> 	birthdate	date,
> 	days_in_advance_to_remind	integer,
> 	date_last_reminded		date,
> 	notes				varchar(4000)
> );
> 
> ````

| 注意使用ISO国家代码，受限于有效代码表的参考，以表示上表中的国家。您不希望记录中出现"United States"、"US"、"us"、"USA"、"Umited Stares"等。这些由ISO 3166维护机构维护，您可以从中以文本格式下载最新数据。请参阅[http://www.iso.ch/iso/en/prods-services/iso3166ma/index.html](http://www.iso.ch/iso/en/prods-services/iso3166ma/index.html)。 |
| --- |

作者的源代码注释已被剥离，但很明显这个表存在是为了支持在线地址簿。此外，每列的目的可以从其名称推断出来。每个地址簿条目的许多列将为NULL，但不会太多以至于表会变得非常稀疏。因为NULL列在数据库中占用的空间很小，所以不应该根据预期的数据存储效率来决定是选择瘦模型还是胖模型。

当您在每个用户上存储完全不同的数据时，如果您期望在胖数据模型中有超过75％的列为NULL，则瘦模型是好的。瘦模型可能会导致看起来奇怪的SQL查询和数据字典不透明。

### 用户组

在在线社区中最强大的构造之一是用户组。一组用户可能希望合作发布一些内容。一组用户可能希望有一个私人讨论论坛。一组用户可能是唯一被授权执行某些操作或查看某些文件的人。最重要的是，您希望能够从数据库中的其他对象引用用户组。

在构建用户组时，您可能想考虑即时生成的用户组。您肯定希望有一个用户组，其中每个成员都由表中的一行表示：“用户#37是用户组#421的一部分”。通过这种数据模型，人们可以明确地加入和退出用户组。然而，从查询属性中即时生成组也很有用。例如，能够说“这个讨论论坛仅限于居住在法国的用户”可能是很好的，而不必在每次有人注册法国地址时安装数据库触发器来插入用户组映射表中的行。与其对数据进行非规范化处理，每次需要组成员时查询“居住在法国的用户”会更加清晰。

典型的数据模型将包括一个USERS表和一个USER_GROUPS表。这导致了一些丑陋之处，即系统中的许多其他表必须包含两列，一个用于user_id，一个用于user_group_id。如果user_id列不为NULL，则该行属于用户。如果user_group_id不为NULL，则该行引用用户组。完整性约束确保只有一个列将为非NULL。

### 表示组成员资格（第一范式）

假设您有一个USERS表和一个USER_GROUPS表。如何表示用户234是17和18组的成员？最简单的方法似乎是使用存储在USERS表中的列中的数据结构：

> ````
> create table users (
> 	user_id			integer primary key,
>         ...
> 	-- a space-separated list of group IDs
> 	group_memberships	varchar(4000),
> 	...
> );
> 
> ````

在这种情况下，我们将字符串“17 18”存储在`group_memberships`列中。这被称为*重复组*或*多值列*，它有以下问题：

+   如果列中的值的数量增长超出预期，可能会没有足够的空间

+   表名、列名和键值的组合不再指定一个数据

+   基本的INSERT、UPDATE和SELECT操作不足以操作多值列

+   程序员的大脑必须同时适应表行中的无序数据和多值列内部的有序数据

+   设计的不透明性：如果您使用多值列，人们永远不会知道当他们查看设计的内部时会发生什么；您是使用多个表来表示多对一关系还是多值列？

要将数据模型转换为*第一范式*，其中没有多值列，您需要创建一个映射表：

> ````
> create table user_group_map (
> 	user_id		not null references users;
> 	user_group_id	not null references user_groups;
> 	unique(user_id, user_group_id)
> );
> 
> ````
> 
> 请注意，在Oracle中，唯一约束会导致索引的创建。这里将是一个以user_id列开头的连接索引。这个索引将使得快速回答问题“用户37属于哪些组？”成为可能，但对回答“哪些用户属于第22组？”的问题没有用处。

一个很好的一般规则是，表示多对一关系需要两个表：*事物A*和*事物B*，其中许多B可以与一个A关联。另一个一般规则是，表示多对多关系需要三个表：*事物A*、*事物B*和一个映射表，将任意数量的A与任意数量的B关联起来。

### 可推导数据

在三个表中存储用户和组似乎可能是低效且丑陋的。要回答“Norman Horowitz属于哪些组”这个问题，我们必须连接以下表：`users, user_groups, user_group_map`：

> ````
> select user_groups.group_name
> from users, user_groups, user_group_map
> where users.first_names = 'Norman' and users.last_name = 'Horowitz'
> and users.user_id = user_group_map.user_id
> and user_groups.user_group_id = user_group_map.user_group_id;
> 
> ````

要回答“Norman Horowitz是否属于坦桑尼亚慈鲷兴趣小组，因此有权访问他们的私人页面”这个问题，我们必须执行以下查询：

> ````
> select count(*) 
> from user_group_map
> where user_id = (select user_id 
>                  from users 
>                  where first_names = 'Norman' 
>                  and last_name = 'Horowitz')
> and user_group_id = (select user_group_id 
>                      from user_groups
>                      where group_name = 'Tanganyikans')
> 
> ````

| 请注意使用`_p`后缀来表示布尔列。Oracle不支持布尔数据类型，因此我们用一个限制为“t”和“f”的CHAR(1)来模拟它。后缀中的“p”代表“谓词”，是一个可以追溯到1960年左右的Lisp程序员的命名约定。 |
| --- |

如果这是一个受欢迎的群体，新的数据库程序员会有一种诱惑，即通过向用户表添加一个列来*去规范化*数据模型，例如，`tanganyikan_group_member_p`。当用户被添加到坦桑尼亚群体时，此列将设置为“t”，当用户取消订阅该组时将重置为“f”。这看起来像是进步。我们可以通过查询一个表来回答我们的问题，而不是三个表。然而，从历史上看，关系数据库管理系统程序员在存储*可推导数据*时遭受过严重打击，即在一个表中存储可以通过查询其他更基本的表推导出的信息。不可避免地，会有一个程序员不了解这种不寻常的数据模型，并编写应用程序代码，更新一个地方的信息但不更新另一个地方。

如果您真的需要简化查询怎么办？使用视图：

> ````
> create view tanganyikan_group_members 
> as
> select * from users
> where exists (select 1 
>               from user_group_map, user_groups
>               where user_group_map.user_id = users.user_id
>               and user_group_map.user_group_id = user_groups.user_group_id
>               and group_name = 'Tanganyikans');
> 
> ````

如果你知道每次查询用户表时几乎都需要这些信息怎么办？

> ````
> create view users_augmented
> as
> select 
>   users.*,
>   (select count(*) 
>    from user_group_map ugm, user_groups ug
>    where users.user_id = ugm.user_id
>    and ugm.user_group_id = ug.user_group_id
>    and ug.group_name = 'Tanganyikans') as tanganyikan_group_membership
> from users
> where exists (select 1 
>               from user_group_map, user_groups
>               where user_group_map.user_id = users.user_id
>               and user_group_map.user_group_id = user_groups.user_group_id
>               and group_name = 'Tanganyikans');
> 
> ````

这将导致一个虚拟表，其中包含所有用户的列以及一个名为`tanganyikan_group_membership`的额外列，对于属于该组的用户为1，对于不属于该组的用户为0。在Oracle中，如果你希望该列具有标准的ANSI布尔数据类型值，可以在select列表中的查询周围包装DECODE函数：

> ````
> decode(select count(*) ..., 1, 't', 0, 'f') as tanganyikan_group_membership_p
> 
> ````

请注意，我们在列名后添加了“_p”后缀，这是回溯到Lisp编程语言的做法，其中只能返回布尔值的函数通常以“p”结尾。

请记住，数据模型的复杂性总是可以通过视图来控制。但请注意，视图纯粹是句法上的。如果一个查询直接输入到关系数据库管理系统时运行缓慢，仅仅将其重命名为视图并不会使其运行更快。如果你有一个由10,000名成员组成的群体，每个成员每秒从网站上的群体私人区域请求一个页面，那么在每次页面加载时进行三路连接将成为关系数据库管理系统服务器的重大负担。你应该通过将授权查询的结果缓存到HTTP服务器进程的虚拟内存中，将查询速度提高1000倍，而不是通过去规范化来加快查询速度，从而使查询速度可能比索引表的连接快5倍。

使用视图清理混乱的查询。使用索引解决性能问题。如果你面临着Yahoo!或亚马逊级别的使用量，可以考虑通过应用级缓存完全卸载关系数据库管理系统。

### 访问控制和批准

假设你正在建立一个企业知识共享网站。也许你决定将服务器放在公共互联网上，以便员工在家或出差时能够方便地访问。也许其他组织内的一些紧密合作伙伴将被允许访问。然而，你不希望随机的人注册网站并立即获得访问权限。每个新用户可能都需要由管理员批准。

或者你正在建立一个公共在线学习社区。你希望至少能够识别用户并让他们对其互联网服务提供商负责。因此，你希望仅限于那些已经验证了在注册时提供的地址收到电子邮件的注册用户。你可能还希望拒绝那些唯一的电子邮件地址是hotmail.com或类似匿名提供者的用户注册。

随着成员增长，一个社区可能需要改变其政策。

一种强大的管理用户访问权限的方法是将用户注册建模为一个有限状态机，如图5.1所示。

> ```
> 			Not a user
> 		     	     |	
> 		             V
> 	           Need Email Verification          Rejected (via any
> 	             Need Admin Approval             pre-authorization state)
>    			     |				
>    		   	     |  	                
> Need admin approval<--------- -------------="">Need email verification 
>    |						        |
>    |                 		 			|
>    --------------------->Authorized<--------------------- |="" banned------------=""><-------- ------=""><---------------deleted <="" pre="">
> 
> ```

**图5.2：** 用户注册的有限状态机方法。读者从“非用户”状态开始。填写注册表单后，他进入“需要电子邮件验证/需要管理员批准”状态。在回复服务器的电子邮件后，他被移至“需要管理员批准”状态。假设在该站点上我们有一个规则，即任何以“mit.edu”结尾的电子邮件的人都会自动获得批准。在这种情况下，读者将被移至“已授权”状态，除非他决定离开该服务（“已删除”）或被认为对管理员构成不合理负担（“已禁止”）。

与在每个页面加载时检查`users`表中的`admin_approved_p, email_verified_p, banned_p, deleted_p`列不同，这种方法允许应用代码仅检查单个`user_state`列。

作者们使用相同的有限状态机构建了许多在线社区，并针对每个社区与出版商决定是否可以自动进行任何这些状态转换。西门子Sharenet知识共享系统，尽管无法从公共互联网访问，但选择要求管理员批准每个新用户。相比之下，在photo.net上，用户会立即从“非用户”变为“已授权”。

### 练习1：数据模型

定义一个SQL数据模型来表示用户和用户组。在继续练习2之前，请与您的助教讨论这个数据模型。

问题：您是否将用户密码以加密或非加密形式存储在数据库中？加密的优缺点是什么？您的表中的哪些列将使您的系统能够处理查询“找到距离用户#37 50公里内的用户”？

确保您的数据模型和答案可以从主要文档目录中轻松访问并找到，可能在URL `/doc/`处。

### 多页面设计和流程

本书将个别页面设计的讨论推迟到“内容管理”章节，但我们现在需要考虑页面流程设计。为什么？单个页面的糟糕设计会冒犯用户；站点页面之间流程的糟糕设计会击败用户。

用户喜欢网络的一点是计算是如何*离散化*的。桌面应用程序通常是一个复杂的混乱体，其中项目的状态只能部分可见。尽管软件供应商已经在许多流行的桌面程序中添加了多级撤销命令，但这些程序的状态对用户来说仍然是不透明的。

多页面设计的第一个一般原则是**不要破坏浏览器的返回按钮**。用户应该能够在与网站的会话中的任何时候前进和后退。例如，考虑购物网站上页面的以下流程：

+   选择一本书

+   输入送货地址

+   输入信用卡号码

+   确认

+   感谢

在确认页面上注意到运输地址有错别字的用户应该能够通过返回按钮或附加在返回按钮上的“点击右键”菜单返回到运输地址输入表单，更正地址并从那里继续。请参阅本章后面的“选择GET和POST之间的区别”部分。

第二个一般原则是**让用户先选择对象，然后选择动作**。例如，考虑电子商务网站的客户服务区域。假设简·消费者已经向服务器确认了身份。商家可以向简展示她曾经购买过的所有商品的列表。简点击一个商品（**选择对象**）并获得一个包含选择项列表的页面，例如，“退货退款”或“换货”。简点击“换货”（**选择动作**）并获得一个页面，其中包含如何安排取回不需要的商品以及提供替换商品的页面的说明。

这个原则有多原创？它直接取自1984年左右的苹果Macintosh，并在[Macintosh人机界面指南](http://www.amazon.com/exec/obidos/ASIN/0201622165/pgreenspun-20)（Apple Computer, Inc.; Addison-Wesley, 1993; 在[http://developer.apple.com/documentation/mac/HIGuidelines/HIGuidelines-2.html](http://developer.apple.com/documentation/mac/HIGuidelines/HIGuidelines-2.html)上提供完整文本）中清晰阐述。例如，在Macintosh文字处理器中，您通过双击选择文档中的一个单词（对象）。然后从下拉菜单中选择要应用于此单词的动作，例如，“将其设置为斜体”（动作）。原创性在当代创意文化中受到重视，但对于中世纪作者并不是一个价值观，也不会帮助用户。Macintosh一开始就非常受欢迎，其用户界面被微软Windows的开发人员复制，将“先选择对象，然后选择动作”理念传播给数以千万计的人。网络发布者可以确保他们的绝大多数用户对“先选择对象，然后选择动作”的界面风格非常熟悉。坚持熟悉的用户界面可以减少用户在网站上的时间和混乱。

这些原则特别容易应用于用户管理页面，例如。管理员查看用户列表并点击其中一个以选择它。服务器生成一个新页面，列出可应用于该用户的可能操作。

### 练习2：页面流程

从用户注册和管理的页面流程开始草图。系统中每个URL应该有一个圆圈或方框，从URL A到URL B的每个可能转换应该有一个弧线。如果您有很多作为表单目标并执行数据库更新的URL，但重定向到系统中其他页面以显示，您可能希望用浅色或虚线轮廓区分这些URL。

理想情况下，这个图应该被扫描并在您的在线文档中提供。

图 5.2 是我们正在寻找的绘图示例。

![](napkin-drawings-from-panda/13.4.gif)

**图 5.3：** 独立生日提醒服务的页面流程文档。每年都会在日期当天、前一天或一周前发送电子邮件提醒。有关此应用程序的更多信息，请参阅 Philip 和 Alex 的 Web 发布指南第 15 章，网址为 [http://philip.greenspun.com/panda/](http://philip.greenspun.com/panda/)。绘图者为 [Mina Reimer](http://www.mina.net)。

### 选择 GET 和 POST 之间的区别

在 HTML 页面上跟随普通超链接会导致在 HTTP 协议下向服务器发出 GET 请求。在使用 HTML 表单编程页面时，您可以选择使用 `METHOD=GET` 和 `METHOD=POST`。过度依赖 POST 将导致网站破坏浏览器的返回按钮。尝试返回到一个由 POST 产生的页面通常会弹出一个“页面已过期”的错误消息，可能还会出现一个对话框，询问用户是否希望通过使用“刷新”按钮重新提交信息。

一些学生要求进一步指导如何在 GET 和 POST 之间进行选择，以下是 2003 年秋季课程教学人员之一 Ben Adida 的回应：

> ```
> Most of you may be wondering, why GET vs. POST in submitting forms? 
> Oftentimes, one will use POST just to keep pretty URLs (without 
> ?var=val&var=val). But that's the wrong way to think about it.
> 
> A GET implies that you are getting information. You can resubmit a GET 
> any number of times: you are just querying information, not performing 
> any actions on the back-end.
> 
> A POST implies that you are performing some action with side-effect:
> inserting a row, updating a row, launching a missile, etc... That's
> why when you try to reload a POST page, your browser warns you: are
> you sure you want to launch another missile?
> 
> In general, you should strive to respect the above principles. Here are 
> two key examples:
>   - searching users or content. That should be a GET.
>   - Inserting a user or updating a profile. That should be a POST.
> 
> Of course, HTML and HTTP have some restrictions that complicate things:
> 
>   a) GET forms are limited in length by how much your browser can send
>      in a URL field. This can be a problem for very complicated search
>      forms, though probably not an issue at this stage. If you do hit
>      that limit though, then it's okay to use a POST.
> 
>   b) POST forms can only be performed by having an HTML button, or by 
>      using JavaScript to submit a form. JavaScript is not ideal. Thus,
>      sometimes you want to have a link that is effectively an action
>      with side-effect (e.g. "ban user"), but you make it a GET.
> 
> You can use redirects (HTTP return code 302) to make your life easier. 
> The nice thing about correct 302's is that the URL that issues a 302 is 
> never kept in a browser's history, so it is never queried twice unless 
> the user does something really conscious (like click back and actively 
> resubmit the form). Specifically:
> 
>    1) when you POST data for an insert or update, have your script
>       process the POST, then redirect to a thank-you page. That way,
>       if the user clicks "reload", they are simply reloading the
>       thank-you page, which is just a GET and won't cause side-effects
>       or warnings. You can also redirect to something more meaningful,
>       perhaps the list of recently registered users once you've edited
>       one.
> 
>    2) when you use a GET link to actually perform an action with
>       side-effect, you can also have that target script perform its
>       action then immediately redirect to a script with no side
>       effects. This will prevent the accidental repetition of an
>       action.
> 
> Scripts that have side effects should not be reachable at URLs that
> may enter the cache and be randomly re-requested by the browser. The
> one exception is if the POST causes some kind of error: it's mostly
> okay for the script that processes the POST to display the error
> instead of redirecting to some kind of error-displaying page (which
> would be clunky to build anyways).
> 
> .NET folks: when you use ASP.NET and postback, you have no choice of
> method: it's always POST. Remember to follow the above rule for POST:
> you can have your handler method perform the side-effects but it
> should then redirect somewhere else instead of returning content.
> 
> I hope this helps in making your sites more usable. Let me know if
> you have any questions.
> 
> -Ben
> 
> PS: None of the above solves the "double-click" problem which is what
> happens if a user double-submits a form quickly (especially those
> users who don't know the difference between single and double
> clicking).  We'll talk about double-click protection later.
> 
> ```

### 练习 3

构建基本的用户注册和登录页面。使用 HTTP cookies 可以使本学期的工作更加轻松。

问题：嗅探数据包的人能学到您用户的密码吗？以您用户的凭据访问该站点？如果用户忘记了密码会发生什么？

### 练习 4

构建站点管理员页面，用于处理用户。站点管理员应能够（1）查看最近注册的用户，（2）查找特定用户，（3）排除某个用户，以及（4）查看用户注册的当前和历史统计信息。

问题：管理员如何控制谁有权限注册并使用该网站？站点管理员在用户注册方面有哪些与电子邮件通知相关的选项？

### 练习 5

再次查看您的表格，检查引用完整性约束和查询性能。通过电子邮件地址查找用户需要多长时间？如果此电子邮件地址与您在数据库中存储的不同，会怎样？是否可能有两个使用相同电子邮件地址的用户？（请注意，按照互联网标准，小写电子邮件地址或主机名与大写电子邮件地址或主机名相同。）

许多 Web 应用程序包含只有特定用户组成员才能查看的内容。根据您的数据模型，关系数据库管理系统需要检查多少表行才能回答“用户 #541 是否是组 #90 的成员”这个问题？如果答案是“在一个大表中的每一行”，即*顺序扫描*，您可以添加什么样的索引来加快查询速度？

### 更多

+   《Web 网络极客的 SQL，数据建模章节》，网址为 [http://philip.greenspun.com/sql/data-modeling](/sql/data-modeling)

+   关于索引的讨论，请参阅《Web爱好者的SQL》调整章节，网址为[http://philip.greenspun.com/sql/tuning](/sql/tuning)。

+   标准形式：Steve Roman的《Access数据库设计与编程》（O'Reilly 1999）第4章，网址为[http://www.oreilly.com/catalog/accessdata2/chapter/ch04.html](http://www.oreilly.com/catalog/accessdata2/chapter/ch04.html)，以及《Transact-SQL编程》第1章，网址为[http://www.oreilly.com/catalog/wintrnssql/chapter/ch01.html](http://www.oreilly.com/catalog/wintrnssql/chapter/ch01.html)

+   [Eve Andersson的《逆向工程数据模型》](http://eveandersson.com/writing/data-model-reverse-engineering)对理解如何使用Oracle数据字典非常有用。

### 时间与动作

数据建模、页面流程草图以及关于查询性能的问题可能会由团队一起完成，大约需要三个小时。实现页面脚本可以分配给团队成员，但无论如何都应该在十小时的程序员工时内完成。

## 内容管理

* * *

[![Mostri公园（怪物公园），位于意大利Bomarzo镇下方（罗马以北1.5小时）。这是16世纪的奥尔西尼别墅的公园，充满了怪诞的雕塑。](../Images/c1cd05258464a5d46763bfda1507e7dd.jpg)](/images/pcd0787/parco-dei-mostri-11.4.jpg) 内容管理有两个基本元素：（1）将东西存储在*内容存储库*中，以及（2）支持一组人员进行放入存储库的工作流程。本章将首先处理存储问题，然后处理工作流程支持问题。我们还将查看内容和软件的版本控制，个别页面的外观设计，以及导航设计和信息架构。

在线学习社区内容管理的一部分艺术是减少内容类型的数量。例如，考虑一个出版商说“我想要文章[magnet content]，用户对文章的评论，出版商的新闻，用户对新闻的评论，用户的问题和问题的答案。”根据这些规格的一个天真的实现将导致创建六个数据库表：`articles, comments_on_articles, news, comments_on_news, questions, answers`。从关系数据库管理系统的角度来看，六个表并不令人难以接受。但请考虑，RDBMS中定义的每个新表大约意味着二十个Web脚本。其中十个脚本将构成用户体验：查看表A中的内容目录，查看一个类别，查看一个项目，查看最新项目，获取一个插入项目的表单，确认插入，请求关于项目评论的电子邮件提醒。另外十个脚本将构成管理员的体验：查看表A中的内容目录，查看一个类别，查看一个项目，查看最新项目，批准一个项目，不批准一个项目，删除一个项目，确认删除一个项目等。以一般方式编写这二十个脚本会有些困难，因为SQL语句至少在使用的表名上会有所不同。

考虑进一步，为了提供完整的站点内容索引，您将需要编写一个程序，将至少六个表中的文本提取到一个单独的索引中。

这六种内容实际上有多不同？我们将查看需要定义用于存储文章的表，然后继续处理其他类型的内容。

### 文章的简单数据模型

这是一个非常基本的用于存储文章的数据模型：

> ````
> create table articles (
> 	article_id		integer primary key,
> 	-- who contributed this and when
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	-- what language is this in?
> 	-- visit http://www.w3.org/International/O-charset-lang
> 	-- to see the allowable 2-character codes (en is English, ja is Japanese)
> 	language		char(2) references language_codes,
> 	-- could be text/html or text/plain or some sort of XML document
> 	mime_type		varchar(100) not null,
> 	-- will hold the title in most cases
> 	one_line_summary	varchar(200) not null,
> 	-- the entire article; 4 GB limit
> 	body			clob
> );
> 
> ````

数据库中的所有文章都应该向所有用户显示吗？也许将文章存储并进行编辑审查会很好：

> ````
> create table articles (
> 	article_id		integer primary key,
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	language		char(2) references language_codes,
> 	mime_type		varchar(100) not null,
> 	one_line_summary	varchar(200) not null,
> 	body			clob,
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired'))
> );
> 
> ````

您是否信任组织中的所有程序员都会记得在站点上的每个脚本中包含`where editorial_status = 'approved'`子句？如果不是，也许更好的做法是彻底重命名表，并构建一个供应用程序员使用的视图：

> ````
> create table articles_raw (
> 	article_id		integer primary key,
> 	...
> 	editorial_status	varchar(30)
>           check (editorial_status in ('submitted','rejected','approved','expired'))
> );
> 
> create view articles_approved 
> as
> select * 
> from articles_raw
> where editorial_status = 'approved';
> 
> ````

如果您改变了有关如何表示批准状态的想法，您不需要更新数十个Web脚本；您只需要更改`articles_approved`视图的定义。（有关使用SQL视图作为编程抽象手段的更多信息，请参阅[http://philip.greenspun.com/sql/views](http://philip.greenspun.com/sql/views)上的SQL for Web Nerds的视图章节。）

### 文章评论

回想一下在线社区的六个必要元素：

1.  专家撰写的磁性内容

1.  **协作方式**

1.  强大的浏览和搜索功能，既包括磁性内容又包括贡献内容

1.  模oderation的委托方式

1.  辨识对社区施加不当负担的成员以及改变他们行为和/或将其排除在社区之外的方式，而他们并不知情

1.  软件扩展的方式是由社区成员自己完成的

允许用户发布对已发布文章的替代观点的设施是一种协作方式，它将单向发布站点与在线社区区分开来。更有趣的是，这种设施将互联网应用程序从自古登伯特（1452年）以来西方文化一直运作的有文化素养的文化的限制中解放出来。有文化素养的文化会产生像米其林绿色指南意大利这样的作品：“城下是16世纪维拉奥尔西尼（怪物公园），这是一个具有一系列奇形怪状雕塑的文艺复兴创作。”将该描述与这些照片进行比较，这些照片仅展示了怪物公园的一小部分：

[![怪物公园。意大利博马尔佐。](../Images/4df991e71b1ffaecfd3cac79b73e2d03.jpg)](/images/pcd2182/sitting-parco-5.tcl) [![怪物公园。意大利博马尔佐。](../Images/23ae091e0393e253ca119d6fbf043531.jpg)](/images/pcd2182/leaning-parco-7.tcl)

如果你的一个朋友从这个地方回来并展示这些幻灯片，你会期待听到比米其林指南更丰富更有趣的内容。有文化素养的文化假定知识是封闭的，意大利旅游可以收录在一本书中。也许绿色指南的350页还不够，但一些数量的作家和页面足以概括关于意大利的一切值得知道的事情。

| 评论通常是网站上最有趣的内容。以下是来自[http://philip.greenspun.com/humor/bill-gates](http://philip.greenspun.com/humor/bill-gates)的一个评论：

“我必须说，所有不认识比尔·盖茨绝对天才的人都是愚蠢的。你们说比尔·盖茨偷了这个操作系统。嗯..我觉得这很有趣。如果他是从史蒂夫·乔布斯那里偷的，为什么乔布斯先生没有不断起诉他之类的。因为乔布斯先生没有任何依据支持这一点。Macintosh根本不像Windows 3.1或Win 95/NT/98。现在来说mac的不好。Mac只适合做一件事。图形。仅此而已。Mac在其他方面都很糟糕。你看看美国所有的小学..你看不到PC。你会看到mac。为什么？因为只有大脑不发达的人才用mac。”

-- Allen (chuggie@geocities.com), 1998年8月10日 |

口头文化不持有这种信念。知识是开放的。人们可能持有不同的观点而不会有人是错的。不一定有一个真相；可能有许多真相。尽管莎士比亚并不是在口头文化中长大，但他知道这一点。观看*特洛伊勒斯与克瑞西达*及其对一个女人的爱的本质的五个观点，试图弄清楚莎士比亚认为哪个观点是正确的。

女权主义者、沙文主义者、战争贩子、和平主义者、仇犹者、包容主义者、谨慎的人、粗心的人、吝啬鬼、医生、医疗事故律师、无神论者和虔诚者都能够引用莎士比亚来支持他们的信仰。这是因为莎士比亚利用他戏剧中的多个角色展示了他文化的多重真相。

自莎士比亚以来的400年，我们变得更加有文化。通常只有一个主导真相。有时这是因为我们真正弄清楚了某些事情。很难争辩说牛顿力学的物理教科书应该是一个开放式讨论（尽管用户评论功能可能仍然非常有用，提供对混乱部分的澄清解释）。然而，即使在自然科学领域，也可以找到许多例子，其中文化的有文化性扭曲了话语。

分类植物学的学术期刊揭示了对于在蒙大拿州某一领域采集的第947号标本是属于X种还是Y种存在分歧。但期刊暗示了对于分类学的一致性，即如何为各种物种构建分类树的一致性。如果你在大学植物学系的鸡尾酒会上偷听，你会发现即使这种一致性也是虚幻的。对于构成正确分类学的内容存在广泛分歧。几乎没有人认为期刊中使用的分类法是正确的，但植物学家必须坚持使用，否则旧期刊文章将变得难以理解。基于口头文化或能够展示多种观点的计算机系统的分类植物学将看起来完全不同。

互联网和计算机，如果能够胜任和创造性地使用，使得收集和展示多重真相比起旧世界的印刷、电话和普通邮件更加容易和便宜。多重真相的网站比单一真相的网站更有趣，并且在教育用户方面，每单位投入的努力和资金都更加有效。

### 实施评论

对文章的评论将被表示在一个单独的表格中：

> ````
> create table comments_on_articles_raw (
> 	comment_id		integer primary key,
> 	-- on what article is this a comment?
> 	refers_to		not null references articles,
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	language		char(2) references language_codes,
> 	mime_type		varchar(100) not null,
> 	one_line_summary	varchar(200) not null,
> 	body			clob,
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired'))
> );
> 
> create view comments_on_articles_approved 
> as
> select * 
> from comments_on_articles_raw
> where editorial_status = 'approved';
> 
> ````

这个表格与`articles`表格唯一的区别在于一个列：`refers_to`。怎么样将这两者结合起来：

> ````
> create table content_raw (
> 	content_id		integer primary key,
> 	-- if not NULL, this row represents a comment
> 	refers_to		references content_raw,
> 	-- who contributed this and when
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	-- what language is this in?
> 	-- visit http://www.w3.org/International/O-charset-lang
> 	-- to see the allowable 2-character codes (en is English, ja is Japanese)
> 	language		char(2) references language_codes,
> 	-- could be text/html or text/plain or some sort of XML document
> 	mime_type		varchar(100) not null,
> 	one_line_summary	varchar(200) not null,
> 	-- the entire article; 4 GB limit
> 	body			clob,
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired'))
> );
> 
> -- if we want to be able to write some scripts without having to think
> -- about the fact that different content types are merged
> 
> create view articles_approved 
> as
> select * 
> from content_raw
> where refers_to is null
> and editorial_status = 'approved';
> 
> create view comments_on_articles_approved 
> as
> select * 
> from content_raw
> where refers_to is not null
> and editorial_status = 'approved';
> 
> -- let's build a single full-text index on both articles and comments
> -- using Oracle Intermedia Text (formerly known as "Context")
> 
> create index content_ctx on content_raw (body)
> indextype is ctxsys.context;
> 
> ````

### 新闻有何不同？

新闻有什么不同之处，我们需要有一个单独的表格吗？通常新闻有一个过期日期，之后就不再有趣，应该被推送到档案中。"推送到档案"并不一定意味着该项必须移动到另一个表格中。可能只需编写演示脚本，使未过期的新闻项目显示在第一页，过期项目可通过单击"档案"进行查看。

通常公司的新闻稿会标记为"于4月17日星期一发布"。如果出版商希望继续收到该公司的新闻稿，将尊重这些日期。这意味着新闻数据模型中需要一个`release_time`列。

除了这两列（`expiration_time` 和 `release_time`）之外，新闻故事似乎需要的列与文章相同：一个用于一行摘要的地方，一个用于故事正文的地方，一个用于指示作者的方法，一个用于指示编辑工作流中的批准的方法。

经过进一步思考，也许这些列对于所有站点内容都有用。从 Windows 2000 升级到 Windows XP 的文章可能应该在 2006 年过期。如果一堆作者和编辑正在进行一个重大站点更新，也许将新内容的发布同步到周二午夜会很好。让我们回到 `content_raw`：

> ````
> create table content_raw (
> 	content_id		integer primary key,
> 	refers_to		references content_raw,
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	release_time		date,	-- NULL means "immediate"
> 	expiration_time		date,	-- NULL means "never expires"
> 	language		char(2) references language_codes,
> 	mime_type		varchar(100) not null,
> 	one_line_summary	varchar(200) not null,
> 	body			clob,
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired'))
> );
> 
> ````

在所有内容行中我们如何找到新闻报道？什么区别了一个有预定发布时间和到期时间的新闻故事与一个有预定发布时间和到期时间的关于 Windows 2003 操作系统的文章？我们需要再加一列：

> ````
> create table content_raw (
> 	content_id		integer primary key,
> 	content_type		varchar(100) not null,
> 	refers_to		references content,
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	release_time		date,
> 	expiration_time		date,
> 	language		char(2) references language_codes,
> 	mime_type		varchar(100) not null,
> 	one_line_summary	varchar(200) not null,
> 	body			clob,
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired'))
> );
> 
> create view news_current_and_approved
> as
> select *
> from content_raw 
> where content_type = 'news'
> and (release_time is null or sysdate >= release_time)
> and (expiration_time is null or sysdate  <= expiration_time)
> and editorial_status = 'approved';
> 
> ````

请注意上面视图定义中对 NULL 的显式检查。你可能会认为更简单的东西如下：

> ````
> and sysdate between release_time and expiration_time
> 
> ````

会起作用。这里的问题是 SQL 的三值逻辑。对于 RDBMS 返回一行，所有 AND 子句必须返回 true。NULL 不是 true。任何包含 NULL 的表达式或计算结果都将被评估为 NULL。因此

> ````
> where sysdate >= release_time
> 
> ````

将排除所有 `release_time` 为 NULL 的行。

### 讨论有什么不同？

看起来我们已经用一个表处理了六个必需的内容类型中的四个。更重要的是，我们做到了不需要为典型项目列出一长串 NULL 列。对于一篇文章，`refers_to` 将为 NULL。对于非时间性内容，发布和到期时间将为 NULL。否则，大多数时候大多数列将被填充。

讨论论坛中的问题和答案怎么样？如果网站上只有一个论坛，我们可以简单地向 `content_raw` 表中添加 `content_type` 为 "forum_posting" 的行，并通过检查 `refers_to is null` 来查询问题。在有多个论坛的网站上，我们需要添加一个 `parent_id` 列来指示给定问题所属的主题。在一个有许多存档帖子的论坛中，我们还需要一些存储分类的方法，比如，“这是一个暗房问题”。请参阅 [http://www.photo.net/bboard/](http://www.photo.net/bboard/)，这是一个运行中的多论坛系统示例，其中较旧的帖子已被分类。本书的“讨论”章节更详细地讨论了这个主题。

### 为什么不使用文件系统？

让我们退后一步，问问自己为什么我们不在服务器上更多地使用分层文件系统。把文章存储为 .html 文件在目录中会有什么问题？这是 1990 年代大多数网站构建的方式，毫无疑问，这种方法的性能和可靠性是无法置疑的。

文件系统的一个好处是有很多工具供具有不同技能水平的用户添加、更新、删除和重命名文件。程序员可以使用文本编辑器。设计师可以使用 Web 设计工具并通过 FTP 上传结果。页面作者可以使用诸如 Microsoft Front Page 的 HTML 编辑器。

将许多人授权访问文件系统的一个坏处是混乱的潜力。设计师应该上传一个模板，但却错误地删除了一个脚本。现在用户无法登录到网站了。标准的 Windows 和 Unix 文件系统没有版本控制。无法回溯并询问"这个文件六个月前是什么样子？"文件系统本身不支持任何工作流程（见下文）。你可以授权某人修改文件或不授权。你不能说"用户 37 被授权更新这篇关于水族箱过滤器的文章，但成员们在编辑批准之前不应该看到更新。"

将文件系统作为内容管理系统的基石的最深层次的问题是文件位于数据库之外。你需要在数据库中存储大量对内容的引用，例如，"用户 960 是文章 231 的作者"，"评论 912 是文章 529 的评论"等。在关系数据库管理系统之外保持一组一致的引用非常困难。假设你的关系数据库管理系统表通过文件名引用文件系统文件。有人重命名了一个文件。数据库不知道。数据库的参照完整性约束机制无法被调用来防止这种情况。如果所有数据结构都在关系数据库管理系统内部，保持一组数据结构一致要容易得多。

静态 .html 文件也有一个问题，那就是它们是静态的。假设你想在每个页面上都有一个标准的页眉和页脚。你可以将这些内容剪切并粘贴到系统中的每个 .html 文件中。但是如果你想将站点范围的页脚中的"Copyright 2003"更改为"Copyright 2006"呢？你可能需要更新成千上万个文件。假设你希望页眉包含一个"登录"链接，如果请求没有用户授权 cookie，则显示该链接，如果请求来自注册用户，则显示"注销"链接。

出版商维护静态 .html 文件的一些问题可以通过定期编写和运行聪明的 Perl 脚本来解决。然而，用户体验的更深层次的问题仍然存在。首先且最重要的是，使用静态 .html 文件时，每个查看页面的人都认为他或她可能是唯一一个查看该页面的人。这会导致一种非常孤独的互联网体验，一般来说，对于出版商来说也不是一个非常有利可图的体验。

可持续的在线业务通常会提供一种以其内容为核心的在线社区互动，并提供一致个性化的用户体验。这些要求需要在每次页面加载时执行某种计算机程序。因此，最好将这一点推向逻辑结论，并以相同的方式构建应用程序中的每个 URL：文件系统中的脚本执行并从关系数据库中提取内容。

### 练习 1

为您网站上存储的内容开发数据模型。请注意，至少您的内容存储库需要能够处理讨论论坛，因为我们将在后面的章节中构建它。

您可能会发现，在使用 SQL 表定义使数据模型精确时，客户会提出问题。您意识到您之前与客户讨论的某些领域过于模糊。这是构建 SQL 数据模型的自然结果。拿起电话，给客户打电话以澄清问题。通过几种不同的具体场景发送电子邮件。让客户习惯及时回答问题。

在继续之前，向您的助教展示草稿数据模型，并与其他学生讨论。

### 工作流问题是如何产生的

如果

+   一个人既是出版商、作者又是程序员

+   网站仅包含少量页面

+   没有人在乎这些少量页面是否格式一致

+   没有人关心检索旧版本或弄清楚版本是如何变成现在这个样子的

对于希望通过提供内容管理“解决方案”赚取丰厚收入的公司和程序员来说，前述条件很少在资金更充裕的网站上出现。更典型的情况是：

+   劳动分配在出版商、信息设计师、平面设计师、作者和程序员之间

+   网站包含数千个页面

+   页面在各个部分内必须保持一致，各个部分必须具有统一的主题

+   版本控制至关重要

出版商决定哪些主要内容部分可用，何时发布内容部分以及分配给每个内容部分的相对重要性。

信息设计师决定每个页面上有哪些导航链接，如何呈现可用的内容部分以及需要哪些平面设计元素。

平面设计师为信息设计师的目标贡献绘图、标志和其他艺术作品。平面设计师还制作模拟模板（静态 HTML 文件），其中使用了这些艺术元素。

程序员构建反映出版商、信息设计师和平面设计师指令的生产模板和计算机程序。

编辑批准内容并决定何时发布特定页面。编辑在各个部分内分配页面之间的相对重要性。

与他们相对的财务补偿相一致，我们将作者的需求和贡献放在倒数第二位。作者将HTML片段、纯文本、照片、音乐和声音放入数据库中。这些作者创作的实体只能通过程序员开发的模板被用户查看。

以下是我们在麻省理工学院分配给学生的示例工作流：

你的“实践项目”将是一个支持波士顿指南的内容管理系统，类似于AOL城市指南[http://home.digitalcity.com/boston/](http://home.digitalcity.com/boston/)。你需要制作一个设计文档和一个原型实现。原型实现应该能够支持以下场景：

1.  以发布者身份登录并访问/admin/content-sections/

1.  在/movies建立一个名为“电影”的部分

1.  在/dining建立一个名为“餐饮”的部分

1.  在/news建立一个名为“新闻”的部分

1.  注销

1.  以信息设计师身份登录并访问/cm，并指定导航。在任何餐饮部分，读者应该能够进入电影部分。从电影部分，读者应该能够进入餐饮或新闻部分。

1.  注销

1.  以程序员身份登录并访问/cm

1.  为电影部分制作两个模板，一个名为movie_review，一个名为actor_profile；为餐饮部分制作一个名为restaurant_review的模板

1.  注销

1.  以作者身份登录并访问/cm

1.  在电影部分添加两篇电影评论和两个演员简介，以及在餐饮部分添加一篇你最喜欢的餐厅评论

1.  注销

1.  以编辑身份登录并访问/cm

1.  批准两篇电影评论，一个演员简介和餐厅评论

1.  注销

1.  在不登录的情况下（即，你现在只是一个普通的公共网络浏览者），访问/movies部分，并且理想情况下，你应该看到已批准的内容已经上线

1.  从电影评论中跟随超链接到餐饮部分，并注意到你可以找到你的餐厅评论

1.  以作者身份登录并访问/cm

1.  编辑餐厅评论以反映一个新颖且令人兴奋的甜点

1.  注销

1.  访问/dining部分并注意到旧版本（已批准）的餐厅评论仍然在展示

1.  以编辑身份登录并访问/cm，并批准编辑后的餐厅评论

1.  注销

1.  访问/dining部分，检查是否提供了新版本（带甜点）的餐厅评论

|

### 一个没有任何工作的工作流问题

前一节讨论了支持标准出版世界的问题。你认识所有的作者。他们知道自己应该写什么。在在线学习社区中，尤其是非商业性质的社区，工作流问题出现在任何工作或任务之前。例如，假设站在photo.net社区背后的出版商决定他们想要以下文章：

+   基本的黑白暗房摄影

+   基本的彩色暗房（彩色底片）

+   制作Ilfochrome印刷品

+   强化黑白印刷

+   白金印刷

在每个月访问photo.net的30万人中，肯定有人有能力撰写前述的每篇文章。我们希望有一个系统，其中

1.  Joe用户可以交易性地注册撰写“铂金印刷品”，从而标记文章为“待编辑批准的任务请求”，提供简要概述，并承诺在7月1日前完成草稿。

1.  Jane编辑可以批准概述和时间表，从而生成一封回到Joe的电子邮件提醒。

1.  Joe用户定期收到提醒他已注册要做的事情以及截止日期的电子邮件。

1.  当Joe于7月17日提交第一稿时，Jane编辑会收到警报（Joe不太可能是���界上第一个按时提交工作的作者）。

1.  Joe用户收到一封电子邮件提醒他审查Jane的修正版本并签署批准时。

1.  铂金印刷文章显示在Jane编辑的工作空间页面顶部，标为“作者签署”，她点击将其发布。

注意工作流程的复杂性和特殊性。《纽约时报》和《波士顿环球报》发布的产品看起来非常相似。它们由同一公司拥有。你认为支持一家报纸工作流程的软件能够支持另一家报纸的机会有多大？

### 练习 2

为在线学习社区中每个用户可见的内容项制定工作流程。对于每个工作流程步骤，指定（1）谁需要批准，（2）生成哪些电子邮件提醒，（3）如果批准给出会发生什么，以及（4）如果批准被拒绝会发生什么。

提示：我们建议将工作流程建模为有限状态机，其中内容项一次只能处于一个状态，并且单个状态告诉您关于该项的一切所需信息。换句话说，您的软件可以采取行动，而无需回头查看文章先前处于哪些状态。

### 版本控制（用于内容）

任何参与在线学习社区管理和编辑的人都应该能够获取内容项的旧版本。如果作者抱怨某段落被删除，编辑应该能够从内容管理系统中检索文章的第一稿。旧版本有时对公众用户也很有用。例如，在上世纪90年代中期的photo.net上，我们有很多主题行形式为“降价至$395！”的分类广告。通过服务器日志的检查，发现广告当天早些时候以$400的价格发布，然后几个小时后进行了编辑。因此，技术上主题行是正确的，但却具有误导性。我们没有雇佣额外的管理员来注意这种问题，而是改变了软件以存储分类广告的所有先前版本。在展示已编辑的广告时，新脚本提供了查看广告旧版本的链接。大喊“降价！”的做法停止了。

当人们一起工作时，版本控制变得至关重要以防止丢失更新。以下是丢失更新可能发生的方式：

+   Ira在上午9:00从网站上拿到文档的版本A，以修正错别字。他在上午9:01修正了它，但忘记将文档写回网站。

+   Shoshana在上午10:00拿到版本A，花了六个小时添加了一章文字，下午4:00写回（称为版本B）。

+   Ira注意到他忘记将错别字更正写回服务器，于下午5:00这样做（称为版本C）。

不幸的是，未来用户将看到版本C（修正错字），所有Shoshana的工作都白费了。

大公司的程序员和技术撰稿人熟悉多人编辑同一文档时丢失更新的问题。基于文件系统的版本控制系统被开发出来以帮助协调多个贡献者。这些系统包括最初的Walter Tichy的版本控制系统（RCS；早期1980年代）、Dick Grune和Brian Berliner的并发版本系统（CVS；1986年）以及Marc Rochkind的源代码控制系统（SCCS；1972年）。这些系统需要比普通用户实际操作更多的培训。例如，RCS要求明确的签出和签入。当用户A签出文件时，它被锁定，只有用户A才能签入。假设用户A出去吃午饭，但有一些必须立即放在网站上的重要新闻。如果用户A度假两周并忘记签入一堆文件怎么办？这些问题可以手动解决，但当合作者在地球的两端，看不到“哦，Schlomo的外套还挂在椅子背上，所以他还没离开一天”时，这就成为一个挑战。

对于地理上分布、偶尔连接的用户通过Web内容进行分布式创作，最实用的系统是允许任何授权人员随时签入的系统。然而，每个文档的所有版本都保存在数据库中，这样就可以随时恢复到早期版本或从早期版本中提取部分内容。这意味着您的内容管理系统将具有*审计跟踪*：数据库表中行列交叉点保存的过去值的记录，谁对这些值的更改负责，以及更改值的时间。

在关系数据库管理系统（RDBMS）中实现审计跟踪的两种经典方法。第一种是设置单独的审计表，每个生产表对应一个。每次对生产表进行更新时，旧行将写入审计表，并附有时间戳。这可以通过RDBMS触发器透明地完成，触发器在[http://philip.greenspun.com/sql/triggers](http://philip.greenspun.com/sql/triggers)的“触发器”章节中有描述，并在一个开源审计跟踪包中实践演示，文档在[http://philip.greenspun.com/seia/examples-content-management/audit-acs-doc](examples-content-management/audit-acs-doc)。第二种经典方法是将当前和归档信息保存在同一表中。这在计算资源方面更昂贵，因为您想要的用于实时站点的信息与很少检索的归档信息交错在一起。但是，如果您想要编程实现在特定日期显示站点的功能，则更容易。您的模板不必查询不同的表，只需一个不同的WHERE子句。

迈克尔·斯通布雷克（Michael Stonebraker）是加州大学伯克利分校的教授，约在1990年左右研究了这个问题，并决定构建一个具有版本支持等其他高级功能的RDBMS。这就是后来成为PostgreSQL开源RDBMS的原型。最初的PostgreSQL具有“不覆盖架构”，其中对行的更改导致将该行的完整新版本写入磁盘。因此，硬盘驱动器包含表中每一行的所有先前版本。程序员可以通过`select * from content_table['epoch','1995-01-01'] ...`来获取从时间开始（“epoch”）到1995年1月1日的所有版本。这一创新在学术期刊中发表了一些不错的文章，但交易处理性能很差。现代的PostgreSQL放弃了这个想法，转而采用了Oracle风格的预写式日志，只有更新会写入硬盘（请参阅PostgreSQL文档中的“预写式日志”章节，网址为[http://www.postgresql.org/docs/current/static/wal.html](http://www.postgresql.org/docs/current/static/wal.html))。

### 第二范式

假设您决定在单个内容存储库表中保留多个版本：

> ````
> create table content_raw (
> 	content_id		integer primary key,
> 	content_type		varchar(100) not null,
> 	refers_to		references content_raw,
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	release_time		date,
> 	expiration_time		date,
> 	-- some of our content is geographically specific 
> 	zip_code		varchar(5),
> 	-- a lot of our readers will appreciate Spanish versions
> 	language		char(2) references language_codes,
> 	mime_type		varchar(100) not null,
> 	one_line_summary	varchar(200) not null,
> 	-- let's use BLOB in case this is a Microsoft Word doc or JPEG
> 	-- a BLOB can also hold HTML or plain text
> 	body			blob,
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired'))
> );
> 
> ````

如果这个表包含了一个 Content ID 为 5657 的文章的七个版本，那将违反 `content_id` 列的主键约束。如果我们移除主键约束会怎样？在 Oracle 中，这将阻止我们建立指向该 ID 的引用完整性约束。没有完整性约束，我们将面临风险，例如，我们的数据库可能包含已删除内容项的评论。对于每个内容项有多行记录，我们的指针变得模糊不清。语句 "用户 739 已阅读文章 5657" 从 `users` 表中的特定行指向 `content_raw` 表中的一组行。我们应该尝试更具体吗？我们希望文章的评论指向该文章的特定版本吗？我们想知道读者是否阅读了文章的特定版本吗？我们想知道编辑是否批准了文章的特定版本吗？这取决于情况。对于某些目的，我们可能确实希望指向一个版本，例如，用于批准，而在其他时候我们希望指向文章的抽象。如果我们添加一个 `version_number` 列，这将变得相对简单。

> ````
> create table content_raw (
> 	-- the combination of these two is the key
> 	content_id		integer,
> 	version_number		integer,
> 	...
> 	primary key (content_id, version_number)
> 
> );
> 
> ````

检索特定版本的信息很容易。检索跨多个内容项版本相同的信息变得笨拙，并且需要使用 GROUP BY，因为我们希望将来自多行的信息合并成一行报告：

> ````
> -- note the use of MAX on VARCHAR column; this works just fine
> 
> select content_id, max(zip_code)
> from content_raw
> where content_id = 5657
> group by content_id
> 
> ````

我们实际上对特定内容项版本的最大邮政编码并不感兴趣。实际上，除非在我们的应用代码中出现了某种错误，我们假设同一内容项的多个版本的所有邮政编码都是相同的。然而，GROUP BY 是一种将多行信息合并的机制。SELECT 列表只能包含那些被 GROUP BY 的列名。SELECT 列表中的其他内容必须是对未被 GROUP BY 的列的多个值进行聚合的结果。大多数关系数据库管理系统的选择相当有限：MAX、MIN、AVERAGE、SUM。没有 "选择任意" 的功能。因此我们使用 MAX。

更新同样有问题。美国邮政服务定期重新绘制邮政编码地图。更新一个信息，例如，将 "20016" 更新为 "20816"，将会触及每个内容项的多行。

这个数据模型是在第一范式中。每个值都可以在表名、列名和键（`content_id` 和 `version_number` 的复合主键）的交叉点上找到。然而，它不符合第二范式，这就是为什么我们的查询和更新看起来很奇怪的原因。

在第二范式中，所有列都对整个键具有函数依赖性。更不正式地说，第二范式表是在第一范式中具有确定所有非键列值的键的表。更不正式地说，第二范式表只包含关于一种事物的陈述。

我们当前的 `content_raw` 表包含一些信息，这些信息取决于 `content_id` 和 `version_number` 的整个键，例如，正文和语言代码。但很多信息仅取决于键的 `content_id` 部分：作者、创建时间、发布时间、邮政编码。

当我们需要存储关于两种不同事物的声明时，创建两个不同的表是有意义的，也就是使用第二正式形式：

> ````
> -- stuff about an item that doesn't change from version to version
> create table content_raw (
> 	content_id		integer primary key,
> 	content_type		varchar(100) not null,
> 	refers_to		references content_raw,
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	release_time		date,
> 	expiration_time		date,
> 	mime_type		varchar(100) not null,
> 	zip_code		varchar(5)
> );
> 
> -- stuff about a version of an item
> create table content_versions (
> 	version_id		integer primary key,
> 	content_id		not null references content_raw,
> 	version_date		date not null,
> 	language		char(2) references language_codes,
> 	one_line_summary	varchar(200) not null,
> 	body			blob,
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired')),
> 	-- audit the person who made the last change to editorial status
> 	editor_id		references users,
> 	editorial_status_date	date
> );
> 
> ````

如何查询版本表并找到最新版本？首次尝试可能类似于以下内容：

> ````
> select * 
> from content_versions
> where content_id = 5657
> and editorial_status = 'approved'
> and version_date = (select max(version_date)
>                     from content_versions
>                     where content_id = 5657
>                     and editorial_status = 'approved')
> 
> ````

这能保证仅返回一行吗？不！在 `content_id, version_date` 上没有唯一约束。理论上，两个编辑者或作者可以在同一秒内提交项目的新版本。请记住，Oracle 中的日期数据类型只精确到秒。更有可能的是，进行修订的编辑可能会用鼠标两次单击编辑表单的提交按钮，或者可能会不耐烦地使用重新加载命令。这里有一个小小的改进：

> ````
> select * 
> from content_versions
> where content_id = 5657
> and editorial_status = 'approved'
> and version_id = (select max(version_id)
>                   from content_versions
>                   where content_id = 5657
>                   and editorial_status = 'approved')
> 
> ````

`version_id` 列受到唯一约束，但我们依赖于我们应用程序代码的未声明的知识，即 `version_id` 将对于后续版本而言更大。

一些 RDBMS 实现已经扩展了 SQL 语言，以便您可以请求查询返回的第一行。简要查看 Oracle 手册会导致尝试

> ````
> select * 
> from content_versions
> where content_id = 5657
> and editorial_status = 'approved'
> and rownum = 1
> order by version_date desc
> 
> ````

但是对手册的深入阅读会揭示在处理 ORDER BY 子句之前会设置 `rownum` 伪列。在一条查询中执行此操作的一种被接受的方法是嵌套查询：

> ````
> select *
> from (select * 
>       from content_versions
>       where content_id = 5657
>       and editorial_status = 'approved'
>       order by version_date desc)
> where rownum = 1;
> 
> ````

SQL 中另一种常见的编程风格可能会令人惊讶，它采取以下步骤：

1.  为 SQL 语句打开一个游标

    > ````
    > select * 
    > from content_versions
    > where content_id = 5657
    > and editorial_status = 'approved'
    > order by version_date desc
    > 
    > ````

1.  从游标中获取一行（这将是具有`version_date` 中最大值的行）

1.  关闭游标

### 第三范式

一位注重效率的程序员可能会查看前述查询，并观察到内容版本每年最多更新十次，而公共页面可能每秒查询并提供最新版本十次。在插入/更新时计算并标记最新的已批准版本会更有意义吗？

> ````
> create table content_versions (
> 	version_id		integer primary key,
> 	content_id		not null references content_raw,
> 	version_date		date not null,
> 	...
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired')),
> 
> 	current_version_p	char(1) check(current_version_p in ('t','f')),
> 	...
> );
> 
> ````

新的 `current_version_p` 列可以通过触发器来维护，该触发器在插入或更新后运行，并检查 `version_date` 和 `editorial_status` 列。

使用以下视图可以简化对用户页面的查询：

> ````
> create view live_versions 
> as
> select * 
> from content_versions
> where current_version_p = 't';
> 
> ````

现代商用 RDBMS 实现提供了一项功能，通过该功能，表中的行可以分布在不同的表空间中，每个表空间位于物理上不同的磁盘驱动器上。在 Oracle 中，这被称为*分区*：

> ````
> create table content_versions (
> 	version_id		integer primary key,
> 	content_id		not null references content_raw,
> 	version_date		date not null,
> 	...
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired')),
> 
> 	current_version_p	char(1) check(current_version_p in ('t','f')),
> 	...
> )
> partition by range 
>   (current_version_p)
>   (partition old_crud values less than 's'
>    tablespace slow_extra_disk_tablespace
>    partition live_site values less than(maxvalue)
>    tablespace fast_new_disk_tablespace)
> ;
> 
> ````

所有用于实时站点的行将被保持在相对紧凑的块中。即使旧版本与实时内容的比例为99:1，也不会影响性能或缓存数据库块从磁盘中消耗的RAM量。一旦Oracle看到“WHERE CURRENT_VERSION_P =”子句，它就知道可以安全地忽略整个表空间，并且不会检查任何无关的块。

我们已经达到了涅磐吗？根据数据库专家的说法，我们还没有，他们的关系演算公式并没有考虑数据如何分布在物理磁盘驱动器之间等因素。数据库理论家会指出我们的数据模型符合第二范式但不符合第三范式。在第三范式数据模型的表中，所有列都直接依赖于整个键。列`current_version_p`并不依赖于表键，而是依赖于另外两个非键列（`editorial_status`和`version_date`）。SQL程序员将这种性能增强的可推导数据存储称为“去规范化”。

如果您想要直接从运行在容量适中的服务器上的关系数据库管理系统中处理一天一千万次请求，您可能需要打破一些规则。然而，最易维护的生产数据模型通常是从第三范式开始，并添加一些适度和审慎的去规范化，这些去规范化是有文档记录和合理的。

> 注意，任何处于第三范式的数据模型也同时符合第二范式。而处于第二范式的数据模型也符合第一范式。

### 版本控制（用于计算机程序）

请注意，解决站点内容（数据库中的内容）的版本控制问题的解决方案仍然会让您作为工程师面临实现站点的计算机程序的版本控制问题。这些程序很可能在操作系统文件系统中，并由少数专业软件开发人员编辑。在这个课程中，您可能会决定不值得设置和使用版本控制，这样您的*事实上*版本控制系统就变成了备份磁带，所以请确保您每天都有备份。然而，从长远来看，您需要了解互联网应用程序开发的版本控制方法。

在本节中，请记住，一个具有非常明确的发布目标、规格永远不会改变，并且只有一个非常聪明的开发者的项目不需要版本控制。一个具有不断发展的目标、变化的规格和多个贡献者的项目需要版本控制。

#### 传统解决方案：每个开发者一个开发区域

传统上，版本控制是由C开发人员使用的，每个C程序员都从自己的目录中工作。这是有道理的，因为在C世界中没有持久性。代码被编译。一个二进制运行，构建RAM中的数据结构。当程序终止时，它不会留下任何东西。整个软件“树”从版本控制存储库检出到开发计算机的文件系统中。当程序员满意时，更改的文件将被检入存储库。

在数据库支持的互联网应用程序世界中，对这种开发方法的一个肤浅反对意见是，进行小改动变得非常乏味。程序员将树检出到开发服务器上。程序员安装一个RDBMS，然后创建一个RDBMS用户和一个表空间。程序员将RDBMS从生产站点导出到转储文件中，将该转储文件通过网络传输到开发机器上，并将其导入到开发服务器上的RDBMS安装中。请记住，对于许多互联网应用程序，数据库可能接近一TB的大小，因此传输和导入转储文件可能需要几个小时或几天。最后，程序员找到一个空闲的IP地址或端口，并设置一个以开发树为根的HTTP服务器。准备编码！

将这种开发方法应用于我们的世界的一个更深层次的反对意见是，它是协作的障碍。在互联网应用程序业务中，开发人员总是与出版商和用户一起工作。这些合作者需要随时知道在哪里找到软件的最新运行版本，以便他们可以提供批评和建议。如果一个服务中有十个软件开发人员，要求出版商和用户检查十个单独的开发站点是不合理的。

#### 我们时代的解决方案

1.  三个HTTP服务器（它们可以在一台物理计算机上）

1.  两个或三个RDBMS用户/表空间（它们可以在一个RDBMS实例中）

1.  一个版本控制存储库

让我们逐个项目来看看。

#### 项目1：三个HTTP服务器

假设一个出版商的总体目标是为"foobar.com"提供一个可访问的互联网应用程序。这需要一个生产服务器，在文件系统中以/web/foobar/为根目录（**服务器1**）。让程序员在实时生产站点上进行更改太冒险了。这需要一个开发服务器，在/web/foobar-dev/为根目录（**服务器2**）。也许这就够了。当每个人都对开发服务器的功能感到满意时，宣布代码冻结，进行一些测试，然后将开发代码复制到生产目录并重新启动。

两个服务器计划有什么问题？如果开发和测试团队是同一个团队，那么没有可能同时进行开发和测试。然而，对于一个复杂的网站，发布者可能希望在发布修订版之前花一周时间进行测试。在测试人员在开发服务器上忙碌时，让作者和开发人员闲置是不可接受的。增加一个分级服务器，根目录为/web/foobar-staging/（**服务器 3**）允许开发继续进行，同时测试人员正在为新版本的公开发布做准备。

这里是三个服务器的使用方法：

1.  开发人员在/web/foobar-dev/上持续工作。

1.  当发布者对开发站点大多满意时，将创建一个命名版本或分支，并安装在/web/foobar-staging/上。

1.  测试人员在/web/foobar-staging/服务器上忙碌，将修复内容检查回版本控制存储库，但只能检查回��级分支。

1.  当测试人员和发布者对分级服务器的性能表示满意时，网站将发布到/web/foobar/（生产）。

1.  任何在代码的分级分支中进行的修复，如果开发团队尚未修复，则将其合并回版本控制存储库中的开发分支。

#### 项目 2：两个或三个 RDBMS 用户/表空间

假设发布者有一个运行软件版本 1.0 的工作生产站点。可以将根目录为/web/foobar-dev/的开发服务器连接到生产数据库。毕竟，关系数据库管理系统的存在理由是并发控制。它将很高兴处理来自生产 Web 服务器的八个同时连接以及来自开发服务器的两到三个连接。问题在于，开发人员中的某个人可能会粗心大意，编写一个发送 `drop table users` 而不是 `drop table users_experimental_extra_table` 到数据库的程序。或者，更不夸张地说，初级开发人员可能在 SQL 语句中遗漏 WHERE 子句，并无意中请求一个包含 10⁹ 行的结果集，从而减慢生产站点的速度。

因此，这个发布者似乎至少需要一个新的数据库。以下是步骤：

1.  创建一个新的数据库用户和表空间；如果这是在与生产关系数据库服务器不同的物理计算机上，它将保护您的生产服务器免受粗心开发 SQL 语句导致的拒绝服务攻击对性能的影响。

1.  将生产数据库导出到文件系统文件，这在任何情况下都是一个好的周期性实践，因为它将验证数据库的完整性。

1.  将数据库导出导入到新的开发数据库中。

1.  每当开发人员更改表格、添加表格或填充新表格时，在 "patches.sql" 文件中记录操作。

1.  当准备将代码从分级转移到生产时，迅速将 patches.sql 中的所有数据模型修改应用到生产关系数据库管理系统中。

是否应该有三个数据库，即一个用于开发，一个用于暂存，一个用于生产？不一定。除非预期数据模型会发生根本性变化，否则可以接受在开发和暂存中使用相同的数据库。请记住，在关系数据库表中添加列很少会破坏旧查询。这是 E.F. Codd 在 1970 年在《大型共享数据库的关系数据模型》中设定的目标之一（[http://www.acm.org/classics/nov95/toc.html](http://www.acm.org/classics/nov95/toc.html)），当然，关系模型的现代实现在这方面实现了 Codd 的期望。

#### 项目 3：一个版本控制仓库

版本控制仓库的功能是

+   记住之前所有已检入文件版本的内容。

+   显示已检出树中的内容与仓库中的内容之间的差异

+   帮助合并同时由多个作者进行的更改，这些作者可能不知道彼此的工作

+   将当前已检入文件版本的快照分组为“Release 2.1”或“JuneIssue”

满足上述要求的系统示例是 Concurrent Versions System (CVS)，它是免费且开源的。CVS 使用单个文件系统目录作为其仓库或“CVS 根目录”。CVS 可以通过互联网运行，因此仓库位于计算机 A 上，而开发、暂存和生产服务器位于计算机 B、C 和 D 上。或者，您可以在一个物理计算机上的单独文件系统目录中运行所有内容。

#### 这个解决方案的优点

让我们总结一下这里提出的版本控制（用于计算机程序）解决方案的优点：

+   如果生产服务器出现问题，可以轻松恢复到已知且经过测试的软件版本

+   程序员可以在重大更改后明确检查文件，以保护和注释他们的更改。

+   程序员和测试人员团队可以独立工作

进一步阅读：[使用 CVS 进行开源开发](http://www.amazon.com/exec/obidos/ASIN/158880173X/pgreenspun-20)（Fogel 和 Bar 2001; Coriolis），其中部分内容可在线查阅：[http://cvsbook.red-bean.com/cvsbook.html](http://cvsbook.red-bean.com/cvsbook.html)。

### 练习 3：版本控制

将你的答案写下来回答以下问题：

+   你的内容版本控制系统是什么？

+   你的软件版本控制系统是什么，包括数据模型和页面脚本？

+   你的系统对于问题“谁对当前用户可见页面上的内容负责”能产生什么样的答案？

请注意，通常大多数团队必须编写一些额外的 SQL 代码来完成这个练习，以增强他们在练习 1 中构建的数据模型。

### 练习 4：骨架实现

构建足够的页面，以便一组用户可以合作将一些内容发布到您的服务器上。将努力集中在您在线学习社区中期望拥有的主要类型的由出版者撰写的内容上。对于大多数项目来说，这将是文章和导航页面到这些文章。

在您有了几篇文章之后，退后一步，问以下问题：

+   这个数据模型有效吗？

+   获取某些内容上线需要合理的点击次数吗？

+   需要批准新内容的人是否有一种简便的方法来确定需要批准什么，已经批准或拒绝了什么？那些编辑必须每隔几个小时来到网站并检查，还是当新内容需要审核时他们会收到电子邮件提醒？

骨架实现应具有稳定和一致的URL，即首页应该只是服务器的主机名，文件名应该一致。如果您还没有机会使抽象URL起作用（请参阅“基础”章节），那么现在是时候这样做了。每个页面都应有一个描述性标题，以便浏览器的后退按钮和书签（“收藏夹”）完全功能。每个页面底部都应有一个“查看源代码”链接和一种联系页面功能和内容负责人的方法。应该有一种一致的导航系统（也见下文）。骨架实现的外观和感觉将是简单的，但不必丑陋或不一致。寻找Google的灵感，而不是您大学同学的个人主页。

### 外观和感觉

此时，您的服务器上已经有了一些内容。因此，可以开始尝试HTML页面的外观和感觉。开始的好地方是以下问题：

+   空间

+   时间

+   单词

+   颜色

#### 屏幕空间

在20世纪60年代，计算机用户可以利用具有1 MB内存并且能够执行1百万条指令每秒的计算机的1/100份份额，在一个19英寸的监视器上查看结果。到2005年，计算机用户可以得到具有2000 MB内存（2 GB）并且能够执行40亿条指令每秒的计算机的全部份额。这大约是计算能力可用性的40万倍改善。我们现代计算机用户如何查看他或她的计算结果？在一个19英寸的监视器上。

大多数应用程序的程序员不再需要过多地关注处理器和内存效率，这在20世纪60年代是痴迷的。CPU和RAM现在丰富充裕。但屏幕可用空间仍然宝贵。看看你的页面设计。最重要的信息是否可供查看而无需滚动？（在报纸业中，此术语为“上折”。）您是否充分利用了您拥有的屏幕空间？页面上是否有大片的空白空间？您是否可以使用HTML表格同时呈现两列或三列信息？

特别浪费屏幕空间的一种做法是使用图标。通常，用户无法理解图标的含义，因此需要用普通语言注释来补充。一般来说，最好的策略是*让信息成为界面*，例如显示一列文章类别（信息），其中点击一个类别是导航到显示该类别内的文章的页面的方式。

#### 时间

大多数人喜欢快速而不是慢速。大多数人更喜欢一致的服务时间而不是不一致的服务时间。这两种偏好极大地促进了麦当劳餐厅在全球范围内的普及。当人们用完午餐后，他们会将这些偏好带到计算机应用程序中：快速胜过缓慢；响应时间应该在每次会话中保持一致。

计算机和网络速度将随着年代的变化而改变，但人类的进化速度要慢得多。因此，我们应该首先考虑到用户的人性所带来的限制。实验心理学家会告诉我们，短期记忆只能记住大约七件事情（"关于我们处理信息能力的一些限制"，乔治·A·米勒，《心理评论》1956，63：81-97；[http://www.well.com/user/smalin/miller.html](http://www.well.com/user/smalin/miller.html)），而且这种记忆只能持续约二十秒。因此，在任何需要用户从一页记住太多东西的计算机应用程序中，构建这种应用程序是不明智的。同样，构建任何页面间延迟超过二十秒的计算机应用程序也是不明智的。人们可能会忘记他们试图完成的任务！

IBM 公司在 1970 年左右进行了一些研究，并发现了以下所需的计算机响应时间：

+   直接操作需要 0.1 秒，例如，用指针在屏幕上移动对象

+   在屏幕点击屏幕系统中，例如 1970 年的 IBM 3270 终端上和 2005 年的网络中，为实现最大生产率需要 1 秒

+   少于 10 秒钟可以保持用户的完全注意力；当响应时间延长到 10 秒以上时，用户会尝试从事另一项任务，例如阅读杂志，同时还在使用计算机应用程序

在互联网应用程序中努力追求的一个合理目标是亚秒级的响应时间。这个目标部分基于 IBM 的研究，部分基于（2005 年）无法达到直接操作所需的 0.1 秒标记，以及部分基于最佳从业者所取得的成就。你的用户将会使用亚马逊、雅虎和 eBay。任何比这些网站慢的服务都会在用户心中引起警报：也许这个网站会彻底失败？也许我应该尝试找一个做同样工作但更快的竞争对手网站？

影响页面加载时间的一个因素是服务器和用户之间的端到端带宽。除了测量和平均值之外，你无法做太多事情。一些Web服务器可以配置或重新编程以记录为页面提供服务的总时间。例如，通过查看为大型照片提供服务所花费的时间，你可以推断出服务器和用户之间可用带宽的平均值。如果第十百分位用户的带宽为每秒50 K位，即使你的服务器在准备页面方面非常快，你也应该尽量确保你的页面，包括图形在内，不超过50 K位的大小，或者HTML设计得使页面可以逐步呈现。（一个完全由TABLE组成的页面是不好的；一个页面中任何图像都有WIDTH和HEIGHT标签是好的，因为文本将立即呈现，空白空间将逐渐填充，直到图像加载完成。）

你可以通过将你的页面与eBay、Yahoo!和Amazon等最成功的互联网服务运营商的页面进行比较，来验证关于页面布局和图形重量的决定。

记住，在书籍和杂志世界中，每一页的设计加载速度都是相同的，这意味着页面设计主要是一个美学问题。在互联网世界中，页面设计和应用程序速度是密不可分的，这使得页面设计成为一个工程问题。

#### 单词

作为程序员，你将在构建的服务中放入两种文本：说明和错误消息。

对于说明，你可以选择使用主动语态或被动语态，第一人称、第二人称或第三人称。说明应该使用第二人称祈使句。省略代词，例如，"输入出发日期"而不是"输入你的出发日期"。

往往可以构建一个系统，使得错误消息是不必要的。最好的用户界面是那些用户不会犯错的界面。例如，假设一个应用程序需要提示输入日期。可以通过一个空白的文本输入框来实现，没有任何提示，期望用户输入 MM/DD/YYYY，例如，09/28/1963 代表1963年9月28日。如果用户的输入不符合这个模式或日期不存在，例如，02/30/2002，应用程序会返回一个页面解释要求。一个小的改进是在框旁边添加一个注释："MM/DD/YYYY"。如果应用程序日志显示错误页面的数量有所减少，但并未消除，也许将文本输入框默认设置为今天的日期，格式为 MM/DD/YYYY，会更好。然而，当你浏览你最喜欢的旅行网站时，你可能会发现他们选择了"以上都不是"。用户被要求从一个JavaScript日历小部件中选择日期，或者从HTML菜单中下拉月份和日期。

**图 6.1：** 要求用户指定日期的不同方式。通常最好以用户不可能犯错的方式询问，避免出现错误页面，显示“日期格式不正确”，“无效日期”或“过去日期”。

遗憾的是，你无法消除所有错误消息的需要。因此，你将不得不在简洁和冗长以及懒惰和积极之间做出选择。一个懒惰的系统会对任何无法运行的用户输入回应“语法错误”。一个积极的系统将尝试自动更正用户的输入，或者至少弄清楚可能出错的地方。

研究表明，开发复杂的错误处理页面是值得的，例如，纠正用户输入并提供确认页面。至少，值得对用户的有问题输入运行一些正则表达式，看看其缺陷是否符合一个常见模式，可以在错误页面上解释。最好避免拟人化——计算机不应该说“我不明白你输入的内容”。

#### 颜色

| “自然界太绿了，光线太差。” -- 弗朗索瓦·布歇尔，18世纪画家 |
| --- |

文本在黑色背景上对白色或浅白色背景最易读。最好避免在界面中使用颜色，除非遵循约定，比如“蓝色文本=超链接；紫色文本=已访问的超链接”。如果将你的创意限制在`<body bgcolor=white text=black>`，浏览器将以熟悉的链接颜色善待你的用户。通过在界面中节制地使用颜色，你将有大部分的色谱可用于呈现信息：图表、图形、照片。例如，比较[www.britneyspears.com](http://www.britneyspears.com)和[http://britneyspears.ac/physics/basics/basics.htm](http://britneyspears.ac/physics/basics/basics.htm)，看看这些原则是如何运作的。

在网页顶部的中灰色调要小心一点。许多网络浏览器在窗口顶部的菜单和按钮栏的背景上使用各种灰色调。如果一个网页顶部有一个纯灰色区域，用户可能会难以区分浏览器软件的结束和页面内容的开始。请注意，雅虎和亚马逊的页面在顶部包含了一些额外的白色空间，以将页面内容与浏览器位置和菜单栏分开。

无论你选择什么方案，在整个网站上保持一致。1876年，麻省理工学院同意将校色定为深红和灰色。通过访问[www.mit.edu](http://www.mit.edu)，点击“管理”，然后查看四个部门的子站点：信息服务、医学、艺术、残疾服务，看看这个协议是否仍然有效。

要了解有关使用颜色的优秀讨论，请参阅Macintosh人机界面指南，可在线获取：[http://developer.apple.com/documentation/mac/HIGuidelines/HIGuidelines-2.html](http://developer.apple.com/documentation/mac/HIGuidelines/HIGuidelines-2.html)。基本上，信息如下：（1）节约使用颜色，（2）确保色盲人士能够充分利用应用程序，（3）避免红色，因为它与警报和危险有关。

### 导航

与页面设计一样，导航的最佳策略是模仿最成功且因此熟悉于您的用户的互联网应用程序。2005年左右站点主页的最佳实践似乎可以归结为以下元素：

1.  通往站点其余部分的导航目录

1.  新闻和事件

1.  一个用于站点范围搜索的单个���本输入框

1.  一个快速的表单，针对站点上最常请求的服务，例如，在航空公司网站上，一个快速的票价/时间表查找器，带有城市和日期的表单输入

在构建导航目录时，请查看[www.yahoo.com](http://www.yahoo.com)。请注意，雅虎！不使用图标进行类别导航。要进入摄影类别，在艺术与人文学科下方，您点击“摄影”一词。*信息即界面。*这一原则在爱德华·图夫特的经典著作[Visual Explanations](http://www.amazon.com/exec/obidos/ASIN/0961392126/pgreenspun-20)（Graphics Press，1997）中有所阐述。图夫特指出，如果您使用图标，还需要在下方提供文本解释。为什么不让文本单独成为界面呢？图夫特还主张广泛和扁平地呈现信息；用户不应该不得不通过八个每个只有少数选择的屏幕点击。

在内部页面上，回答以下问题很重要：

+   我在哪里？

+   我去过哪里？

+   我可以去哪里？

要回答“我在哪里？”相对于互联网上的其他站点，您可以在每个页面的左上角包含一个标志性的图形或字体区分的站点名称，超链接到站点主页。查看亚马逊网站的内部页面，了解这是如何运作的。要回答“我在哪里？”相对于同一站点上的其他页面，您可以包含一个带有当前页面突出显示的站点地图。在一个复杂的站点上，这种方法不太适用：最好使用雅虎风格的导航栏，也称为“分级路径”或“面包屑”。例如，[http://dir.yahoo.com/Arts/Visual_Arts/Photography/Panoramic/](http://dir.yahoo.com/Arts/Visual_Arts/Photography/Panoramic/) 包含以下导航栏：

> 主页 > 艺术 > 视觉艺术 > 摄影 > 全景

请注意，此导航栏的大小按O[log N]增长，其中N是站点上页面的数量。显示完整站点地图或顶部选项卡会导致线性增长。

要回答“我去过哪里？”的问题，首先不要指示浏览器更改标准链接颜色。用户将通过浏览器得知哪些链接已经访问过。如果您在编程时小心谨慎并且页面标题一致，用户将能够右键单击“返回”按钮，选择性地返回到服务的任何以前的位置。此外，请注意，雅虎风格的导航栏对于实际从主页点击下来的用户来说是有效的，可以回答“我去过哪里？”的问题。

要回答“我可以去哪里？”的问题，您需要...链接！让浏览器默认使用标准颜色，以便用户将链接视为链接。通常不建议使用鼠标悬停、选择框或图形。这些控件在不同网站之间的工作方式不同，因此用户可能不了解如何使用它们。这些控件没有访问链接变为不同颜色的属性；它们通常无法或不会利用浏览器的历史数据库。最后，这些控件无法有效地向用户显示他们可以去哪里，因为许多选择是隐藏的。

### 练习5：批评

参观一下本课程中其他同学正在建设的项目。对于每个项目，请确保熟悉整体服务目标和数据模型。然后注册为用户并撰写一篇文章。（如果在这些步骤中遇到困难，请通过电话和电子邮件联系项目背后的团队成员，并要求他们在服务器上添加链接或提示。）

与项目团队成员合作，为您审查的每个项目撰写一份纯文本评论。寻找客户在规划练习解决方案中表达的要求无法通过您看到的数据模型实现的情况。寻找提供建设性批评的机会。请记住，您的同学不需要提升自尊心；他们需要您的工程技能带来的好处。

以下是一些可能容易找到改进的建议领域：

+   用户注册和内容撰写中的页面流程——能否减少完成任务所需的点击次数？

+   外观、感觉和导航参考上述标准

+   版本控制和审计跟踪

+   附件应该放在哪里，例如，是否有一个地方可以存储附加到文章评论的JPEG照片？

+   分类和展示提示——内容是否可以在清晰的信息架构中呈现？

+   是否有一个存储关键字的地方，即与内容项相关联的手工编写的单词集合（以帮助全文搜索）

+   内容存储库是否可以存储任意数据类型，例如视频、音频剪辑或照片？

请用项目团队的名称以及所有团队成员的姓名签署评论。

将您对刚刚审阅过的团队成员的批评发送到他们的邮箱。将这些存档在一个文件中，并在 http://yourservername/doc/critiques/cm-sent.txt 上提供。留意您自己的收件箱，等待来自其他同学的批评。请将这些整理成一个文件，并在 http://yourservername/doc/critiques/cm-received.txt 上提供。

### 信息架构：隐式还是显式？

假设网站上有 1000 个内容项。组织、标记和向用户呈现这 1000 个项目的方式被称为网站的*信息架构*。为简单起见，让我们假设我们将在一个页面上呈现所有 1000 个项目。为了具体化，我们假设所有内容都与摄影相关。即使这种退化的一页用户体验也需要一些信息架构决策。以下是一些可能性：

+   从最新到最旧排序（对于有经验的用户很好）

+   从最高质量到最低质量排序（对于首次用户可能很好）

+   按照摄像头前的内容分类，并通过副标题分开呈现项目，例如，“肖像”，“建筑”，“婚礼”，“家庭”，“动物”

+   按照使用的相机类型分类，并通过副标题呈现项目，例如，“数码便携式”，“数码单反相机”，“35mm便携式”，“35mm单反相机”，“中画幅”，“大画幅”

信息架构决策对于用户表示“我得到了我的问题的答案”的百分比有很大影响。对于公司网站的大多数研究，所有这些都归功于数十万美元的设计工作，发现用户找到实际上可以从网站上的文件中找到答案的问题的机会不到 50%。我们重新设计了 photo.net 网站的信息架构，这个改变只涉及大约六个顶级页面，每天注册的新用户数量翻了一番。

典型网站上的信息架构之所以不适合用户，其中一个原因是架构隐含在脚本和 HTML 页面中。要测试另一种方法将涉及昂贵的手动操作计算机程序和 HTML 标记。为个别用户或用户类提供自定义信息架构将是不可能的。

如果我们在数据库表中明确表示信息架构会怎样？这些表将包含以下信息：

+   关于信息架构的信息：谁制作了它们，何时制作的，哪些是当前的以及为谁制作的

+   在给定信息架构（IA）中，类别或子类别下的项目是否应该在一页上内联呈现，还是仅用链接总结到每个项目的单独页面上。

+   内容项在给定信息架构（IA）中的位置：属于哪个子类别（类别可以从子类别中推断出来），与同级别其他项目的呈现顺序（“排序键”）

+   如何描述内容项或类别

由于用户体验的很大一部分来自数据库表，测试替代方案就像在信息架构管理页面中插入一些行那样容易。如果在网站的概念化过程中人们无法就内容的最佳分类达成一致意见，那么可以启动两种替代方案。一半用户看到IA 1，另一半看到IA 2。如果经历了IA 1的用户更有可能注册并返回，我们可以假设至少对于首次用户来说，IA 1更优越。

对于您在本课程中构建的应用程序，可以采取快速的路径，通过隐式信息架构来编写脚本。然而，我们希望您意识到，通过显式信息架构可以获得开发和测试的强大功能。

### 练习6：生动外观

骨架原型有一个很大的局限性：它是骨架。在整合您从其他学生（在练习5中）和教师那里得到的反馈的同时，加强您的内容管理系统，同时注入足够的内容，使您的应用程序看起来“生动”。这将确保您的系统确实强大到可以处理用户的基本需求。

如果您的客户已经有现有网站，请将其用作内容和最低要求的信息来源。还可以查看几个由具有类似使命和规模的组织运营的网站。例如，如果您正在为一个学术团体构建某物，您可以查看哈佛大学分子与细胞生物学系的网站[http://www.mcb.harvard.edu/](http://www.mcb.harvard.edu/)。该网站展示了中等规模组织网站的基本要求。一个“概述”部分描述了该部门的目的和历史。一个“新闻”部分提供新闻稿。一个“教师”部分解释了谁在那里工作以及他们的专长是什么。还有为潜在本科生和研究生准备的部分，即该组织的潜在客户。如果您正在为一个小型非营利组织构建某物，请查看Sustainable Harvest（[www.sustainableharvest.org](http://www.sustainableharvest.org/)）和Southern Animal Rescue Association（[www.sarasanctuary.org](http://www.sarasanctuary.org/)）的网站。如果您为一家小型制造公司工作，请查看Cirrus Design Corporation的网站[www.cirrusdesign.com](http://www.cirrusdesign.com)，这是明尼苏达州杜卢斯市一家生产小型飞机的公司。

如果无法及时联系到客户完成任务怎么办？或者如果无法从客户那里获取内容怎么办？使用他们现有网站或类似组织运营的网站的内容。确保至少对于来查看“关于”，“新闻”和“联系我们”部分的读者来说，有一个已有用户的外观。在课程的其余时间里，您将有机会用客户的内容替换占位符内容。

请注意，在开始之前，您可能希望至少阅读[“软件模块化”章节](software-modularity)中关于模板的“分离设计师和程序员”部分。

### 练习 7：客户签字确认

要求客户注册为用户并尝试“已有用户”的网站。大多数人在一张空白纸上设计时会感到困难。通过向客户展示一个部分完成的网站，你将从客户那里得到新的不同见解，这与项目开始时的情况不同。

记录客户对以下问题的回答：

1.  在尝试原型后，您希望在计划中看到哪些变化？

1.  填充此网站以实际内容的最快方式是什么？

1.  我们在初始用户注册时是否收集了正确的信息？

### 展示您的工作

如果您正在使用本教材的课程，那么您可能会被要求在这一点上对内容管理系统和网站骨架实施的工作进行四分钟的演示。

四分钟时间并不长，所以您需要排练，并确保所有团队成员知道他们应该做什么。一般规则是，发言者应该面向观众，而不是在电脑上打字。A团队成员发言；B团队成员操作。也许在演示的某个时候，他们会交换，但没有人会同时说话和操作电脑。

以“电梯演讲”开始，即您在电梯里遇到某人时会给出的那种三十秒解释。演讲应该解释您正在解决的问题以及为什么您的系统将比现有机制更好。

提前创建一个或多个用户，这样你就不必展示用户注册页面。每个使用过互联网的人都在网站上注册过。他们会认为你抄袭了亚马逊等热门网站的最佳实践。如果是这样，观众会感到无聊。如果不是，观众会对你的粗心大意感到震惊。无论如何，最好是以已注册用户的身份登录。事实上，有时你可以安排准备两个浏览器，例如 Mozilla 和 MSIE，其中一个以服务的新用户身份登录，另一个以站点管理员或其他你想展示的角色身份登录。

在演讲中最好不要提到“用户”。而是用名称谈论角色。例如，如果你正在围绕飞行构建服务，你可以说“一名学生飞行员登录[你的队友登录]，找到一篇关于旧金山飞行学校的文章[你的队友导航到这篇文章]，并在底部发表评论，说他喜欢他的特定教练。”然后也许交换位置，你的队友过来说“站点编辑[你切换到登录为站点管理员的浏览器]，点击新内容页面[你点击]，看到有一些新评论正在等待批准，阅读来自一名学生飞行员的评论，并批准它[你点击]。”你将浏览器返回到公共页面，现在评论可以在现场网站上看到了。

在浏览器停留在尽可能展示网站整体结构的页面。如果你无法展示你所构建的每个功能，不要绝望。计算机应用程序关乎可以完成的任务。如果你让观众相信完成几个明确重要的任务将会很容易，你就会给他们带来信心。

### 练习8（给教练）

给每个团队的客户打电话，询问他们对以下陈述的强烈同意程度：

1.  我相信我的学生团队了解我的问题。

1.  我了解我的学生团队计划在何时达到目标，一直到课程结束。

1.  我的学生团队已经为我们的会议做好了充分准备。

1.  我的学生团队很负责任。

1.  我相信我的学生团队建立的内容管理系统将足以支持我的网站上的文档类型和所需的发布流程。

1.  我认为用户在我的网站注册、找回丢失的密码以及被要求提供所有必要的个人信息都很容易。

1.  我喜欢我的学生团队建立的用户管理页面。

1.  我的学生团队让我自己检查他们的进展情况变得很容易。

1.  我的学生团队让我充分了解他们的进展情况。

1.  我对到目前为止准备的文档的清晰度和彻底性感到印象深刻。

通过将每个问题的分数相加来评分：对于“不同意”或含糊的同意（客户不会想说关于年轻志愿者的坏话），得分为0；“同意”得1分，“强烈同意”得2分。

### 时间与动作

数据建模、工作流和版本控制练习应该由整个团队一起完成。它们应该花费大约三个小时。许多项目只需要从本章中调整数据模型和策略，然后将它们放在自己服务器的/doc目录下。

骨架实施可能会具有挑战性，这取决于内容管理系统的目标有多雄心勃勃，但可能需要10到20个程序员小时的工作量。

批评其他团队的工作应该每个被批评的项目大约需要15分钟，或者在一个有8到10个项目的班级中总共需要大约两个小时。这可以作为一个团队完成，也可以分工合作。

通过注入真实内容实现真实外观不应超过两个小时，并且应该可以分配给团队成员。

与客户交谈可能需要大约一小时。

## 软件模块化

* * *

在课程的这一阶段，您已经构建了足够多的软件，事情可能开始变得难以控制。维护您的代码的人生会是怎样的？他们能找到您编写的模块吗？他们能找到您的文档吗？在整个站点上进行小的更改会简单吗？

本章讨论了将模块的所有代码分组的方法，记录该模块的文档存在，向系统的其他部分发布API以及存储配置参数的方法。

### 代码分组

系统中的每个模块将包含以下类型的软件：

+   RDBMS表定义

+   在数据库中运行的存储过程（在Oracle中可能是PL/SQL或Java程序）

+   在Web或应用程序服务器程序内运行的程序，这些程序被多个页面共享（我们将这些称为*共享程序*）

+   生成单独页面的脚本

+   （可能）与页面脚本配合使用的模板

+   解释模块目标的文档

这里有一些可能支撑大型在线社区的模块的示例：

+   用户注册

+   文章和评论

+   讨论论坛（与文章共享相同的表格，但具有完全不同的审查工作流程和不同的展示脚本）

+   聊天（与其他内容分开的表格，针对极快查询进行优化，自定义JavaScript客户端软件）

+   用于销售，放置和记录横幅广告的广告服务器

+   日历（个人，团体和全站事件）

+   分类广告和拍卖

+   电子商务（产品目录，订单表，产品页面展示与社区成员评论，结算和会计）

+   为社区成员提供的基于服务器的电子邮件（类似于Hotmail）

+   调查（成员之间的意见调查和其他类型的调查）

+   博客，每个想要私人博客的社区成员，可能与文章共享表格，但具有不同的编辑，审批工作流程和展示界面，以及RSS订阅，引用追踪和博客世界中预期的其他机器对机器接口

+   （故障）故障和功能请求跟踪的工单跟踪器

优秀的软件开发人员可能会对模块的划分有不同意见。例如，某人可能决定不创建一个单独的分类广告模块，而是认为分类广告和讨论非常相似，因此向现有内容表添加`price`和`bid`列比构建新表更有意义，并且向呈现讨论问题和答案的脚本添加大量IF语句比编写新脚本更有意义。

如果在线社区用于支持一群大学生和教师，将会添加额外的专业模块，例如，用于记录哪些课程由谁何时教授，哪些学生注册了哪些课程，每个班级关联了哪些讲义，哪些作业何时到期以及由哪些老师评分。

回想一下，互联网服务背后的软件经常会随着社区的增长和新想法的发展而进行更新。经常更新的软件会有bug，这意味着系统将经常被调试，通常是在凌晨2点，而且通常是由编写软件的程序员之外的程序员来进行调试。因此，发布并遵守使新程序员能够轻松找到相关源代码文件的约定是很重要的。也许只需要十五分钟就能找出问题并修复系统。但如果花费三个小时才能找到源代码文件，原本微不足道的bug就会变成一个半天的项目。

让我们通过一个例子来看一下软件在photo.net服务上是如何组织的。服务器配置为运行多个互联网服务。每个服务位于`/web/service-name/`，这意味着与photo.net相关的所有目录都在`/web/photonet/`下。该站点的页面根目录是`/web/photonet/www/`。Web服务器配置为在`/web/photonet/tcl/`中查找“库”过程（被多个页面共享），这个名称源自于photo.net是在[AOLserver](http://www.aolserver.com)上运行的事实，其默认扩展语言是Tcl。

模块的RDBMS表、索引和存储过程定义存储在`/doc/sql/`目录中的单个文件中（本章中的目录名称是相对于Web服务器页面根目录的，除非另有说明）。该文件的名称是模块名称后跟一个`.sql`扩展名，例如，`chat.sql`用于聊天模块。所有模块的共享过程存储在单个库目录`/web/photonet/tcl/`中，每个文件命名为"模块名-defs.tcl"，例如，`chat-defs.tcl`。

生成个别页面的脚本位于以下位置：用户页面为`/module-name/`；管理员页面为`/module-name/admin/`，例如，具有管理员权限的用户将前往删除帖子的页面；站点管理员页面为`/admin/module-name/`，例如，服务运营商将前往启用或禁用服务，委派管理权限给另一个用户等页面。

存储有关每个模块的高级文档在`/doc/module-name.html`中，并从`/doc/`中的索引页面链接。该文档旨在成为考虑使用模块或扩展模块功能的程序员的起点。该文档具有以下结构：

1.  在哪里找到与此模块相关的所有软件（站点范例是不错的，但明确说明也无妨）。

1.  大局观信息：为什么构建了这个模块？为什么现有的替代方案不足以解决问题？这个模块的高级好坏特性是什么？在开发数据模型时考虑了哪些选择？

1.  配置信息：哪些参数可以通过编辑轻松更改？

1.  使用和维护信息。

有关此类文档的示例，请参见[http://philip.greenspun.com/seia/examples-software-modularity/chat](/seia/examples-software-modularity/chat)。

### 共享过程与存储过程

即使在最简单的Web开发环境中，通常至少有两个地方可以开发过程抽象，即多个页面共享的程序片段。现代关系数据库管理系统可以解释图灵完备的命令式编程语言，如C#、Java和PL/SQL。因此，原则上，任何计算机可以执行的计算都可以由在Microsoft SQL Server、Oracle或PostgreSQL等RDBMS内运行的程序执行。换句话说，您不需要Web服务器或任何其他工具，而是可以在数据库管理系统内以*存储过程*的形式实现页面脚本和HTTP服务器。

正如我们将在“优雅扩展”章节中看到的那样，在将应用程序的表示层拆分为一组独立的物理计算机中，可以获得一些性能优势。因此，我们的页面脚本肯定会存放在关系数据库管理系统之外。这给了我们写入额外软件的机会，该软件将在Web服务器程序内或附近运行，通常使用用于页面脚本的相同计算机语言，以*共享过程*的形式。例如，在PHP脚本的情况下，共享过程可以是一个包含文件。在个别页面以Java或C#脚本编写的站点中，共享过程可能是一些被多个页面使用的类和方法。

如何选择使用共享过程和存储过程？首先要考虑可能连接到同一数据库的多个应用程序。例如，可能有一个公共Web服务器，一个每晚提取所有新信息以供分析的程序，一个基于Microsoft Excel或Access构建的管理员维护工具等。

如果你认为一段代码可能对连接到相同数据模型的其他系统有用，请将其放入数据库作为存储过程。如果你确定一段代码只对你正在构建的特定Web应用程序有用，请将其保留在Web服务器中作为共享过程。

### 文档

> “随着我们进入21世纪，我们发现步枪射击在世界各军事机构中已经大部分失传。技术可以取代无能的观念已经在各种努力中出现，包括射击。”
> 
> -- 杰夫·库珀在《步枪艺术》（1997年；圣殿出版社）中

如果一个系统有1000个过程而没有文档，典型的经理会向程序员下达命令：你们必须为每个过程编写一个“文档字符串”，说明它接受什么输入，生成什么输出，以及如何将这些输入转换为输出。几乎自上世纪60年代以来的每个编程环境都支持这种思维方式。更高级的“文档字符串”系统甚至会解析源代码目录，提取文档字符串，并打印出一个包含1000个文档字符串的漂亮手册。

文档字符串有多有用？有用，但不足够。对于一个新系统的程序员来说，他不会知道这1000个过程和相应的文档字符串中哪些是最重要的。新程序员不会知道这些过程是为什么构建的，它们解决了什么问题，以及整个系统是否已经被另一来源的更新软件所取代。当然，这1000个文档字符串不会说服任何程序员采用一款软件。更重要的是呈现清晰的英文散文，展示你在解决实际问题时的思维和设计工作的质量。这段散文不必超过几页，但需要精心打磨。

### 分离设计师和程序员

批评和更改请求将与了解被批评系统部分的人数成比例地出现。很少有人能够进行数据建模或交互设计。尽管这些是唯一深刻影响用户体验或信息系统对操作者实用性的部分，但您很少需要在这个领域考虑建议。只有具有多年相关经验的人才可能建议向 SQL 表中添加列，或者可以用三个表替换五个表。更多人有能力编写 Web 脚本。因此，无论您选择的编程环境是什么或者在您采用它时应该是多么先进，您有时都会因编程环境的选择而受到嘲笑。然而，几乎地球上的每个人都明白紫红色与洋红色不同，Helvetica 与 Times Roman 也不同。因此，对于 Web 应用程序的更改建议中最多的将是与设计相关的。有人想在网站的每个页面上添加一个新的徽标。有人想在讨论论坛部分更改背景颜色。有人想在特定页面上的标题变大一点。有人想在这里和那里添加一些空白。

假设您已经以最简单直接的方式构建了您的 Web 应用程序。对于每个 URL，都有一个相应的脚本，其中包含 SQL 语句、脚本语言中的一些过程代码（基本上是 IF 语句）以及 HTML 的静态字符串，这些字符串将与从数据库返回的值组合在一起形成完成的页面。如果您分解 Visual Basic Active Server Page 或 Java Server Page 或 Perl CGI 脚本中的内容，您总是会发现这三项内容：SQL、IF 语句、HTML。

使用这种编程风格开发应用程序很容易。您可以在一个文本编辑器缓冲区中看到页面的所有相关代码。维护也很简单。如果用户发送了一个关于“http://www.yourcommunity.org/foo/bar”存在拼写错误的错误报告，您只需查看文件系统中的一个文件（/foo/bar.asp或/foo/bar.jsp或/foo/bar.pl或其他文件），就可以保证找到用户问题的源头。这也适用于 SQL 和过程化编程错误。

如果人们想要对字体、颜色、页眉和页脚进行全站更改怎么办？这取决于您如何设计系统，这可能很容易或很困难。假设默认颜色是从配置参数系统中读取的，并且页脚、页眉和每个页面的导航辅助信息是通过页面脚本调用共享程序生成的。在这种愉快的情况下，进行全站更改可能只需要几分钟。

如果人们想要更改页面静态HTML中某些注释的措辞怎么办？或者使一个页面上的特定标题更大？或者在一个页面上的某个地方添加一点空白？这将需要一个程序员，因为与该页面相关的静态HTML字符串嵌入在一个包含SQL和过程语言代码的文件中。您不希望因为修复拼写错误或添加提示而导致服务的某个部分崩溃。

#### 小锤子

将程序员与设计师区分开的最简单方法是为每个URL创建两个文件。文件1包含SQL语句和一些过程代码，用于将本地变量或数据结构填充为来自关系数据库管理系统（RDBMS）的信息。文件1中的最后一条语句是调用一个过程，该过程将获取文件2，一个看起来像标准HTML的模板文件，其中简单地引用了文件1中准备的数据。

假设文件1命名为`index.pl`，是一个Perl脚本。按照惯例，文件2将命名为`index.template`。在准备模板时，设计师需要知道（a）在index.pl中设置的变量的名称，（b）在模板中使用美元符号引用变量，例如，`$standard_navbar`，以及（c）要向用户发送实际的美元符号或at符号字符，应该用反斜杠进行转义。模板和在index.pl中建立的本地变量的合并可以通过一次调用Perl内置的`eval`过程来完成，该过程执行标准的Perl字符串插值，即用变量`foo`的值替换`$foo`。

#### 中型锤子

如果SQL/过程脚本和HTML模板在同一目录中的不同文件中，那么一个粗心的设计师随时可能会删除、重命名或修改计算机程序。建立一个单独的目录并只在该平行树上给予设计师权限可能更有意义。例如，在photo.net上，您可能会将页面脚本放在`/web/photonet/www/`中，模板放在`/web/photonet/templates/`下。位于`/e-commerce/checkout.tcl`的脚本最后调用共享过程`return_template`。此过程首先调用Web服务器API以找出正在提供的URI。配置参数指定模板树的起点。`return_template`使用URL加上模板树根来在文件系统中查找要评估的模板。如果找到，模板（以AOLserver ADP格式，与Microsoft ASP相同的语法）将在`return_template`的调用者上下文中评估，这意味着在脚本中设置的本地变量将对ADP文件可用。

“中等锤子”方法从文件系统权限的角度完全将程序员和设计师分开。它还有一个优点，即在每个脚本的末尾调用的共享过程可以进行一些探索。这是一个偏爱仅文本页面的用户吗？如果是，是否有文本模板可用？这是一个偏好于站点默认语言以外的语言的用户吗？如果是，是否有模板可用，其中注释是用户首选的语言？

#### SQL锤子

如果一个系统已经具有广泛的基于RDBMS的版本控制和权限控制设施，将模板存储在数据库表中可能是合理的。然后，这些模板可以从浏览器中进行编辑，并且模板的更改可以作为站点整体发布工作流程的一部分进行管理。如果站点的信息架构在RDBMS表中明确表示（参见[内容管理章节](content-management)），那么将模板和模板片段与内容类型、类别和子类别一起存储在数据库中可能是合理的。

#### 重型锤子

1999年，卡尔·戈尔德斯坦（Karl Goldstein）是为一个商业在线社区构建整个信息系统的唯一程序员。社区的管理者大约变了十五次主意，关于网站应该是什么样子的。每个页面都应该有一个水平的导航栏。也许垂直的更好，实际上。但是把每个页面上的导航栏从左边移到右边。经过两三次这样的重大方向变更之后，戈尔德斯坦开发出了一个优雅而高效的系统：

+   每个页面脚本都会有一个对应的模板，例如，`register.tcl`将寻找`register.template`。

+   几乎所有的模板都会包含一个“主”标记，指示该模板仅设计用于呈现页面的一部分。

+   服务器将在与脚本相同的目录中查找`master.template`文件；如果找到，则页面脚本及其对应的模板呈现的内容将替换主模板中的`<slave>`标记，并将评估主模板的结果返回给用户。

+   当在与脚本相同的目录中找不到主模板时，服务器将在文件系统中的逐级较高级别上搜索，直到找到主模板，然后应用该模板。

下面是用户查看的内容如何由主模板和从模板分割的示例：

| 标志 | 广告横幅 |
| --- | --- |
| 导航/上下文栏 |
| 分区链接 | 内容区域 |
| 页脚 |

灰色的内容源自主模板。请注意，这并不意味着它是静态的或不特定于页面。如果模板是ASP或JSP片段，它可以执行任意复杂的计算机程序来生成页面部分内的内容。水色的内容来自每个页面的模板。

这听起来效率低下，因为需要大量的文件系统探测。然而，一旦系统投入生产，Web 服务器就可以很容易地缓存文件系统调查的结果，按照 URL。实际上，Web 服务器可以将所有模板缓存在其虚拟内存中，以实现最大速度。在开发过程中不这样做的原因是会使调试变得困难。每次更改模板时，您都必须重新启动 Web 服务器或清除缓存才能查看更改的结果。

### 模块间 API

回想一下[“用户注册和管理”章节](user-registration-and-management)中提到，我们希望人们对在线社区中的行为负责。增强责任感的一种方式是提供一个“用户贡献”页面，显示特定用户的所有贡献。在应用程序中出现一个人的名字时，它将是指向此用户贡献页面的超链接。

鉴于所有站点内容都存储在关系数据库表中，编写用户贡献页面脚本的最明显方法是查看每个独立模块的 SQL 数据模型。然后，我们可以编写一个程序，查询几十个表，找到特定用户的���有贡献。

这种方法的一个缺点是，现在我们有可能会在更改模块的数据模型时破坏代码，然而这些代码不在该模块的子目录中，并且这些代码可能是由维护各个模块的程序员之外的程序员编写的。

让我们考虑另一个应用程序：电子邮件提醒。假设您的社区提供了一个讨论论坛和一个分类广告系统，编码为独立模块。用户希望每天收到两个领域活动的汇总。每个模块可以提供完全独立的提醒机制。然而，这意味着用户每晚会收到两封电子邮件，而希望得到一封合并的电子邮件。然而，如果我们构建一个组合的电子邮件提醒系统，我们将面临与用户历史页面相同的问题：依赖于各个模块的数据模型的共享代码。

最后，让我们看看站点管理员的工作。站点管理员可能是一个忙碌的志愿者。他或她不想浪费二十次鼠标点击来查看今天的新内容。站点管理员应该能够在单个页面上查看所有模块中最近贡献的内容。这是否意味着我们将再次有一个脚本，依赖于每个模块的每个表定义？

这里有一个解决方案的提示。在 photo.net 网站上，每个模块都定义了一个“新内容”过程，该过程接受以下参数：

+   `since_when` — 我们感兴趣的最早内容的日期

+   `only_from_new_users_p` — 一个布尔值，指示我们是否要将报告限制在新用户的贡献中（对于站点管理很有用，因为新用户是不了解社区标准和规范的人）

+   `purpose` — “admin”，“email_summary”或“user”；这控制未批准内容的传递，包括指向管理选项（如批准/不批准）的链接以及报告的格式

这种过程的输出可以很简单：用于Web页面的HTML或用于电子邮件消息的纯文本。这种过程的输出可以是数据结构。这种过程的输出可以是一个XML文档，用于与XSL样式表一起呈现。重要的是，对站点范围内“新内容”感兴趣的页面不需要熟悉各个模块的数据模型，只需要了解与每个模块对应的“新内容”过程的名称。在photo.net上，这个后者任务变得很容易：当Web服务器加载每个模块时，它将其“新内容”过程名称添加到站点范围列表中。想要显示站点范围内新内容的页面循环遍历此列表，依次调用每个命名过程。

### 配置参数

可能，尽管不太雅致，可以构建一个工作的互联网应用程序，其中以下项目硬编码到每个单独页面中：

+   RDBMS用户名和密码

+   希望在事件（如新用户注册或新内容发布）时收到通知的站点管理员的电子邮件地址

+   如果Web服务器无法连接到RDBMS或出现其他错误时通知系统管理员的电子邮件地址

+   我们不喜欢的用户的IP地址

+   旧的URL和应该重定向到的新的URL

+   站点的名称

+   编辑和发布者的姓名

+   站点愿意接受的最大附件大小（也许您不希望用户将800 MB的TIFF图像作为附件上传到bboard帖子）

+   是否提供一个链接，提供页面背后的源代码

这种构建软件的古老方法被称为“在代码中放置魔法数字”。有了代码中的魔法数字，很难从一个服务中抓取几个脚本并将其应用于另一个应用程序。有了代码中的魔法数字，很难知道在人员变动后需要检查和修改多少程序。有了代码中的魔法数字，很难知道站点范围内是否一致执行规则。

您应该将这些参数存储在哪里？除了数据库用户名和密码之外，一个明显的答案似乎是“在数据库中”。有一堆键（参数名称）和一堆值（参数）。这正是数据库管理系统理想的问题。

> ````
> -- use Oracle's unique key generator
> create sequence config_param_seq start with 1;
> 
> create table config_param_keys (
> 	config_param_key_id	integer primary key,
> 	key_name		varchar(4000) not null,
> 	param_comment		varchar(4000)
> );
> 
> -- we store the values in a separate table because there might
> -- be more than one for a given key
> create table config_param_values (
> 	config_param_key_id	not null references config_param_keys,
> 	value_index		integer default 1 not null,
> 	param_value		varchar(4000) not null
> );
> 
> -- we use the Oracle operator "nextval" to get the next 
> -- value from the sequence generator
> insert into config_param_keys 
> values
> (config_param_seq.nextval, 'view_source_link_p', 'damn 6.171 instructor is making me do this');
> 
> -- we use the Oracle operator "currval" to get the last
> -- value from the sequence generator (so that rows inserted in this transaction
> -- will all have the same ID)
> insert into config_param_values
> values
> (config_param_seq.currval, 1, 't');
> 
> commit;
> 
> insert into config_param_keys 
> values
> (config_param_seq.nextval, 'redirect', 'dropping the /wtr/ directory');
> 
> insert into config_param_values
> values
> (config_param_seq.currval, 1, '/wtr/thebook/');
> 
> insert into config_param_values
> values
> (config_param_seq.currval, 2, '/panda/');
> 
> commit;
> 
> ````

在每个页面脚本的末尾，我们可以查询这些表：

> ````
> select cpv.param_value
> from config_param_keys cpk, config_param_values cpv
> where cpk.config_param_key_id = cpv.config_param_key_id
> and key_name = 'view_source_link_p'
> 
> ````

如果脚本返回带有“t”的行，则在页面底部包含“查看源代码”链接。如果没有，则没有链接。

记录重定向需要在`config_param_values`表中存储两行，一行用于“从”URL，一行用于“到”URL。当收到请求时，Web服务器将查询以确定是否存在重定向：

> ````
> select cpk.config_param_key_id
> from config_param_keys cpk, config_param_values cpv
> where cpk.config_param_key_id = cpv.config_param_key_id
> and key_name = 'redirect'
> and value_index = 1
> and param_value = :requested_url
> 
> ````

其中`:requested_url`是一个包含当前连接的 Web 客户端请求的 URL 的绑定变量。请注意，此查询仅告诉我们存在这样的重定向；它不会给出目标 URL，目标 URL 存储在`config_param_values`的另一行中。信不信由你，这里的传统做法是三路连接，包括`config_param_values`的自连接：

> ````
> select cpv2.param_value
> from 
>   config_param_keys cpk, 
>   config_param_values cpv1, 
>   config_param_values cpv2
> where cpk.config_param_key_id = cpv1.config_param_key_id
> and cpk.config_param_key_id = cpv2.config_param_key_id
> and cpk.key_name = 'redirect'
> and cpv1.value_index = 1
> and cpv1.param_value = :requested_url
> and cpv2.value_index = 2
> 
> -- that was pretty ugly; maybe we can encapsulate it in a view
> 
> create view redirects 
> as
> select cpv1.param_value as from_url, cpv2.param_value as to_url
> from 
>   config_param_keys cpk, 
>   config_param_values cpv1, 
>   config_param_values cpv2
> where cpk.config_param_key_id = cpv1.config_param_key_id
> and cpk.config_param_key_id = cpv2.config_param_key_id
> and cpk.key_name = 'redirect'
> and cpv1.value_index = 1
> and cpv2.value_index = 2
> 
> -- a couple of Oracle SQL*Plus formatting commands 
> column from_url format a25
> column to_url format a30
> 
> -- let's look at our virtual table now
> select * from redirects;
> 
> FROM_URL                  TO_URL
> ------------------------- ------------------------------
> /wtr/thebook/             /panda/
> 
> ````

除了 N 路连接之外，存储参数的这种方法有多少品味？表面上的答案是“非常有品味”。我们所有的信息都在 RDBMS 中，那里它应该在的地方。代码中没有魔法数字。参数可通过与站点上的所有其他页面相同形式的管理页面进行编辑：SQL 查询和 SQL 更新。然而，再花一点时间解决这个问题后，人们会问，“为什么我们每天要查询 RDBMS 一百万次，而这些信息每年只改变一次？”

除了品味问题之外，每个请求额外的五到十个 RDBMS 查询对数据库服务器来说是一个重大负担，这是一个互联网应用程序中最难分布到多个物理计算机的部分（参见[“Scaling”章节](scaling)），因此是最昂贵的扩展容量的层。

一个好的经验法则是 Web 脚本不应该查询 RDBMS 来确定该做什么；他们应该仅查询内容和用户数据。

为了合理的性能，配置参数应该从 Web 服务器的虚拟内存中对 Web 脚本可访问。使用多线程 Web 服务器来实现这样的方案非常简单，因为所有代码都在一个虚拟内存空间中执行：

+   查看服务器 API 文档，找到一个在服务器启动时运行代码的机制

+   构建一个内存哈希表，其中参数键是哈希表的键

+   将与键关联的参数值加载到哈希表中作为列表

+   记录一个 API，该 API 以键作为输入，并返回一个值或值列表作为输出的哈希表

哈希表是最好的，因为它提供 O[1] 的数据访问，即回答“与键 'foobar' 关联的值是什么”这个问题的时间不会随着键的数量增加而增加。在一些业余计算机语言中，内置的哈希表可能被称为“关联数组”。

如果你期望有很多配置参数，最好将一个“section”列添加到`config_param_keys`表中，并按部分和键查询。因此，例如，您可以在“discussion”和“user_registration”部分中都有一个名为“bug_report_email”的参数。然后，哈希表的键变成节名和键名的组合。

#### 使用 Microsoft .NET

配置参数被添加到 IIS/ASP.NET 应用程序的 Web.config 文件中。

例如，如果将以下内容放置在`c:\Inetpub\wwwroot\Web.config`中（假设默认IIS安装）

> ````
> <configuration>
>  <appSettings>
>   <add key="publisherEmail"
>    value="marketing@mycompany.com" />
>  </appSettings>
> </configuration>
> 
> ````

您将能够在VB .aspx页面中如下访问publisherEmail

> ````
> <%
> 
> Dim publisherEmail as String
> publisherEmail = ConfigurationSettings.AppSettings( "publisherEmail" )
> 
> %>
> 
> <html>
> <body>
> 
> ...
> 
> For further information please contact us at <%= publisherEmail %>
> 
> ...
> 
> </body>
> </html>
> 
> ````

默认情况下，配置设置适用于目录及其所有子目录。同样，默认情况下，这些设置可以被子目录中的Web.config文件中的设置覆盖。可以使用<location>标签建立更复杂的作用域和覆盖行为规则。

更多：

+   来自.NET Framework开发人员指南的"ASP.NET配置"，网址为[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconaspnetconfiguration.asp](http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconaspnetconfiguration.asp)（请注意，MSDN的人员尚未弄清楚如何使用抽象URL，并且他们还没有转换为.aspx！）

#### 使用Java Server Pages

以下是崔进生的建议，用于在使用Java Server Pages时存储和访问配置参数。

在conf/server.xml中为您的应用程序的Context规范指定参数标签。示例：

> ````
> <Context path="/myapp" docBase="myapp" debug="0"
>          reloadable="true" crossContext="true">
>   <Parameter name="companyName" value="My Company, Inc."
>              override="false"/>
> </Context>
> 
> ````

您还可以在应用程序的WEB-INF/web.xml文件中指定参数：

> ````
> <context-param>
>   <param-name>companyName</param-name>
>   <param-value>My Company, Inc.</param-value>
> </context-param>
> 
> ````

在第一个示例中，"override"属性指定您不希望此值被web.xml文件中的context-param标签覆盖。默认值为"true"（允许覆盖）。

要从servlet或JSP中检索参数，可以调用：

> ````
> getServletContext().getInitParameter("companyName");
> 
> ````

更多：

+   Context的文档：[http://jakarta.apache.org/tomcat/tomcat-4.0-doc/config/context.html](http://jakarta.apache.org/tomcat/tomcat-4.0-doc/config/context.html)

+   ServletContext的javadoc：[http://jakarta.apache.org/tomcat/tomcat-4.0-doc/servletapi/javax/servlet/ServletContext.html](http://jakarta.apache.org/tomcat/tomcat-4.0-doc/servletapi/javax/servlet/ServletContext.html)

### 练习1

在团队服务器上创建一个`/doc/`目录。在此目录中创建一个链接到开发标准文档的索引页面（`/doc/development-standards`可能是一个合理的URL，但只要清楚地从`/doc/`链接即可使用任何您喜欢的URL）。

在这份开发标准文档中，至少涵盖以下问题：

1.  URL命名：抽象与非抽象（糟糕），破折号与下划线（对许多用户来说难以阅读），拼写或缩写

1.  在表单和表单处理中使用的URL命名-这些将在相同的URL上吗，还是用户通过一系列表单进行操作将继续`/foo/bar, /foo/bar-1, /foo/bar-2`等。

1.  使用的关系型数据库管理系统

1.  用于Web脚本和关系型数据库管理系统中的过程代码的计算机语言

1.  连接到关系型数据库管理系统的方式（库，绑定变量等）

1.  变量命名约定

1.  如何记录一个模块

1.  如何记录一个共享过程

1.  如何记录Web脚本（作者，有效输入）

1.  脚本如何验证Web表单输入

1.  选择的模板策略（如果有）

1.  如何添加配置变量以及如何命名它，以便至少可以快速识别与特定模块相关的所有参数

在进行下一个练习之前，先退后一步看看您的文档。问自己：“如果明天有一位新程序员加入这个项目，并且我让她构建一个调查模块，她能在不与我交谈的情况下在我的环境中成为一个有效的一致的开发人员吗？”记住，调查模块将需要一个广泛的管理界面，用于创建调查、问题和可能的答案，以及用于查看结果的管理和用户界面，以及用于回答调查的用户界面。如果问题的答案是“哎呀，这位新程序员会不得不问我很多问题”，那就回去让您的开发标准文档更加明确，并添加一些更多的示例。

### 练习 2

在 `/doc/` 目录中记录团队的模块间 API，可能在 `/doc/intermodule-API`，并链接到文档索引页面。您的策略必须能够处理至少以下情况：

+   生成一个包含可选择天数内所有内容的站点管理员页面，每个项目旁边都有管理链接，*而页面脚本不依赖于任何模块的数据模型*

+   生成一个显示整个站点新内容的用户级页面

+   一个集中的电子邮件警报系统，用户每晚都会收到一个汇总，其中包含来自多个模块的新内容

### 保护用户免受其他用户的 HTML 攻击

从在线社区背后的服务器的基本角度来看，其工作是从用户 A 处获取文本并将其显示给用户 B。不幸的是，这种活动中存在安全风险。假设用户 A 是恶意的，并在评论正文中包含诸如`<SCRIPT>`之类的标记？当用户 B 访问包含此评论的页面时，突然间 JavaScript 可能会在他的计算机上执行，从互联网各地下载令人反感的图像，播放音乐，弹出新窗口，并最终强制用户的浏览器访问用户 A 选择的页面。

最明显的解决方案似乎是禁止所有 HTML 标记。上传的任何文本都会被扫描以查找字符 < 和 >，如果存在这些字符，则会被拒绝发布并附带解释。这在一个数学家网站上可能不会很好运作！也许他们需要在他们的帖子中使用大于和小于符号。

一个可行解决方案的开端是一个过程，可能命名为`quoteHTML`，它接受用户上传的文本字符串并执行以下转换：

+   将`<`字符转换为`&lt;`。

+   将`>`字符转换为`&gt;`。

+   将`&`字符转换为`&amp;`。

如果您的页面脚本在向浏览器输出用户上传的内容时调用此过程，那么任何浏览器都不会将用户上传的数据解释为 HTML 标记。

这对于诸如`first_names`、`last_name`、`street_address`、主题摘要行等领域非常有效，这些领域不需要HTML标签。然而，对于从用户那里获得的一些较长文档，允许他们使用一组受限制的HTML标签（如B、I、EM、P、BR、UL、LI等）可能是有益的。如果您要将HTML存储在数据库中一次，并且每天提供数千次服务，最好在上传时检查合法标签。检查不允许的标签（如SCRIPT、DIV和FONT）的问题在于HTML在法律上和事实上不断扩展。除非您想要负责跟踪所有新HTML标签可能导致浏览器行为的方式，否则最好检查批准的标签。无论哪种方式，您都希望允许或不允许的标签列表保存在易于修改的配置文件中。此外，您可能希望对允许使用的标签（如B或I）进行一些验证。如果用户犯了一个错误，忘记关闭其中一个标签，可能会导致100条评论以不同寻常的字体样式呈现。

### 练习 3

记录您的团队防止一个用户使用恶意HTML攻击其他用户的方法。您对这种基础设施的文档应包括过程名称和如何使用这些过程的示例。

### 时间与动作

本章中的所有练习都应由整个团队完成。认真对待任务的团队应该花大约3小时一起达成一致并记录标准。然后他们可能决定重新调整一些旧代码以符合这些标准，这可能需要另外5到10个程序员小时。第二步是可选的，尽管在课程结束时，我们希望所有项目在内部保持一致。

## 讨论

* * *

讨论论坛是人类之间计算机支持合作的最基本工具之一。用户A可以发布问题。用户B可以发布答案。用户C可以查看问题和答案，并从交流中学习。在*线程化*论坛中，用户D可以选择回复用户A的问题或用户B的回答。在*问答格式*论坛中，用户D、E和F可以回复用户A的问题，回复将按照提交的顺序简单呈现。通过对呈现层进行微小调整，讨论论坛系统可以作为个人可评论的网络日志运行。

在本章中，您将原型化一个讨论论坛，进行可用性测试，然后根据观察用户的结果对系统进行改进。

### 讨论论坛作为社区？

一个设计良好的讨论论坛本身就可以满足可持续在线学习社区的所有要求。请记住，这些元素包括以下内容：

1.  由专家撰写的磁铁内容

1.  合作手段

1.  强大的浏览和搜索设施，既可以浏览和搜索磁铁内容，也可以浏览和搜索贡献内容

1.  管理委员会的委派方式

1.  识别对社区施加不当负担的成员以及改变他们的行为和/或将其排除在社区之外的方式

1.  软件扩展的一种方式是由社区成员自己完成

| 航空本身并不是固有的危险。但与海洋相比，它对任何的粗心、无能或疏忽都极其不宽容。-- A. G. Lamplugh 飞行员，1930年代 |
| --- |

论坛作为社区的早期例子是 USENET，始于 1979 年，老一辈人称之为 "NetNews"，年轻人称之为 "Google Groups"。每个新闻组都是一个或多或少独立的人群，他们对特定主题感兴趣，通过分级讨论论坛进行合作。一个很好的例子是[`rec.aviation.soaring`](http://groups.google.com/groups?q=rec.aviation.soaring&hl=en)，人们在这里讨论在没有发动机的飞机中飞行。

在 USENET 群组中，磁铁内容可以是来自公认专家的任何较长的帖子。请记住，像 `rec.aviation.soaring` 这样的群体使用者数量相当少 — 大多数人在小飞机上会感到紧张，甚至在没有发动机的小飞机上会更加紧张。Marc Smith 的 Netscan 服务（[netscan.research.microsoft.com](http://netscan.research.microsoft.com)）对 2004 年 10 月的活动进行的分析显示，该群组只有 174 位 "回头客"。因此，这些核心用户很容易通过姓名或电子邮件地址相互识别。在新闻组中典型的磁铁内容帖子是 FAQ 或经常问的问题总结，其中每个问题都有群体专家们商定的答案。

| 如果发动机因任何原因停止，你就会坠落，就是这样！— Clyde Cessna |
| --- |

USENET 群组中的合作方式是任何成员都可以开始一个新主题或回复现有主题中的消息。在 USENET 的早期，浏览和搜索的方式对于最新消息来说还算不错，但对于从旧的交流中学习来说则很糟糕或根本不存在。从 1990 年代中期开始，诸如 DejaNews 这样的基于网络的搜索引擎提供了快速简便地访问旧消息的途径。

USENET 传统上在第四个必要元素（"管理委派手段"）上表现较弱。没有足够的人自愿担任管理者，软件无法将单个论坛的管理工作分配给多个管理者，新闻协议存在安全漏洞，即使在受管理的群组中也会传递商业垃圾邮件。要了解大约在 2001 年的技术现状，请阅读[http://www.landfield.com/usenet/moderators/handbook/](http://www.landfield.com/usenet/moderators/handbook/)。要了解垃圾邮件的历史讨论，请参阅 Brad Templeton 的“spam 一词的起源”[http://www.templetons.com/brad/spamterm.html](http://www.templetons.com/brad/spamterm.html)，这个网站包含许多关于互联网历史的其他有趣文章。

| 飞行本质上是危险的。我们喜欢用巧妙的修辞和令人安心的统计数据来掩盖这一点，但这些事实仍然存在：重力是恒定而强���的，速度致命。结合起来，它们尤为破坏性。— 丹·曼宁汉 |
| --- |

USENET 在第 5 个元素上表现出了严重不足："排除烦人人员的手段"。大多数 USENET 客户端包括“bozo 过滤器”，使个人用户可以过滤掉持续麻烦的发帖者的消息。但是没有一种集体方式可以排除那些始终发布无关主题、向群组发送垃圾邮件、虐待他人或以其他方式变得不受欢迎的人。

关于第 6 个元素，即由社区成员自行扩展软件，USENET 做得非常出色。USENET 服务器和客户端往往是单片的 C 程序，小的修改可能会产生灾难性后果。另一方面，早期互联网的普通用户是熟练的软件开发人员。因此，即使不是每个 USENET 用户都是 USENET 工具的程序员，至少可以肯定每个 USENET 工具的程序员都是 USENET 的用户。

### 超越 USENET

如果您构建的在线学习社区仅仅和 USENET 一样好，那就要恭喜自己了。Google USENET 存档包含了二十年间的 7 亿条消息。数十万人已经得到了他们问题的答案，如图 8.1 所示。[![](../Images/212b4ea1a1e65f6736805a4a7ff1c0e0.jpg)](http://groups-beta.google.com/group/rec.aviation.soaring/browse_thread/thread/666ed14e676ce92e)。

**图 8.1：**2001 年 12 月 USENET 在 `rec.aviation.soaring` 群组中关于在滑翔机机翼上安装摄像头的交流。请注意，第一个答案在问题发布不到两个小时后就出现了。

在构建我们自己的基于数据库的讨论论坛系统时，我们可以在传统的 USENET 系统上添加一些简单的改进：

+   一个可选的“当有回复时给我发邮件”的字段

+   电子邮件摘要或即时提醒

+   实时全文索引（假设您的关系型数据库管理系统支持）

+   通过 SSL 安全传输数据到和从 bboard

+   通过管理员页面进行协作管理，删除陈旧/丑陋/任何内容的消息

+   可以按类别浏览旧帖子

通过关注第 5 个元素可以获得更显著的改进："排除烦人的人的方法。" 您的软件可以执行 SQL 查询"显示由于冗余而被管理员删除的问题的提交者"，然后自动欢迎这些用户回到论坛，并在插页页上解释如何搜索和浏览已归档的主题。如果在线社区缺乏管理员时间，那么查询那些发布帖子导致管理员干预的用户将是很有意义的。如果发现 0.1% 的用户消耗了 50% 的管理员时间，也许最好是禁止这些少数用户，从而将社区的可用管理资源增加一倍。

随着学期的进行，您会发现建立自己的讨论论坛的另一个优势，即它成为您服务的一个集成部分。用户在不同领域的所有贡献，包括讨论论坛，都可以从一个数据库中查询，并在一个页面上查看。

### 练习 1

访问五个公共互联网站点的讨论论坛，其中一个可以是 photo.net 上的 Medium Format Digest 论坛（[http://www.photo.net/bboard/q-and-a?topic_id=35](http://www.photo.net/bboard/q-and-a?topic_id=35)）。对于每个站点，收集以下统计信息：

+   给定一个已注册用户，发帖所需的点击次数

+   从顶层论坛页面到单个主题所需的点击次数

+   如果一个主题内有 20 条帖子，则查看所有帖子内所有文本所需的点击次数

+   查看特定类别中所有已归档帖子的主题行所需的点击次数

列出您认为这五个网站中最好的用户界面和客户服务功能，并简要解释每个功能为什么好。

### 一个论坛还是多个论坛？

| 我当然对和声没有感觉，而 Schoenberg 认为这会让我无法写音乐。他说，'你会遇到一个你无法逾越的障碍。' 所以我说，'我会用头撞墙。' —约翰·凯奇 |
| --- |

一个网站应该有多少个论坛？让我们考虑一个面向音乐爱好者的网站。一个论坛就足够了吗？也许不够。古典音乐爱好者会对[Pat Boone翻唱AC-DC的《It's a Long Way to the Top (If You Wanna Rock 'N' Roll)》](http://www.amazon.com/exec/obidos/ASIN/B000005KOE/pgreenspun-20)感兴趣吗？所以把讨论分成至少两个论坛是个好主意：古典和流行。假设一个Pat Boone的粉丝某天进入流行论坛，碰到了有关[Ice Cube的《Death Certificate》歌词](http://www.amazon.com/exec/obidos/ASIN/B000003B7W/pgreenspun-20)或者[Prodigy的《Fat of the Land》MP3](http://www.amazon.com/exec/obidos/ASIN/B000002NFM/pgreenspun-20)的讨论？显然，我们需要把流行论坛分成基督教流行、Techno和Rap。我们也期待着很多披头士的粉丝。他们会倾向于哪个论坛呢？也许我们需要一个60年代摇滚论坛。在古典音乐方面，有很多热衷于大歌剧的爱好者，他们不想被关于古典音乐的真实乐器演奏的讨论分散注意力。讨论约翰·凯奇的《四分钟三十三秒》的精致现代音乐爱好者不想浪费时间讨论18和19世纪的化石。如果我们把注意力转向各种风格的爵士乐...

| 如果两分钟后仍然感到无聊，那么试试四分钟。如果仍然无聊，那么八分钟。然后十六分钟。然后三十二分钟。最终你会发现它一点也不无聊。——约翰·凯奇 |
| --- |

在我们的音乐网站上创建100个独立论坛是很容易的。事实上，USENET包含[50多个rec.music.*群组](http://groups.google.com/groups?hl=en&group=rec.music)，例如`rec.music.beatles.moderated`。这只是冰山一角，因为备选层次结构包含[700多个alt.music.*群组](http://groups.google.com/groups?hl=en&group=alt.music)，包括`alt.music.celine-dion`和`alt.music.j-s-bach`。如果USENET可以支持近1000个讨论论坛，那么一个受欢迎的综合性音乐网站至少应该有100个。

也许不够。

| 她的声音就像新泽西州的国歌在电动剃须刀上演奏一样。——《灯火闪耀的城市》(Bright Lights, Big City) by Jay McInerney |
| --- |

当讨论分散时，对于社区来说很难起步。如果有 50 个用户和 100 个论坛，这些用户将如何找到彼此？平均访问将导致用户得出结论：社区不活跃。这样的用户不太可能返回或将网站推荐给朋友。即使社区足够大以支持众多论坛，以分散的方式呈现讨论也会给兴趣广泛的用户带来额外的工作。假设一个音乐学者来到 USENET，想看看是否有关于巴赫的“舒勃勒赞美诗”及其对后来作曲家的影响的最新讨论。这就像访问[`alt.music.j-s-bach`](http://groups.google.com/groups?hl=en&group=alt.music.j-s-bach)那样简单。如果那位学者想要查看有关席琳·迪翁的“我的心将继续前进”的最新帖子，他或她将不得不单独扫描[`alt.music.celine-dion`](http://groups.google.com/groups?hl=en&group=alt.music.celine-dion)。

一个拥有单一讨论论坛的蓬勃发展社区的一个很好的例子是[slashdot.org](http://www.slashdot.org)。很容易找到 slashdot 上正在活跃讨论的主题：查看首页。

可以同时在同一网站上采用“一个论坛”和“多个论坛”的方法。例如，请查看[http://www.photo.net/bboard/](http://www.photo.net/bboard/)（静态副本位于[http://philip.greenspun.com/seia/images-discussion/photonet-bboard-original.htm](images-discussion/photonet-bboard-original.htm)）。有单独的中画幅、自然摄影和照片评论论坛。用户要浏览这三个论坛的新帖子将需要七次鼠标点击：进入此页面、进入中画幅、返回、进入自然、返回、进入评论。然而，通过不同的 SQL 查询，来自所有这些完全相同论坛的帖子可以组合在一个页面上，就像[http://www.photo.net/bboard/unified/](http://www.photo.net/bboard/unified/)中那样（静态副本位于[http://philip.greenspun.com/seia/images-discussion/photonet-bboard-unified.htm](images-discussion/photonet-bboard-unified.htm)）。特定论坛主题的帖子可以通过特殊的发布者选择的颜色或图标来区分。假设用户发现照片评论论坛令人不堪重负和无趣。通过点击顶部的“自定义论坛”链接（静态副本位于[http://philip.greenspun.com/seia/images-discussion/unified-forum-personalization.htm](images-discussion/unified-forum-personalization.htm)）并取消选中不再感兴趣的论坛，可以将这些帖子从他或她的个性化统一视图中排除。

### 练习 2：设计用户体验

弄清楚你的服务应该是一个论坛，一个带有分类的论坛，几个论坛，每个论坛都有分类，还是其他什么形式。记录用户的页面流程（回想一下[“用户注册”章节中的示例页面流程图](napkin-drawings-from-panda/13.4.gif)）。

### 练习 3：文档化数据模型

记录你打算如何在你在[“内容管理”章节](content-management)中定义的内容存储库表之间分发讨论论坛数据。

### 练习 4：构建用户页面

实施你在练习 2 中设计的用户体验。

### 练习 5：构建管理员页面

设计一组管理员页面。在这种情况下，通常最好从必须完成的任务的必需列表开始。然后尝试构建一个页面流程，让管理员能够尽可能少地点击来完成这些任务。

从“用户注册”章节回想一个重要的用户界面原则要记住：对于大多数计算机用户来说，首先选择名词，然后选择动词更为自然。例如，论坛主持人可能首先点击消息的主题行以选择它，然后在随后的页面上选择要对此消息执行的操作：删除、批准、评分、分类等。从技术上讲，可以构建一个系统，其中首先询问主持人“您想删除一些消息吗？”然后提示要删除的消息。然而，这不是苹果Macintosh的设计方式，因此任何使用过Macintosh用户界面或其衍生产品的人，尤其是Microsoft Windows，都会习惯于名词-动词的顺序。

这是你的社区，这些是你的用户。因此，从长远来看，只有你才能知道什么样的管理行动是最需要的。但至少，你应该支持以下几点：

+   找出最活跃的贡献者

+   选择一个贡献者成为共同主持人（可能来自上述列表）

+   批准或不批准发布或主题（这可能由您的内容管理系统的更通用页面处理，但请记住，管理讨论论坛应该是一个非常简化的流程）；注意，这些功能可以集成到用户页面中，但仅对具有管理员权限的已登录用户启用。

### 课堂演示

此时，我们建议团队展示他们的功能性讨论论坛实现。为了让观众能够评估界面的可操作性，论坛应预先加载具有真实长度的问题和答案，必要时可以从Google Groups复制材料。

建议的演示大纲如下：

+   解释预期使用讨论子系统的人员类型，例如，可能只有网站管理员（30秒）

+   在未登录或以普通访客身份登录的情况下，展示显示所有论坛（如果有多个）、论坛内的问题以及单个主题内的问题和答案的页面（1分钟）

+   演示回答现有问题/添加到现有主题（30秒）

+   演示提出新问题/开始新主题（30秒）

+   以论坛管理员或站点管理员身份登录（15秒）

+   演示不赞成或对帖子进行管理（30秒）

+   演示查看论坛使用情况和用户参与水平的统计数据（1分钟）

+   展示显示单个主题（一个问题，多个答案）的页面的源代码，其中SQL查询（或查询）被突出显示（1分钟）

+   展示该查询或那些查询的执行计划，即在为该项目选择的RDBMS中可用的任何SQL性能跟踪工具的输出（1分钟）

演示应该附有手册，显示支持讨论的数据模型，由显示讨论主题的URL调用的任何SQL代码（从嵌入其中的任何命令式语言脚本中提取），以及查询跟踪的结果。

### 可用性

此时，您的讨论论坛应该可以正常运行。用户可以注册。用户可以提问。用户可以发布答案。可用吗？嗯，考虑到大多数计算机程序曾经被其创建者认为是完美的。只有在与真实用户的接触中，大多数问题才会显现出来。

[![你也可以成为一个用户。男洗手间内部。新加坡](http://www.photo.net/photo/2000pcd1672/you-could-be-a-user-yourself-56.1.jpg)](http://www.photo.net/photo/2000pcd1672/you-could-be-a-user-yourself-56.tcl) [![使用后不冲厕所是一种冒犯行为。男洗手间内部。新加坡](http://www.photo.net/photo/2000pcd1672/it-is-an-offense-not-to-flush-the-toilet-after-use-57.1.jpg)](http://www.photo.net/photo/2000pcd1672/it-is-an-offense-not-to-flush-the-toilet-after-use-57.tcl)

新鲜出炉的互联网应用程序与首批用户之间的这些相遇对所有当事人来说变得越来越令人震惊。一个原因是巨大且不断增长的*用户体验差距*。1994年，平均网络用户是一位在桌子上放着Unix机器的研究人员。很可能用户知道如何编写至少简单的计算机程序。平均网页是纯HTML 2.0，没有脚本或其他活动组件。所有网页的工作方式都是一样的：你阅读黑色文字，点击蓝色文字，紫色文字提醒你已经访问过链接。一旦学会如何使用第一个网站，你就知道如何使用随后访问的所有网站。

用户体验差距变得更大是因为用户越来越不精通，而应用程序变得更加复杂。2005年，普通网络用户是第一次使用计算机的用户，而网络浏览器可能是他们唯一知道如何使用的应用程序。尽管这些用户明显无法应对复杂的用户界面，但网站已经被装饰成了具有 JavaScript、ActiveX、Java、Flash 等功能，使得它们难以使用且彼此之间差异巨大，就像旧的 Unix 应用程序一样。无法或不愿处理定制用户界面的用户已经用鼠标投票了。他们在亚马逊购物。他们在谷歌搜索。他们从雅虎！和纽约时报获取信息。

![](images-discussion/user-experience-gap.gif)

**图 8.2：** 随着互联网的发展，应用程序变得越来越复杂且难以使用，而*普通*用户变得越来越缺乏经验。来源：马克·赫斯特，[www.goodexperience.com](http://www.goodexperience.com)。

特立独行的想法对于杂志和电视广告是有意义的。当用户花费相同的30秒吸收信息时，不同是好的。但是，如果不同意味着用户需要额外的时间或额外的点击才能完成所需任务，那就不好了。一些研究表明，每多一次点击，用户放弃网站的可能性就有50%。

| 作为决定未来是成为工程师还是继续上商学院的辅助，需要注意的是 Webvan CEO 乔治·沙欣将公司搞垮，然后在破产申请前不久辞职，领取每年 $375,000 的终身退休金。 |
| --- |

2000年中期，Webvan 收购了竞争对手 HomeGrocer，将旧的 HomeGrocer 用户转换为新的 Webvan 用户界面。订单量下降了一半以上。由于 Webvan 软件的可用性较差，HomeGrocer 业务从勉强盈亏转为大量亏损。最终，Webvan 破产了，带走了12亿美元的投资资金。

人们如何可能追随他们认为是自己良好品味的东西，而不是模仿成功的互联网服务（例如，Yahoo！，Amazon，Google）或听取用户的意见？人们为什么会继续相信自己的想法的价值，即使红色墨水开始主导他们的财务报告？康奈尔大学的实验心理学家贾斯汀·克鲁格和大卫·邓宁也对此感到困惑，并在《无能和不自知：如何难以认识自己的无能导致自我评估过高》（《个性与社会心理学杂志》；第77卷，第6期，第1121-1134页；[http://www.phule.net/mirrors/unskilled-and-unaware.html](http://www.phule.net/mirrors/unskilled-and-unaware.html)）中写出了他们的发现。克鲁格和邓宁发现，技能排名在第12百分位数的人估计自己在第62百分位数。此外，这些无能的人在看到同龄人的表现范围时未能重新校准自己。作者得出结论：“在某一领域知识有限的人承受着双重负担：他们不仅得出错误的结论和犯下令人遗憾的错误，而且他们的无能使他们无法意识到这一点。”

![](images-discussion/n-users-to-find-problems.gif)

**图8.3：** 来源：“为什么只需要与5名用户进行测试” by Jakob Nielsen；[http://www.useit.com/alertbox/20000319.html](http://www.useit.com/alertbox/20000319.html)

### 练习6：可用性测试

| 科学家是那些将其结果与自然相比较的人。工程师是那些将其结果与人类需求相比较的人。计算机科学家是那些不衡量自己结果的人。 — 我们 |
| --- |

理想的可用性测试包括以下元素：

1.  一个与您期望的普通用户相当的计算机和互联网经验的测试对象

1.  一组任务，您希望测试对象尝试完成

1.  为测试对象提供一个安静舒适的环境

1.  无需产品开发人员的帮助

1.  通过单向镜观察测试对象

1.  录制测试对象的体验视频以供后续研究

对您的讨论论坛软件进行可用性测试，包括上述列表中的1-4元素。您应该从朋友中找到至少四名测试者—*不要选择任何正在上这门课程的人*（同学会有太多潜意识的期望）。连续运行您的可用性测试对象，一个接一个，您的整个团队观察并记录发生的情况。请测试对象大声表达他们的想法。测试对象完成任务需要多长时间？测试对象是否在任何步骤上遇到困难？测试对象是否在任何时候表明对适当的下一步骤感到困惑？

使用以下任务脚本（将这些内容复制并粘贴到一个单独的文档中并打印出来，在填写括号部分后），不提供额外提示：

1.  从站点主页开始作为未注册用户，找到站点上向其他用户提问的区域（如果你无法在3分钟内完成此任务，或者此页面上的任何其他任务，请放弃并继续进行）。

1.  通读现有的问题和回答，确定是否已经提出并回答了*[已经提出的某个问题]*；如果没有，就在该主题上发布一个问题（必要时注册）。

1.  通读现有的问题和回答，确定是否已经提出并回答了*[尚未提出的某个问题]*；如果没有，就在该主题上发布一个问题。

1.  注销。

1.  使用*[用户/密码]*的现有用户名/密码登录并尝试在讨论论坛中找到所有未答复的问题。

1.  回答你自己几分钟前发布的问题，假装成这个其他用户。

1.  注销。

1.  使用*[管理员用户名/密码]*的现有用户名/密码登录并找到管理员页面。

1.  删除之前创建的讨论论坛线程。

1.  注销。

在测试主体之间，清理他们可能在数据库表中留下的任何行。如果你的第一个主体有灾难性的经历，请考虑休息几个小时来修复你的软件，在继续进行第二个主体之前添加链接和注释等。

离主题尽可能远的站立，同时仍能看到计算机屏幕并听到主题的评论。强迫自己保持绝对沉默。如果主题完全困惑并随机点击，请让主题继续直到他或她解决问题。记录每个主题完成每个任务所需的秒数。

在你的团队服务器上的`/doc/testing/discussion-usability`上发布一份报告。这份报告将包含你从这次测试中学到的内容的摘要，包括平均任务时间和平均总时间（我们可以用这些来比较各个团队解决方案的效率）。报告应包含超链接到子页面，这些子页面包含个别用户会话的记录，每个测试主体说了什么，以及发生了什么。从你的主要文档索引页链接到你的报告。

### 教育讨论

从介绍中回想一下，我们在阅读这篇文章时的目标是建立一个在线*学习*社区。一个活跃的讨论论坛可能是大量会员间的教育活动的证据，或者它只是一个吵闹的地方，让喋喋不休的人享受他们的名字出现在印刷品上。适度是对那些不对原问题进行响应或对想要学习的人没有帮助的帖子的第一道防线。

在讨论论坛中增加更多结构是值得考虑的选择，尤其是如果您的讨论论坛支持一个有组织的班级。 哈佛法学院（HLS）的伯克曼中心在这方面是开拓者。 HLS的老师对标准讨论论坛系统中有利于早期回答者的偏见感到不满。 对于问题的第一个回答者会得到最多的读者，因为它靠近页面顶部，所以成为第一个回答者可能会更令人自豪，而不是花更多时间来制作一个经过深思熟虑的回答。 这个缺点通过编写他们所称的*半同步*讨论论坛得到了解决。 回答会在一段时间内收集，但直到达到回答截止日期才公开。 该系统称为烤肉架。

烤肉架的另一个能力是能够随机分配参与者来回答帖子。 例如，班级中的每个学生都必须在回答问题的文章中发表一篇文章。 截止日期过后，这些文章会公开。 然后，烤肉架会为每个参与者分配回答特定文章的任务。 每个学生都必须写一篇文章。 每篇文章都会得到回答。 特别好或有争议的文章可能会得到额外的回答。 特别喜欢大声发表意见的参与者可能会选择回答许多文章。

有关烤肉架更多信息，请访问[http://h2o.law.harvard.edu](http://h2o.law.harvard.edu)，以了解更多信息，尝试一下，或下载软件。

假设您的在线学习社区更加开放和流动。 您不能要求特定的人完全回答问题，也不能要求人们按照任何时间表回答问题。 有没有什么可以通过软件来确保所有问题都得到适当回答的方法？ 是的！ 构建*服务器中介指导*。

服务器中介指导至少需要两个东西：（1）将新手成员（受指导者）与经验丰富的成员（导师）联系起来的机制，以及（2）询问发布问题的人是否已经得到了充分的回答。 为了使服务尽可能有效，您可能还想至少添加以下内容：（3）服务器向将导师置之不理的新手自动提醒，以及（4）奖励、排名和区分排印，以表彰回答了很多问题和指导了很多新手的社区成员。

想象以下的互动：

+   乔·新手以前从未养过水族箱，他去了当地的宠物商店，并被非洲丽鱼缸里聪明多彩的鱼吸引住了。

+   乔·新手在谷歌搜索后，访问了world-o-cichlids.org，阅读了关于生活在马拉维湖的鱼类的文章，并发现他提出了额外的问题，他在讨论论坛上发表了这些问题。

+   受到回答他问题的电子邮件通知的吸引，乔返回到world-o-cichlids.org进行筛选。一旦乔登录，他的"工作区"页面就会显示出他提出的所有问题，所有这些问题最初都标记为"待解决"。由于一些困难来自于冲突的回答，乔点击了"获得导师页面"，解释说他是一个完全的初学者，目标是养非洲慈鲷。

+   有经验的简访问了"成为导师页面"，并浏览了请求，发现大多数寻求帮助的人都想养南美慈鲷，而她对此毫无经验。然而，简已经养了一个非洲鱼缸五年了，并且对自己能够帮助乔感到自信。她同意成为乔的导师。

+   简的"工作区"页面现在包含一个子部分，涉及她对乔的辅导，并列出了他当前的待解决问题。简点击一个问题标题，发现当前的回答都不够充分，于是发布了她自己的权威答案。

+   一周后，乔回到了world-o-cichlids.org，发现他的"待解决"问题列表变得相当长，实际上许多这些问题对他来说已经不再相关。他点击一个问题旁边的"关闭"按钮，服务器询问他："哪个回答实际上回答了你的问题。" 乔点击了Ned Malawinut的一个回答，并记录到数据库中：（1）问题已经得到充分回答，不应再出现在导师的工作区中；（2）Ned Malawinut提供了一个被另一名成员认为有用的答案。

+   乔有一个他认为可能很荒谬的问题，害怕向整个社区尝试。在发布问题时，他勾选了"最初只向我的导师显示"选项，问题通过电子邮件发送给简，并出现在她的工作区中。

+   简回到服务器，决定乔的问题并不那么容易回答。她将其标记为释放给一般会员。

+   两周后，简收到了来自world-o-cichlids.org服务器的一封电子邮件。她的电子邮件主要是一些她一直在关注的讨论线程的摘要，但最上面有一个注释："你已经超过一周没有登录了，而你应该辅导的乔已经在五天内累积了三个问题，这些问题还没有得到充分回答。" （这种督促机制解决了一家大型管理咨询公司调查员工时发现的问题：“你在指导谁？”和“谁在指导你？”当匹配这些回答时，惊人地发现几乎没有重叠！）

你如何估计构建完整用户体验示例所需的工作量？首先看一下你将要添加到系统中的新表格和列的数量，以及服务器将要响应的新URL的数量。然后尝试找到一个你已经为这个项目构建的具有类似数量表格和页面脚本的子系统。实现工作量应该是可比较的。

让我们先从数据模型开始。为了支持对导师的请求和分配，你至少需要一个表，`mentor_mentee_map`，其中包括以下列：`mentee`、`mentor`（如果未分配，则为NULL）、`date_of_request`、`date_of_assignment`、`mentee_goal`。为了支持查询“当前连接的成员是导师”并为简构建工作空间子页面，你将想在`mentor`列上添加一个索引。为了支持查询“是否有应该被通知的导师，关于成员发布的消息”，你会在`mentee`列上添加一个索引。如果你将这个索引拼接在`mentee, mentor`上，它将帮助数据库有效地识别导师的未解决请求（`mentor`为空）以供“成为导师页面”使用。

尝试支持开放/关闭问题状态显示和查询“哪些成员回答了很多问题？”可能会让你后悔你在前面的练习和/或“内容管理”章节练习中做出的一些数据模型决策。在“内容管理”章节中，我们有一个标题询问“讨论有什么不同？”，在这之上建议`content_raw`表可以用来支持论坛的问题和答案。如果你选择了这条路线并正在实现指导用户体验，这就是讨论与站点上其余内容有些不同的地方。你需要一种方法在数据库管理系统中表示讨论论坛问题是开放还是关闭的。如果你在`content_raw`表中添加了一个`discussion_forum_question_status`列，那么每当内容项不是讨论论坛问题时，你就会有一个NULL列值。这并不是很干净的。你可能还会添加一个`closed_question_p`布尔列，以指示一个论坛帖子是否被原始提问者标识为已回答问题。对于超过99％的内容项，这将是NULL。这不是一个存储效率问题，但有点丑陋。

除了添加列之外，还可以构建一种记录哪些问题是开放的、已关闭的以及哪些答案关闭了它们的“包包”式表格。要决定这种方法是否合理，值得先问一下“在多少查询中需要将辅助表JOIN进来？”当展示文章和评论时，您不需要这张表。当向公共用户即未登录用户展示讨论论坛页面时，讨论论坛页面脚本不需要表格数据。只有在向成员提供工作区页面和向已登录成员提供个别讨论论坛线程时，您可能需要这些数据。也许考虑一个如下形式的表格是值得的：

> ````
> -- content_id is the primary key here; it is possible to have at most
> -- one row in this table for a row in the content_raw table
> 
> create table discussion_question_status (
>        content_id   not null primary key references content_raw,
>        status       varchar(10) check (status in ('open', 'closed')),
>        -- if the question is closed the next column will contain
>        -- the content_id of the posting that closed it
>        closed_by    references content_raw
> );
> 
> -- make it fast to figure out whether a posting closed a question
> create index discussion_question_status_by_closed_by on
> discussion_question_status(closed_by);
> 
> ````

随着社区对该系统的经验增加，它可能最终会希望更突出来自有写好答案历史的成员的回应。在一个完全规范化的数据模型中，对于每个显示的答案，服务器都必须统计作者的旧答案数量，并查询`discussion_question_status`表以找出其中有多少被标记为关闭问题的百分比。在实践中，您可能希望将一个非规范化的指标保留为`users`表中的额外列或列，也许是`n_answers_posted`和`n_answers_closing`列，这些计数由每晚的批量更新或数据库触发器维护。

支持“最初仅向我的导师显示”的新内容选项需要向`content_raw`表添加一个`show_only_to_mentor`列，在其中可以用于讨论论坛帖子、文章评论以及任何其他内容项。而不是更改使用内容表的所有页面，更新这些表所使用的SQL视图，例如`articles_approved`，以排除仅应向导师显示的内容，可能会更容易些。

需要一些新的页面脚本，至少包括以下内容：

+   /workspace — 一个页面或侧边栏，为已登录成员提供链接到之前提出的问题以及可能的其他信息，例如，自上次访问以来的新内容，以前标记为有趣的成员的最新内容等。导师查看此页面时，还将提供作者标记为“仅向我的导师显示”的内容的链接。

+   /mentoring/request-form — 一个页面，成员可以在其中注册请求导师。

+   /mentoring/request-confirm — 处理上述表单并向`mentor_mentee_map`表添加一行的脚本。

+   /mentoring/sign-up — 显示请求导师的成员页面，显示他们请求的前200个字符及以上。

+   /mentoring/request-detail — 一个展示成员请求导师更多详细信息的点击页面。

+   /mentoring/sign-up-confirm — 一个脚本，接受成员作为导师的同意，并更新`mentor_mentee_map`表中的一行。

+   /mentoring/admin/ —— 显示服务的摘要统计信息的页面

以下页面可能需要进行修改：

+   页面上将添加按钮，显示讨论论坛的问答交流，用于“标记此答案作为关闭主题”，仅显示给提问者，并且仅在问题之前未被标记为关闭时显示。

+   显示社区成员个人资料的页面将增加有关被指导成员数量和提交关闭问题响应数量的信息

在本课程中，您无需实现所有这些宏伟的想法，实际上当社区刚刚起步时，一些想法并不合理，因为成员数量很少。然而，如果其中一些想法让您感兴趣，请考虑将它们添加到您的项目实施计划中。

### 练习7：完善计划

为改进讨论论坛系统制定一个计划，包括对数据模型、页面流程、导航链接、页面布局、注释（帮助文本）等的任何更改。将这个计划放在团队服务器上的`/doc/planning/YYYYMMDD-discussion`路径下。（如果文件名以年-月-日开头命名，它们将按创建顺序排序。）

### 练习8：客户签字确认

要求您的客户访问讨论论坛用户和管理员页面。要求您的客户查看您的可用性测试结果和完善计划。这是一个展示您方法的可靠性的好机会。如果您的客户通过电子邮件回复，请将其作为此练习的答案。如果您的客户口头回复，请将该对话记录下来作为答案。

### 练习9：执行

在与助教协商后，执行您计划中的改进。

### 时间与动作

掌握Web/db脚本基础的一名程序员通常可以在8小时内快速创建一个基本的问答论坛。团队需要花大约一个小时准备一个良好的课堂展示。团队通常需要花费3小时进行用户测试和撰写报告。与客户沟通和完善论坛通常需要至少与初始开发工作一样长的时间。

## 向您的社区添加移动用户

* * *

在本教材的["规划"章节](../planning)中关于可持续在线社区的原则中，请注意以下内容未被提及：

1.  等待机器启动的手段

1.  将用户锁定在他们的桌子上的手段

1.  产生重复性劳损伤害的手段

尽管在我们撰写本章节时（2005年2月），各国的替代方案在流行程度上有所不同，但没有理由认为桌面计算机程序如Mozilla Firefox和Microsoft Internet Explorer是参与在线社区的最佳方式。

在本章中，您将学习如何向使用小型移动设备连接的用户开放您的社区。

### 以用户身份行动

如果闭上眼睛想象一个参与你社区的人，这种参与会是什么样子？到目前为止你考虑过的用户可能会坐在桌子前，手指以每分钟六十个单词的速度在键盘上敲击，目光集中在一个20英寸的屏幕上。相比之下，移动用户可能正在繁忙的街道上行走，或者从山顶俯视。他们的屏幕可能只有几英寸宽，他们可能每分钟只能输入五到十个单词。什么样的内容和参与方式最适合这类用户？

### 练习 1

无论是使用手机还是本章后面讨论的模拟器之一，都可以使用移动互联网

+   查找你所在城市的天气预报

+   获取 IBM 的股票报价

+   在字典中查找“ineluctable”的含义

+   从 amazon.com 订购一本书（至少到最后结账页面）

+   访问 www.photo.net 并找到最新提出的问题

对于每个任务，记录完成任务所需的时间。然后使用桌面 HTML 浏览器重复这些任务，并记录每个任务所需的时间。

### 练习 2

想出两到三项对移动用户有价值的学习社区服务。您可能会发现以下准则有用：

+   **及时性。** 一个社区的持续发展依赖于其成员的积极参与。尽管成员们经常在时间上分开，但任何参与过激烈的公告板辩论、在线拍卖或聊天会话的人都能体会到及时互动的价值。移动浏览器特别适合这种类型的互动，因为它们允许用户在各种环境中保持连接。

+   **简洁性。** 屏幕较小的用户将很难接收、阅读和输入大量内容。

+   **本地应用程序。** 移动浏览器通常与手机捆绑在一起。在电话公司为用户的地区提供通用分组无线服务（GPRS）之前，不可能提供同时使用语音和超文本的应用程序。但是，可以制作一个超文本文档，提供一键拨号到出版商指定的电话号码。

### 标准

尽管比特可能通过专有网络传输，但任何人都可以通过标准的 Web 服务器向移动设备提供内容（图 9.1）。![](arch.jpg)

**图 9.1：** 通过公共互联网上的 HTTP 服务器，内容传输到移动设备，经过 TCP/IP，有时在电话公司的无线网络中被转换为专有格式和协议，然后到达手机。

如上所示，手机通过服务提供商的无线网络连接到您的服务器。根据手机和网络的不同，“无线网络”云可能包含标准的互联网协议（IP）路由、标准的HTTP代理或WAP网关。在最后一种情况下，网关和手机使用一组特殊的协议进行通信，其中包括在通过无线网络传输之前压缩数据。其最终效果是，手机的浏览器（有时称为*微型浏览器*）在公共HTTP服务器看起来像是发出HTTP GET和POST请求的标准Web浏览器。

| 移动行业正在以快速的速度消耗标记语言。这一进展使我们从手持设备标记语言（HDML；1997）发展到无线标记语言（WML；1998）再到当前的推荐标准，即XHTML移动配置文件（XHTML-MP；2001）。我们可以看到XHTML-MP源自XHTML，这是世界互联网联盟对标准浏览器的推荐。已经过去了开发人员必须学习新的标记语言，服务器必须配置发送新的`Content-Type`头部，以便传递移动内容的糟糕时代。我们期望XHTML-MP将因此获得更广泛的采用和更大的稳定性。 |
| --- |

内容以“XHTML移动配置文件”形式传递，这是XHTML的严格子集，是HTML的符合XML标准的版本。以下是一个shell会话，返回一个足够短以完整打印的XHTML-MP文档：

> | XHTML-MP示例文档 |
> | --- |
> 
> |
> 
> ```
> % telnet philip.greenspun.com 80
> Trying 216.127.244.134...
> Connected to philip.greenspun.com.
> Escape character is '^]'.
> GET /seia/mobile/ex1.html HTTP/1.0
> 
> HTTP/1.0 200 OK
> MIME-Version: 1.0
> Content-Type: text/html
> 
> <?xml version="1.0" encoding="UTF-8"?>
> <!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.0//EN"
>     "http://www.wapforum.org/DTD/xhtml-mobile10.dtd">
> 
> <html  xml:lang="en">
> 
>   <head>
>     <title>
>      XHTML-MP Example
>     </title>
>   </head>
> 
>   <body>
>     <p>We're not in the 1970s anymore.</p>
>   </body>
> 
> </html>
> 
> Connection closed by foreign host.
> ```
> 
> |

上述粗体文本是程序员输入的内容，模拟微型浏览器请求。交换看起来很像我们为常规HTML浏览器看到的内容。主要区别在于文档的前两行包含XML声明和文档类型定义，并且在开头的`html`标签中使用了命名空间属性`xmlns`。

服务器希望区分桌面和移动用户可以搜索HTTP `Accept`头的内容，查找字符串`application/xhtml+xml; profile="http://www.wapforum.org/xhtml"`，这是XHTML移动配置文件规范所要求的（[http://www.openmobilealliance.org/tech/affiliates/wap/wap-277-xhtmlmp-20011029-a.pdf](http://www.openmobilealliance.org/tech/affiliates/wap/wap-277-xhtmlmp-20011029-a.pdf)）。相比之下，如果桌面浏览器在接受的格式中列出XHTML，通常不会引用移动配置文件。以下是Microsoft Internet Explorer 6.0提供的Accept头：

> `image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/x-shockwave-flash, */*`

Mozilla 1.4a（开源网景导航器）确实承诺接受XHTML：

> `text/xml,application/xml,**application/xhtml+xml**,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1`
> 
> 注意，Mozilla 充分利用了 Web 的原始概念，即服务器和客户端将协商提供用户最佳文件以响应对抽象 URL 的请求。在 `Accept` 标头中的 MIME 类型顺序无关紧要。浏览器使用*质量值*指示其偏好，例如在值为 `text/html;q=0.9` 中，Mozilla 表示普通的 HTML 不如前三个 XML 类型受欢迎，后者默认质量为 1.0。要了解更多关于此系统的信息，请参阅 HTTP 1.1 规范中关于“质量值”的部分，网址为 [http://www.w3.org/Protocols/rfc2616/rfc2616.html](http://www.w3.org/Protocols/rfc2616/rfc2616.html)

区分桌面和微型浏览器的第二种方法是检查 `User-Agent` HTTP 标头。考虑以下两个 shell 会话，其中用户输入以**粗体**显示：

| 没有额外的标头 | 声称自己是 Palm |
| --- | --- |

|

```
% telnet www.google.com 80
Trying 216.239.57.99...
Connected to www.google.com.
Escape character is '^]'.
GET / HTTP/1.1

HTTP/1.1 200 OK
Date: Tue, 22 Apr 2003 01:20:53 GMT
Cache-control: private
Content-Type: text/html
Server: GWS/2.0
Content-length: 2691

<html><head>
<meta http-equiv="content-type" 
  content="text/html; charset=ISO-8859-1">
<title>Google</title><style>...</style>...
</head><body>...</body></html>

Connection closed by foreign host.

```

|

```
% telnet www.google.com 80
Trying 216.239.57.99...
Connected to www.google.com.
Escape character is '^]'.
GET / HTTP/1.1
User-Agent: UPG1 UP/4.0 (compatible; Blazer 1.0)

HTTP/1.1 302 Found
Date: Tue, 22 Apr 2003 01:37:18 GMT
Location: http://www.google.com/palm
Content-Type: text/html
Server: GWS/2.0
Content-length: 156

<HTML><HEAD><TITLE>302 Moved</TITLE></HEAD>
<BODY>
<H1>302 Moved</H1>
The document has moved
<A HREF="http://www.google.com/palm">here</A>.
</BODY></HTML>

Connection closed by foreign host.

```

|

虽然这两个请求都没有指示首选的媒体类型，但 Google 的服务器识别出随 Handspring 掌上设备一起提供的“Blazer”浏览器，并通过响应行 `HTTP/1.1 302 Found` 和 `Location: http://www.google.com/palm` 重定向浏览器。遗憾的是，没有一个集中维护的用户代理注册表，因此通过此方法成功在很大程度上取决于程序员的努力。

### 练习 3

**摘要。** 将上面的 XHTML-MP 示例文档粘贴到一个名为 `ex1.html` 的文件中，从 `<?xml ...>` 声明开始，一直到结束的 `</html>` 标记，然后将其放在您的 Web 服务器上，并在不同类型的浏览器中加载示例。我们建议您将此文件放在您的 Web 服务器页面根目录下的 `/mbl/` 子目录中。

| **步骤 1 — 移动浏览器。** 将页面加载到移动浏览器中，并欣赏您的工作成果。如果您无法访问支持 Web 的手机，请安装或定位仿真器软件，可以是 PC 微型浏览器仿真器或基于 Web 的工具。请参阅本章末尾的链接以获取建议。假设您将文档放置在 `/mbl/software-engineering-for-internet-applications/examples/example1.html`，那么这是否会影响完成此练习所需的时间？ |
| --- |

**步骤 2 — 桌面浏览器。** 现在将页面加载到您喜爱的桌面浏览器程序中。 marvel at the cross-browser compatibility of your document。比较您在两种情况下对内容的主观体验，然后回答以下问题：在桌面浏览器和移动浏览器可以解析相同标记语法的世界中，我们是否需要区分两者，或者我们可以为每种类型的用户提供相同的文档？

### 按键超链接

让我们看一个带有超链接的页面：

> |
> 
> ```
> <?xml version="1.0" encoding="UTF-8"?>
> <!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.0//EN"
>     "http://www.wapforum.org/DTD/xhtml-mobile10.dtd">
> 
> <html  xml:lang="en">
> 
>   <head>
>     <title>
>      Student Life
>     </title>
>   </head>
>   <body>
>     <ol>
>       <li><a href="calendar" accesskey="1">Calendar</a></li>
>       <li><a href="/academics/grades" accesskey="2">Grades</a></li>
>       <li><a href="urgent-messages" accesskey="3">Urgent Messages</a></li>
>       <li><a href="events/frat-parties" accesskey="4">Fraternity Parties</a></li>
>       <li><a href="http://news.google.com/" accesskey="5">News</a></li>
>     </ol>
>   </body>
> 
> </html>
>   
> ```
> 
> | [![](keypad-hyperlinks-sm.gif)](keypad-hyperlinks) **图 9.3：** |
> | --- |

以列表形式呈现一系列编号选择，每个选择都链接到相应的目标。我们利用锚标签的`accesskey`属性来提高用户体验，让用户通过单个按键即可链接到任何选择。

### 练习4

对于移动浏览器，表单和服务器端处理方式与桌面浏览器相同。编写一个XHTML-MP文档，提示输入电子邮件地址（或屏幕名称，如果你决定忽略社会学家关于匿名性的建议）和密码，然后将其POST到服务器上的目标。服务器的响应应该打印出输入的电子邮件地址和密码的第一个字符，然后是每个后续密码字符的一个句点。我们建议将代码放置在可以通过以“/mbl/”开头的URI访问的位置。

### 练习5：通过Cookie进行身份验证

我们尝试过的美国的手机和网关支持HTTP cookie，包括持久cookie，方式与标准Web浏览器相同，只有一个例外：cookie值中的逗号会破坏一切。（请注意，逗号在严格的HTTP规范中是非法的，但桌面浏览器通常是宽容的。）

对于通过cookie进行身份验证，您需要回到为练习4构建的表单，并支持一个生成带有身份验证令牌的`Set-Cookie`头的脚本。我们建议使此cookie持久化，因为在数字键盘上输入完整的电子邮件地址非常痛苦。请注意，在组织的内部网站上，您可以为大多数用户自动填写电子邮件地址的“@foobar.com”或“@yow.org”部分。

### 练习6：链接到电话号码

查看[http://www.wapforum.org/what/technical.htm](http://www.wapforum.org/what/technical.htm)和[http://developer.openwave.com](http://developer.openwave.com)（需要免费注册）获取有关无线电话应用接口（WTAI）的信息。编写一个名为“mom.html”的页面，其中提供一个以文本“这里有一角钱；给你妈打电话告诉她有人怀疑你是否会成为一名律师”的链接。当点击此链接时，电话应拨打您母亲的电话号码。我们为这个超链接文本的不当长度道歉，但以防您最终进入一个更看重自尊而不是成就的组织，我们认为提醒每个人哈佛法学院的生活是什么样子是很好的。

背景：[《纸牌追杀令》](http://us.imdb.com/Title?0070509)（1973年，导演詹姆斯·布里奇斯）。

### 练习7：构建脉搏页面

你正在四处走动，有人表示怀疑你的在线学习社区是否有价值。你拿出手机，打开服务器上的“脉搏”页面。这将以XHTML-MP格式返回以下信息：

+   过去24小时和7天内注册的新用户数量

+   过去24小时和7天内新讨论论坛消息的数量

+   任何其他你作为站点所有者找到有趣的统计数据

### 练习 8：设计并构建你社区的移动界面

现在你已经掌握了基础知识，设计并构建你社区的移动界面。请记住：

+   手机和模拟器可能表现不同。

+   微型浏览器不像桌面浏览器（如 Internet Explorer）那样宽容；需要 100% 正确的语法。

+   真实手机可能无法从运行在非标准端口上的服务器加载页面。

移动界面应该对只键入站点主机名的移动用户可访问，即用户不应该键入“/mbl/”子目录。这通常是通过 Web 服务器页面根目录的顶层脚本中的 IF 语句实现的。

这是一个发挥创造力的好机会。从手机浏览可能会很慢、昂贵且痛苦。每一行信息都必须对用户非常重要。为了帮助你入门，以下是一些想法：

+   在在线社区提出问题的人会对该问题的新答案非常感兴趣

+   在一个小社区中，可以用一个按键从移动浏览器直接拨号的简单用户和他们的电话号码列表可能会非常有用

### 练习 9：客户签字确认

对于许多客户来说，移动界面有点过于新潮，因此在没有展示出有效且与其用户相关的东西之前，你不能要求他们提出想法。向客户展示你的移动界面，最好是在面对面的会议上使用真实手机。如果无法安排，可以在使用模拟器的面对面会议中展示。如果这也不现实，试图在电话会议中与客户一起处理界面，期间客户使用手机或模拟器。

记下客户对以下问题的回答：

+   你认为刚才看到的移动界面有多有用？

+   我们应该为移动用户提供哪些额外信息？

+   用户最希望能够从手机上完成的最关键任务是什么？

### 注意机会推动

到目前为止，我们考虑了从桌面 Web 浏览的世界引入移动设备的同步请求/响应模型。在另一种常见的通信形式中，用户从服务器机器人或社区成员异步接收信息。桌面用户将会认识到电子邮件提醒和即时通讯是这种模式的应用程序。异步、用户绑定通信的两个关键要求是（a）用户必须可寻址，例如通过电子邮件地址或屏幕名称，以及（b）用户必须运行软件以代表他们监听，例如邮件服务器或即时通讯客户端。这些功能在无线行业中被统称为 *推送*。

根据用户的无线服务提供商，可能会有机会在您的社区内发生有趣事件时向用户推送文本或多媒体消息。例如，许多手机可以通过电子邮件系统接收短信。手机的“电子邮件地址”是通过在电话号码后附加特定于提供商的域名来形成的。因此，如果John的Verizon Wireless电话号码是617-555-1212，我们可以通过发送电子邮件至`6175551212@vtext.com`来提醒他。

### 未来

在大多数国家，移动互联网并没有达到广泛成功的预期。突出的例外是i-mode系统，它已成为日本主要的互联网接入方式。我们认为两个原因解释了i-mode相对成功的原因：始终在线的连接性和内容提供者的收入机会。

西方移动互联网系统通常需要拨号并在第一页上登录，第一页的等待时间长达两分钟；而始终在线的i-mode系统，用户可以获得一致的性能和相对快速的初始请求结果。早期的西方移动系统按分钟收费，这对在数字键盘上缓慢输入文本并以9800波特率接收页面的用户来说是痛苦的。始终在线的系统（如i-mode）倾向于按字节或固定每月费率收取访问费，这大大降低了月底产生巨额账单的可能性。

在大多数移动互联网系统中，手机公司决定哪些网站对用户感兴趣，并将它们放在一组默认书签中。手机公司通常会向网站发布者收费，以推广给其客户。结果呢？美国的每个早期系统都很容易连接到amazon.com并购买书籍，结果发现这并不是一项受欢迎的活动。运营i-mode服务的日本公司DoCoMo采取了不同的方法。DoCoMo认为他们不够有创意，无法弄清楚消费者在移动互联网上想要什么。因此，他们提出了一个内容提供者几乎平等可用的系统。内容提供者可以通过横幅广告或收费高级内容来赚取收入。当提供者想要收费时，DoCoMo处理付款，收取5-9%的佣金。

始终在线和对内容提供者不吝啬的组合激发了出版商的创造力爆发。最受欢迎的服务似乎是那些将人们与其他人联系起来的服务，而不是面向消费者的amazon.com风格的电子商务。

移动互联网有望最终变得像日本的i-mode一样受欢迎吗？首次希望的曙光是由GPRS（General Packet Radio Service）提供的。GPRS利用小区内语音通信的空闲时间，在任何特定时刻通过未使用的频率传输理论上最大160Kbits/秒。GPRS需要新型手机，这些手机能够同时监听用于语音通话的专用电路连接，同时监视GPRS频率以接收数据包。实际上，GPRS可能只比现有的WAP系统提供三到四倍的吞吐量。更重要的是，GPRS在理论上可以提供类似于i-mode或有线桌面计算机的“始终在线”体验。

如上所述，使用GPRS，无线互联网将成为支持同时语音和文本交互的地方。例如，可以实现以下场景：

+   用户拨打航空公司电话号码

+   航空公司："请说出您的出发城市"

+   用户："伦敦"

+   航空公司："请说出您的目的地城市"

+   用户："巴黎"

+   航空公司：通过GPRS向用户手机发送WAP文档，列出备选航班

+   用户：浏览WAP文档，用眼睛扫描航班时间和价格，然后用手机键盘选择所需的航班

+   ...

请注意，当用户在数百个选择中进行选择时，语音提示和识别是方便的。然而，如果用户必须听取详细选择的长列表，则语音会变得痛苦——当有两三个以上的选择可用时，用文本提示可能会更好，特别是如果每个选择都需要详细说明。请记住George A. Miller在1956年《心理评论》（第63卷，第81-97页）中的文章“我们处理信息的能力的一些限制”（[http://www.well.com/user/smalin/miller.html](http://www.well.com/user/smalin/miller.html)）。

没有证据表明日本以外的电话公司会意识到收入分成的力量。然而，随着GPRS的推出，无线互联网将变得比新奇更好。有关GPRS的更多信息，请参阅Peter Rysavy在2000年12月《网络杂志》中的文章“新兴技术：GPRS的明确信号”（[http://www.rysavy.com/Articles/GPRS2/gprs2.html](http://www.rysavy.com/Articles/GPRS2/gprs2.html)）。

### 更多

标准信息：

+   [http://www.openmobilealliance.org](http://www.openmobilealliance.org/) — 开放移动联盟，移动计算的标准制定机构

+   [http://www.wapforum.org/what/technical.htm](http://www.wapforum.org/what/technical.htm) — WAP论坛的前身，WAP技术文档的遗留站点，包括XHTML-MP、WTAI和WAP架构规范。

+   [http://www.w3.org/TR/css-mobile](http://www.w3.org/TR/css-mobile) — CSS移动配置文件1.0规范，用于控制XHTML-MP文档的显示样式

软件开发工具包（"SDKs"）和支持WAP的浏览器可从以下获取

+   [http://developer.openwave.com/](http://developer.openwave.com/) — Openwave开发者网站（需要免费注册）

+   [http://www.forum.nokia.com/main.html](http://www.forum.nokia.com/main.html) — 诺基亚网站，在WAP开发者论坛区域（需要免费注册）

+   [http://www.ericsson.com/mobilityworld/sub/open/index.html](http://www.ericsson.com/mobilityworld/sub/open/index.html) — 爱立信开发者专区（需要免费注册）

+   [http://www.gelon.net/](http://www.gelon.net/) — Gelon WAPalizer，可通过浏览器运行。

通用分组无线服务（GPRS）：

+   [http://www.rysavy.com/Articles/GPRS2/gprs2.html](http://www.rysavy.com/Articles/GPRS2/gprs2.html)

旧的WML标准：

+   本章的旧版本在[index-old](http://philip.greenspun.com/seia/mobile/index-old)处查看

### 时间与动作

团队的每个成员都应该独立完成基础知识、练习1-6，并预计花费大约五个小时。

团队应该计划一起花费一到两个小时设计移动界面，但可以分工进行原型设计和完善移动界面。合理的范围是八到十二个程序员工时。

客户签署文件所需的时间将根据客户对移动Web的兴趣和熟悉程度而有所不同。计划至少花费三十分钟进行签署。

## 语音（VoiceXML）

* * *

在每个计算时代，程序员都负责编写基本的应用逻辑。在桌面应用程序时代（1980年代），对这种逻辑的关注通常被给予用户界面、事件处理和图形代码所掩盖，编程团队需要编写这些代码才能将计算机程序交付给用户。结果：个人层面的创新很少；大多数广泛使用的计算机程序都是由大公司编写的。

在Web时代（1990年代），用户界面和图形由Web浏览器渲染，例如，网景导航器或微软互联网浏览器。程序员只需编写应用逻辑和一些简单的HTML指定用户界面行为，就能向最终用户交付完整系统。结果：创新革命，大多数Web应用程序由少数人在几个月内编写完成。

假设你已经观察到，电话比个人电脑和网络浏览器更普遍和便携。此外，你可能已经注意到，几乎每个人都能使用电话，而许多消费者对个人电脑的复杂性缺乏耐心。因此，你可能希望使你的信息系统对只有电话的用户可访问。你会怎么做呢？在20世纪80年代，你会租用一条电话线，购买一个大型专用盒子来识别话语，再购买另一个专用盒子与用户交流，并将这些盒子放在应用程序的主服务器旁边。在90年代，你可能需要租用一条电话线，购买专门的软件，并将运行该软件的标准计算机放在运行应用程序的服务器旁边。两个十年的结果都是：几乎没有创新，只有最大的组织才提供语音/电话接口给他们的信息系统。

随着今天*语音浏览器*的出现，未来几年将是电话可访问的互联网应用程序开发方面巨大创新的时期。通过Web应用程序，您操作HTTP服务器并运行应用程序代码；其他人运行浏览器。语音浏览器的理念是一样的。您操作服务器和应用程序。其他人，也许是电话公司，运行电话线路和语音浏览器。

总之：语音浏览器使您可以仅通过HTTP服务器构建电话语音应用程序。从中，伟大的创新将会涌现。

### 插图

假设波士顿一家公司的副总裁特蕾西刚刚飞抵洛杉矶。她想知道公司洛杉矶办公室的电话号码和地址，以及一名员工的直线电话号码。由于她公司的内部网络不可通过电话访问，她不得不打电话给她的助手，并要求他打开一个网络浏览器，在内部网络中查找信息。

使用VoiceXML，开发人员只需几个小时就可以将几乎任何可在网络上获得的信息通过电话提供给用户，不仅适用于高科技手机的用户，还适用于*任何*类型的电话用户。特蕾西可以拨打一个号码并说出她正在寻找哪个办公室或员工。在搜索一些内部数据库表后，VoiceXML应用程序可以朗读出她想要的电话号码和地址。下次特蕾西迷失在一个陌生的城市时，她就不必依赖她的助手在办公桌前了。

### 什么是VoiceXML？

VoiceXML，或VXML，是一种类似于HTML的标记语言。不同之处在于：HTML由您的Web浏览器呈现以格式化内容和用户输入表单；VoiceXML由语音浏览器呈现。您的应用程序可以通过合成语音或预先录制的音频文件与用户交流。您的软件可以通过语音或用户电话键盘上的按键接收用户输入。如果您曾经构建过Web应用程序，那么您已经准备好开始开发您的电话应用程序了。

### 如何使您的内容可以通过电话访问

就像以前一样，您仍然可以租用电话线并运行商业语音识别软件和文本转语音（TTS）转换软件。然而，VoiceXML革命最有趣的一点是您实际上不需要这样做。有免费的VoiceXML网关，如Tellme ([http://www.tellme.com](http://www.tellme.com/))，BeVocal ([http://www.bevocal.com](http://www.bevocal.com/))和VoiceGenie ([http://www.voicegenie.com](http://www.voicegenie.com/))。这些网关从您的Web服务器获取VoiceXML页面并朗读给用户。如果您的应用程序需要用户输入，网关将解释传入的响应并以您的软件能理解的方式将该响应传递给您的服务器。![](vxml-2.gif)

**图10.1：** HTML：发布者拥有HTTP服务器，使用HTML指定在读者的台式电脑上呈现的用户体验。VoiceXML：发布者拥有HTTP服务器，使用VoiceXML指定在第三方网关系统上呈现并以音频形式传递给用户电话的用户体验。

您可以使用Web表单配置网关与您的应用程序的URL，并将电话号码与之关联。在Tellme的情况下，您的用户拨打1-800-555-TELL，拨打您的5位数字分机号，现在他们正在与您的应用程序交流。

### 练习1

使用Tellme（1-800-555-TELL）进行

+   获取加州理工学院（加州帕萨迪纳大道1201号，帕萨迪纳，加州）和帕萨迪纳城市学院（加州帕萨迪纳大道1570号，帕萨迪纳，加州）之间的驾驶路线

+   查找Oracle Corporation股票的最新价格

+   听取您的星座运势

+   听取今天的头条新闻故事

记录完成前三项任务所需的时间。

### 练习2

想出两到三个来自您的学习社区对电话用户有价值的服务清单。您可能会发现以下准则有用：

| 在这一领域的一个积极发展是，许多语音网关（例如VoiceGenie，[www.voicegenie.com](http://www.voicegenie.com)）现在正在与生物特征语音认证软件提供商合作，如VoiceTrust ([www.voice-trust.com/](http://www.voice-trust.com/))和Vocent ([www.vocent.com](http://www.vocent.com))。 |
| --- |

+   对用户来说登录很困难。对于语音应用程序，输入用户名比移动应用程序更加繁琐和容易出错。您可能希望将您的语音服务限制在整个社区而不仅仅是注册用户可以访问的服务上。标准用户名/密码身份验证的替代方案是为每个注册用户分配一个数字用户 ID 和 PIN，但这样会使 Web/移动/电话服务变得更加繁琐。

+   向用户提供信息很容易，但让他们向您的服务提供信息很困难。他们通常可以从菜单中选择选项，但很难提供任何有意义的非结构化数据。

### VoiceXML 基础知识

VoiceXML 文档的格式很简单。这是如何向您的访客说“Hello, World”的方法：

```
<?xml version="1.0"?>
<vxml version="2.0">
  <form>
    <block>
       <audio>Hello, World</audio>
    </block>
  </form>
</vxml>

```

第一个标签，<nobr>`<?xml version="1.0"?>`</nobr>，指定接下来的文档符合 XML 1.0 标准。所有 VoiceXML 文档都遵循此标准。

与任何 XML 文档一样，每个开放标签（例如，<nobr>`<vxml>`</nobr>）都必须关闭，要么使用类似 <nobr>`</vxml>,`</nobr> 的闭合标签，要么在标签末尾使用斜杠（<nobr>`/`</nobr>），如下一个示例中的 <nobr>`<else/>`</nobr> 标签。要记住的另一个重要规则是所有属性值必须用引号括起来，如 <nobr>`version="2.0"`</nobr>。在这两个方面，XML 比 HTML 更严格。

<nobr>`<vxml version="2.0">`</nobr> 标签指定这是一个 VoiceXML 2.0 文档。在其中是一个 <nobr>`<form>,`</nobr>，可以是一个交互元素 —— 请求用户输入 —— 或信息性的。您可以在 VoiceXML 文档中有任意多个表单。一个 <nobr>`<block>`</nobr> 是您的可执行文件的容器，意味着所有使您的应用程序*执行*某些操作的标签，如 <nobr>`<audio>`</nobr>、<nobr>`<goto>`</nobr> 等，可以被聚合在一个块内。 <nobr>`<audio>text</audio>`</nobr> 将使用 TTS 转换器读取文本，而 <nobr>`<audio src="wav_file_URL"/>`</nobr> 将播放预先录制的 .wav 音频文件。

### 练习 3

在[VoiceXML 网关](#vxml_gateways)之一注册开发者帐户（请参阅本章末尾的列表）。所有网关都提供免费的开发者帐户和许多对开发者有用的服务。我们推荐 BeVocal，因为它有广泛的文档和提供的各种工具，包括：语法检查器；基于 Web 的仿真器，这样您就可以在 PC 上进行一些测试，而不必使用电话；在线调试器；通话记录，包括错误消息、变量值，甚至实际用户话语的录音；您可以使用的语法和代码库等。然而，所有网关都有各自的优势和劣势，所以使用您最喜欢的那个；没有错误的选择。

网关将为您分配一个可以指向您的Web服务器的电话号码或分机号。 将其指向一个名为hello-world.vxml的文件，其中包含上面的VoiceXML示例。 这个示例应该适用于大多数网关，但是每个网关使用略有不同的VoiceXML语法，因此请查看您选择的网关提供的在线文档。

### 更多VoiceXML

这是一个接受用户输入并根据用户说的话行为不同的示例：

```
<?xml version="1.0"?>
<vxml version="2.0">
  <form id="animal_questionnaire">
    <field name="favorite_animal">
      <prompt>
        <audio>Which do you like better, dogs or cats?</audio>
      </prompt>
      <grammar>
      <![CDATA[
          [
            [dog dogs] {<option "dogs">}
            [cat cats] {<option "cats">}
          ]
        ]]>
      </grammar>
      <!-- if the user gave a valid response, the filled block
           is executed. -->
      <filled>
        <if cond="favorite_animal == 'dogs'">
          <!-- this would take the user to a form called
               popular_dog_facts within the same VoiceXML
               document -->
          <goto next="#popular_dog_facts"/>
        <else/>
          <!-- this expression is an EMCAScript (JavaScript)
               expression, composed of a concatenated string
               and variable; this will take the user to the
               URI psychological_evaluation.cgi?affliction=cats
               -->
          <goto expr="'psychological_evaluation.cgi?affliction='
                + favorite_animal"/>
        </if>
      </filled>
      <!-- if the user responded but it didn't match the
           grammar, the nomatch block is executed -->
      <nomatch>
        I'm sorry, I didn't understand what you said.
        <reprompt/>
      </nomatch>
      <!-- if there is no response for a few seconds, the
           noinput block is executed -->
      <noinput>
        I'm sorry, I didn't hear you.
        <reprompt/>
      </noinput>
    </field>
  </form>
  <!-- additional forms can go here -->
</vxml>

```

在这个示例中，我们：

+   询问来电者是否更喜欢狗还是猫

+   监听回应

+   根据回应将来电者重定向到另一个位置

本示例中VoiceXML代码的结构基本与“Hello, World”示例相同，只是增加了一些额外的元素。 前两行出现在每个VoiceXML 2.0文档中。 接下来，我们有一个表单； 这次表单是有名字的，因为如果我们在文档中有多个表单，我们必须这样做。

| 关于语法的说明

在VoiceXML 1.0中，W3C没有规定语法格式，允许每个VoiceXML平台按照自己选择的方式实现语法。 在VoiceXML 2.0中，每个平台都必须实现W3C的语音识别语法格式（SRGF）的XML格式，最新草案可从[http://www.w3.org/TR/grammar-spec/](http://www.w3.org/TR/grammar-spec/)获取。

在一个供应商的实现中，可以使用以下SRGF语法来替代示例中的语法：

```
<grammar xml:lang="en-US"
type="application/srgs+xml" version="1.0">
  <rule id="animal" scope="public">
    <one-of>
      <item>
        <one-of tag="dogs">
          <item>dog</item>
          <item>dogs</item>
        </one-of>
      </item>
      <item>
        <one-of tag="cats">
          <item>cat</item>
          <item>cats</item>
        </one-of>
      </item>
    </one-of>
  </rule>
</grammar> 

```

然而，其他供应商对SRGF的实现略有不同。 随着SRGF规范从“候选推荐”毕业，供应商对SRGF的实现应该趋于一致。 |

使用<nobr>`<field>`</nobr>标签创建了一个名为<nobr>`favorite_animal`</nobr>的变量。 在提示用户回应后，我们必须通过定义语法来指定用户允许回答什么。 您会发现各种网关往往使用不同的语法格式。 本示例中的语法是GSL（Nuance的语法规范语言）格式，被Tellme和BeVocal等公司使用。 上面的语法指定如果用户说“dog”或“dogs”，<nobr>`favorite_animal`</nobr>的值变为“dogs”。 如果他们回答“cat”或“cats”，<nobr>`favorite_animal`</nobr>将被设置为“cats”。

获取用户输入就是这样。 现在我们可以在程序中使用他们的回应值。 在本示例中，如果他们的答案是“dogs”，他们将被发送到同一VoiceXML文档中名为“popular_dog_facts”的表单。 如果他们回答“cats”，他们将被发送到不同的URL，<nobr>`psychological_evaluation.cgi?affliction=cats.`</nobr> 请注意我们如何在<nobr>`goto`</nobr>标签中使用JavaScript表达式以使用<nobr>`favorite_animal`</nobr>变量的值。

这两个示例足以让您了解VoiceXML的要点，希望您能对使用VoiceXML进行语音应用开发的简单性有所欣赏。

在Tellme（[http://studio.tellme.com/](http://studio.tellme.com/)）和BeVocal（[http://cafe.bevocal.com/](http://cafe.bevocal.com/)）的开发者网站上可以找到优秀的教程和参考资料。

### 练习4：语法准确性

创建一个简单的页面，要求用户说出加拿大的一个城市。从一个小的语法开始，例如：

> ```
> [vancouver toronto halifax] {<option "valid_city">}
> 
> ```

你的应用程序应该以类似于“是的，那是一个加拿大城市”或“我从未听说过那个城市”的方式回应用户。

尝试你的应用程序。说出一些不在你的列表上的城市名称，看看它是否错误地认为它们是有效的城市。现在在你的列表中添加一些更多的城市（例如，卡尔加里，温尼伯，维多利亚，萨斯卡通）。随着你的列表变得越来越长，你会开始得到一些错误的结果。

决定一个经验法则，即一个语法中有多少元素是合理的。

> 有一些应用程序在一个语法中有数千个元素。然而，它们通常经过使用代表性概率进行语法匹配的语法调整过程。对于这个练习，只需扩展上面的标准语法。

### 练习5：新内容和新用户

为你的社区添加语音可访问的“新内容”和“新用户”功能。用户应该能够打电话并听到其他社区成员最近的五个贡献以及最后五个注册的人的名字。

考虑一下，如果你通过电话对用户进行身份验证，那么可能最有趣的贡献是该用户对该用户提出的问题的任何新回答。

### 练习6：电话审批/拒绝内容

许多网站有用户创建的内容，必须由管理员或版主批准后才能在网站上发布。例如，亚马逊的产品评论，slashdot.org的文章提交，以及在经过审核的论坛中的公告帖。

通常情况下，你会打开你的网络浏览器，登录，并转到一个管理页面，从中你可以批准、拒绝或编辑提交内容。

但当你在遛狗时，用手机批准和拒绝提交内容肯定会很方便。（通过手机进行编辑更难，但通常更少见，所以可以等到你回到办公桌再做。）

创建一些简单的语音可访问的管理页面。由于典型的用户名/密码身份验证太繁琐，你可能希望只需一个数字密码就能访问。请注意，通常来说，用一个密码来保护一组页面并不理想，因为这样会使以后委派/撤销管理员权限变得更加困难，但对于这个练习来说可以。

### 练习7：实现一些真实服务

根据你在练习2中想出的服务的复杂性，实现其中一个或两个或三个。如果你实现了多个，你可能希望创建一个语音服务菜单作为所有语音用户的入口点。

### 练习8：客户签字确认

与移动浏览器界面一样，语音界面对大多数人来说在他们真正使用之前很难想象。尝试与客户面对面坐下来，观察他们在您的VoiceXML界面的所有角落和缝隙中进行操作。如果这不现实，可以通过电子邮件向客户发送明确的说明，然后跟进电话。

记下客户对以下问题的答案：

+   您认为您刚刚尝试的语音界面有多有用？

+   我们应该通过语音提供哪些额外信息？

+   用户希望能够通过标准电话仅使用触摸音调和语音完成的最关键任务是什么？

### 移动与语音应用

移动文本浏览器和VoiceXML各有优势和劣势，因此适用于不同的应用程序，或者适用于同一应用程序的不同部分。

| 移动浏览器 | VoiceXML |
| --- | --- |
| 需要浏览器增强电话 | 可以与任何电话一起使用 |
| 用户输入不便的键盘 | 语音或键盘输入 |
| 在嘈杂环境中表现良好 | 在嘈杂环境中难以使用 |
| 您需要为各种移动网关开发软件版本 | 您只需要为软件开发一个版本 |
| 用于显示大量信息的移动浏览器 | 用于向用户提供大量信息的语音界面效果不佳 |
| 用户可以输入任意信息 | 用户只能说预定义的短语 |

**图10.2：**

利用移动和语音界面的最佳方式之一是开发多模态应用程序，就像上一章中的GPRS航空公司预订系统一样。许多团体正在积极制定多模态应用程序的规范，包括Speech Application Language Tags（SALT）论坛（[http://www.saltforum.org/](http://www.saltforum.org/)）。

### 超越VoiceXML：对话式语音

所有语音应用程序都将是VoiceXML应用程序吗？当前的VoiceXML语法旨在产生通过层次菜单导航的用户体验。最先进的研究正在超越这一点，朝着任何时候任何话语都有意义，上下文从交换到交换都得以保留的对话系统发展。例如，您可以拨打麻省理工学院计算机科学实验室的服务器电话1-888-573-8255：

+   **你:** 明天波士顿会下雨吗？

+   **JUPITER:** 据我所知，波士顿明天不会下雨。

+   **你:** 底特律怎么样？

+   **JUPITER:** 据我所知，底特律明天不会下雨。

+   **你:** 美国有洪水吗？

+   **JUPITER:** 路易斯安那州和密西西比州已发布洪水警报。

+   **你:** 凤凰城会晴天吗？

    ...

注意系统，更详细描述请参见 [http://groups.csail.mit.edu/sls/applications/jupiter.shtml](http://groups.csail.mit.edu/sls/applications/jupiter.shtml)，假设你在问底特律时仍对雨感兴趣，这是从波士顿问题延续过来的上下文。

长远来看，随着这些更自然的对话技术的完善，VoiceXML 的语法将不得不扩展以适应语音解释器的全部功能，或者被另一个标准所取代。

### 更多

VoiceXML 网关：

+   Tellme ([http://studio.tellme.com/](http://studio.tellme.com/))

+   VoiceGenie ([http://developer.voicegenie.com/](http://developer.voicegenie.com/))

+   Voxeo ([http://www.voxeo.com/](http://www.voxeo.com/))

+   BeVocal Cafe ([http://cafe.bevocal.com/](http://cafe.bevocal.com/))

+   HeyAnita Freespeech ([http://freespeech.heyanita.com/](http://freespeech.heyanita.com/))

相关链接：

+   VoiceXML 论坛 ([http://www.voicexml.org/](http://www.voicexml.org/))

+   developer.com 上的语音文章 ([http://www.developer.com/voice/](http://www.developer.com/voice/))

+   来自 Web 联盟的规范和新闻，[http://www.w3.org/Voice/](http://www.w3.org/Voice/)。值得注意的有趣规范包括

    +   Voice 可扩展标记语言（VoiceXML）规范版本2.0 ([http://www.w3.org/TR/voicexml20/](http://www.w3.org/TR/voicexml20/))

    +   语音识别语法规范版本1.0 ([http://www.w3.org/TR/grammar-spec/](http://www.w3.org/TR/grammar-spec/))

+   本文的早期版本中的源代码和案例研究，“VoiceXML：通过电话让人们与您的 HTTP 服务器交谈”，请访问 [http://eveandersson.com/arsdigita/asj/vxml](http://eveandersson.com/arsdigita/asj/vxml/)

### 时间和动作

团队的每个成员应该独立完成基础知识，练习1-4，并预计花费两到三个小时。

团队应该计划花费一到两个小时一起设计语音界面，但可以分工进行原型设计和完善语音界面以及练习5和6。一个合理的范围是八到十二个程序员工时。

客户签署所需的时间将根据客户的兴趣水平而变化。计划至少花费三十分钟进行签署。

## 逐渐扩展规模

* * *

让我们再次看看《模式语言》中引用的段落（[A Pattern Language](http://www.amazon.com/exec/obidos/ASIN/0195019199/pgreenspun-20)），引用自“规划”章节：

> "很容易看出为什么一个地区的政府随着规模的扩大变得越来越难以管理。在一个有 N 个人的人口中，需要大约 N² 个人与人之间的联系来保持沟通渠道畅通。当 N 超过一定限制时，用于民主、正义和信息的沟通渠道就会变得太拥挤、太复杂；官僚主义淹没了人类进程。...
> 
> “我们认为当一个地区的人口达到2到10百万时，就达到了极限。超过这个规模，人们会远离政府的大规模进程。在现代历史的光芒下，我们的估计可能看起来很不可思议：民族国家已经强大起来，他们的政府控制着数千万，有时数亿的人口。但这些巨大的权力不能声称有一个自然的大小。他们不能声称已经在城镇和社区的需求与整个世界社区的需求之间取得平衡。事实上，他们的倾向是忽视当地的需求，压制当地的文化，同时将自己扩大到几乎无法触及的地步，他们的权力对普通公民来说几乎无法想象。”

让我们也提醒自己关于一个事实证据，即庞大的在线社区无法满足每一个需求。美国在线并没有吞并互联网上所有较小的社区。当邮件列表的流量水平变得太高时，人们会取消订阅邮件列表。早期的USENET讨论组的早期采用者（在1970年代被称为“Netnews”或“新闻组”，在2005年对大多数人来说是“Google Groups”）停止参与，因为他们发现当社区规模超过一定点时，群组的效用减弱。

所以好消息是，无论竞争对手有多大，总会有新的在线社区的空间。坏消息是，增长会带来重大的工程挑战。其中一些挑战归结为简单的性能工程：如何将支持互联网应用程序的负载分配给多个CPU和磁盘驱动器？这些通常可以通过金钱解决，即使没有任何聪明的方法。更深层次的挑战无法通过金钱和硬件解决。例如，考虑以下问题：

+   100,000人如何进行对话？

+   在线学习社区如何支持有50,000个不同热情和参与程度的人？

+   与邻居保持联系的电子类比是什么？与朋友保持联系呢？

在本章中，我们将首先考虑直接的硬件和软件问题，然后转向随着用户社区扩大而变得越来越困难的更微妙的挑战。

### 引擎室中的任务

几乎每个互动式互联网应用程序的服务器上都会发生以下基本任务：

+   传输层加密（如果网站有安全的HTTPS页面，则为SSL）

+   HTTP服务

+   表示层（页面组合；脚本执行）

+   抽象提供（有时称为“业务逻辑”；是在原始数据库之上的任何代码层，其中每个过程被多个页面使用）

+   持久性

在一个访问量适中的网站上，有可能只需一个 CPU 执行所有这些任务。事实上，为了方便维护和可靠性，最好尽可能少地使用简单的服务器。例如，考虑一下你的台式电脑。硬件出现故障已经多久了？如果你看到一个房间里有 50 台简单的个人电脑或单板工作站，有多少是因为硬件故障而无法使用的？然而，假设你组合计算机来支持你的应用程序。如果一台机器的可靠性为 99%，那么依赖于 10 台这样的机器的网站只会有 0.99^(10) 的可靠性，即 90%。这里的概率分析与抛硬币相同，但是偏向于 0.99，你需要连续抛 10 次正面才能获得一个正常的服务。如果你需要 100 台机器正常运行呢？这只会发生在 0.99^(100) 的时间里，大约是 37%。

把硬件用于解决性能问题并不具有挑战性。具有挑战性的是设置这些硬件，使得服务在任何一个组件可操作的情况下都能正常工作，而不仅仅是在所有组件都可操作的情况下。

我们将逐个检查每一层。

#### 持久层

对于大多数交互式 Web 应用程序，持久层是关系数据库管理系统（RDBMS）。RDBMS 服务器程序正在解析 SQL 查询，将事务写入磁盘，搜索磁盘上的很少使用的数据，将数据粘合在 RAM 中，并将其返回给 RDBMS 客户端程序。一般工程师的初步观点是，RDBMS 的性能受到磁盘速度的限制。Oracle 的程序员持不同意见：“一个正确配置的 Oracle 服务器将受到 CPU 的限制。”

假设我们有一个受欢迎的应用程序，需要 16 个 CPU 来支持所有的数据库查询。再假设我们已经决定 RDBMS 将独立运行在一个或多个物理计算机上。我们应该购买 16 台每台有一个 CPU 的小型计算机，还是一台内部有 16 个 CPU 的大型计算机？当地的电脑商店出售约 500 美元的 1-CPU 个人电脑，意味着 16 个 CPU 的总成本为 8000 美元。如果我们访问 Sun Microsystems 的网站 ([www.sun.com](http://www.sun.com))，我们会发现 16-CPU Sunfire 6800 的价格甚至高到无法列出，但如果过去是任何指导，我们不会以低于 20 万美元的价格脱身。我们将支付 25 倍的价格来获得相同性能的 16 个 CPU，但全部内置在一个物理计算机内。

为什么会有人这样做呢？

让我们来考虑一下 RDBMS 应用程序的特点。RDBMS 服务器同时与多个客户端进行通信。如果客户 A 更新了数据库中的记录，然后在一瞬间后，客户 B 请求该记录，那么 RDBMS 将被要求向客户 B 提供更新的信息。如果我们将 RDBMS 服务器程序分布在多台物理计算机上，那么可能客户 A 将从计算机 I 提供服务，客户 B 将从计算机 II 提供服务。除非将数据库事务写入硬盘驱动器，否则无法提交数据库事务。因此，这些计算机需要做的只是在向客户 B 返回任何结果之前检查磁盘是否有更新。磁盘驱动器比 RAM 慢 100,000 倍。运行 RDBMS 的单台计算机将在 RAM 中保留数据库常用部分的最新版本。因此，通过参考硬盘确保处理器之间数据库一致性的多计算机 RDBMS 服务器将比单计算机 RDBMS 服务器慢 100,000 倍。

典型的商业关系数据库管理系统产品，如 Oracle Parallel Server，通过每台计算机在 RAM 中保留数据库的副本，并通过高速通信网络相互通知更新。机器间通信可以是高速以太网链路，也可以是专用电路板和电缆，以实现内存总线速度。

在一个多 CPU 单盒服务器中，我们不是也有着相同的 CPU 间同步的问题吗？绝对是的。CPU I 正在为客户 A 提供服务。CPU II 正在为客户 B 提供服务。这两个 CPU 需要向彼此通报数据库更新情况。它们通过向多处理器机器的共享 RAM 中写入来实现这一点。事实证明，2002 年左右的典型高端服务器上可用的 CPU-CPU 带宽为 100 Gbits/second，比最快的千兆以太网、FireWire 和其他廉价的机器间互连技术快 100 倍。

结论：如果需要多个 CPU 运行 RDBMS，通常最明智的做法是购买一个物理盒子中的所有 CPU。

#### 抽象层

假设你有一个复杂的计算，必须在计算机程序的几个不同位置执行。最有可能的是，你会将该计算封装到一个过程中，然后从程序的每个需要该计算的部分调用该过程。*过程抽象*的好处是，你只需要编写和调试一次计算代码，并且，如果规则发生变化，通过更新单个过程，你可以确保更新了整个应用程序。

抽象层有时被称为“业务逻辑”。对于业务而言复杂且基本的东西应该被分离出来，以便在多个地方一致使用，并在必要时在一个地方更新。以下是Eve Andersson编写的电子商务系统的示例。该系统在1999年左右提供了几乎所有亚马逊网站的功能。Eve预计，许多笨拙的程序员会采用她的开源创建物来更新页面脚本，以赋予他们的网站独特的外观和感觉。Eve预计，关于销售税的法律和会计程序会发生变化。因此，她将按州查找销售税、确定该州是否对运费征税以及将税率乘以价格的过程封装到了一个Oracle PL/SQL函数中：

> ````
> create or replace function ec_tax
>  (v_price IN number, v_shipping IN number, v_order_id IN integer) 
> return number
> IS
> 	taxes			ec_sales_tax_by_state%ROWTYPE;
> 	tax_exempt_p		ec_orders.tax_exempt_p%TYPE;
> BEGIN
> 	SELECT tax_exempt_p INTO tax_exempt_p
> 	FROM ec_orders
> 	WHERE order_id = v_order_id;
> 
> 	IF tax_exempt_p = 't' THEN
> 		return 0;
> 	END IF;	
> 	
> 	SELECT t.* into taxes
> 	FROM ec_orders o, ec_addresses a, ec_sales_tax_by_state t
> 	WHERE o.shipping_address=a.address_id
> 	AND a.usps_abbrev=t.usps_abbrev(+)
> 	AND o.order_id=v_order_id;
> 
> 	IF nvl(taxes.shipping_p,'f') = 'f' THEN
> 		return nvl(taxes.tax_rate,0) * v_price;
> 	ELSE
> 		return nvl(taxes.tax_rate,0) * (v_price + v_shipping);
> 	END IF;
> END;  
> 
> ````

调用此函数的Web脚本或其他PL/SQL过程只需要知道一个物品的建议成本、建议运费和可能添加该物品的订单ID（这些是`ec_tax`的三个参数）。例如，每个州的销售税都存储在`ec_sales_tax_by_state`表中，对于其他应用程序来说是隐藏的。如果采用这种软件的组织决定切换到使用第三方软件来计算税收，该组织只需更改这一个函数，而不是在数百个Web脚本中寻找与税收相关的代码。

抽象层是否应该在自己的物理计算机上运行？对于大多数应用程序来说，答案是否定的。这些过程并不足以使它们分离到单独的计算机上值得系统管理工作量和增加硬件故障的风险。而且，这些过程通常甚至不值得新的执行环境。互联网服务的抽象层中的大多数过程需要密切访问关系数据库表。当这些过程在RDBMS内部运行时，访问速度最快。所有现代RDBMS都支持在数据库服务器内执行标准过程语言。这一趋势是由Oracle的PL/SQL和Java率先引领的。最新的Microsoft SQL Server据说可以在数据库内运行任何.NET支持的计算机语言。

什么时候应该考虑为抽象层使用单独的环境（"应用服务器"进程）？假设一个由几次合并而成的大银行，有一个IBM主机来管理支票账户，一个Oracle RDBMS来管理信用账户，以及一个基于SQL Server的客户支持系统。如果简·顾客打电话给银行，要求用支票账户支付信用卡账单，计算机程序需要在主机上执行一个交易（支票账户扣款），在Oracle系统上执行一个交易（信用卡入账），以及在SQL Server数据库上执行一个交易（与451号客服代表电话交谈期间处理付款）。从技术上讲，例如，在Oracle RDBMS内运行的Java程序可以连接到其他数据库管理系统，但传统上这种问题通常通过一个独立的“应用服务器”来解决，通常是一个定制的C程序。术语“应用服务器”随后被用来描述可能运行这种程序的物理计算机，并且在1990年代末，用于执行Java或C程序的执行环境，这些程序在网站上提供除页面呈现或持久化之外的某些功能。

另一个需要考虑使用单独的物理应用服务器的例子是在需要执行大量计算的情况下。在大多数照片分享网站上，每次上传照片时，服务器都必须创建标准尺寸的缩略图。在[orbitz.com](http://www.orbitz.com)旅行网站上的性能挑战甚至更为严峻。每个用户请求都会执行由麻省理工学院人工智能实验室校友在[itasoftware.com](http://www.itasoftware.com)编写的Lisp程序。这个Lisp程序会搜索一个包含两百亿航班和票价的数据库。如果执行交易（如订票）的数据库机器还要支持这些搜索，它们就会崩溃。

如果在抽象层中要使用单独的物理 CPU，它们是否都应该放在同一个盒子里，或者将廉价的单 CPU 机器堆叠起来也能正常工作？这取决于状态的保存位置。请记住 HTTP 是一个无状态协议。服务器需要记住诸如“注册用户 137 想要查看法语页面”、“未注册用户开始会话 6781205 并将[《丽鱼》](http://www.amazon.com/exec/obidos/ASIN/0738205281/pgreenspun-20)的精装版放入购物车”等信息。在多进程多计算机服务器群中，无法保证特定用户始终返回到同一运行中的计算机程序，即使只是因为您希望用户体验对单个物理计算机的故障具有鲁棒性。如果会话状态保存在除 cookie 或持久层（关系数据库管理系统）之外的任何地方，您的应用服务器程序将需要不断地相互通信，以确保它们的临时数据库是一致的。在这种情况下，可能有必要获得一台昂贵的多 CPU 机器来支持应用服务器。然而，如果除持久层之外的所有层都是无状态的，应用服务器层可以由多个廉价的单 CPU 机器处理。例如，在 orbitz.com，装有相同本地副本的廉价计算机机架加载有票价和时间表数据库。每当用户点击查看从纽约到伦敦的旅行选项时，其中一台应用服务器机器会被随机选择执行。

#### 展示层

展示层中的计算机程序从持久层（关系数据库管理系统）中提取信息，并将这些结果与适合用户偏好和客户端软件的模板合并。在 Web 应用程序中，这些计算机程序执行 SQL 查询，并将结果与 HTML 模板合并，以交付给用户的 Web 浏览器。这样的程序非常简单，通常被称为“脚本”。您可以将展示层视为“脚本执行的地方”。

脚本执行最常见的地方是在 Web 服务器占用的操作系统进程中。换句话说，脚本语言解释器内置于 Web 服务器中。这种架构的示例包括 Microsoft Internet Information Server (IIS) 和 Active Server Pages，AOLserver 及其内置的 Tcl 解释器，Apache 和 mod_perl 插件。如果您选择使用这些流行的 Web 开发风格之一，您选择将展示层与 HTTP 服务层合并，并且为一层分配多个 CPU 将自动为另一层分配负载。

多CPU盒子与多个独立盒子的决定应再次基于演示层是否保存状态。如果正在运行的演示脚本没有保存会话状态，则在单独的物理计算机内添加CPU更经济。

#### HTTP服务

HTTP服务本身非常简单，几乎不值得拥有自己的层，除非您要向大众传递音频和视频文件。高性能的纯HTTP服务器程序，如Zeus Web Server（参见[www.zeus.com](http://www.zeus.com)），可以处理每秒超过6000个请求，并在单个500 MHz英特尔赛扬处理器上饱和100 Mbps网络链路（顺便说一句，截至2005年2月，该100 Mbps链路的年费约为5万美元）。那么，为什么有人需要部署多个CPU来支持具有嵌入式图像的基本HTML页面的HTTP服务呢？

人们在单个前端Web服务器上容量不足的主要原因是HTTP服务器程序通常打包了支持计算成本更高的层的软件。例如，能够支持持久层和抽象层的Oracle RDBMS服务器还包括解释Java Server Pages和执行HTTP服务所需的软件。如果您直接从Oracle运行一个流行的服务，您可能需要多个CPU。更常见的例子是能够从同一操作系统进程处理演示和HTTP服务层的Web服务器，如IIS和AOLserver。如果您的脚本涉及大量模板解析，很容易通过Web服务器/脚本解释器的需求使单个CPU超载。

如果HTTP服务层中没有存储状态，则在单独的物理盒子中添加CPU最便宜。HTTP是无状态的，用户交互完全由关系数据库管理。因此，没有理由让为用户A提供页面的CPU想要与为用户B提供页面的CPU通信。

#### 传输层加密

每当提供Web页面时，两台位于不同计算机上的应用程序已经相互通信。正如在[“基础知识”章节](basics)中讨论的那样，客户端打开一个传输控制协议（TCP）连接到服务器，指定所需的页面，并通过该连接接收数据。TCP比基本的不可靠的互联网协议（IP）高一层。TCP增加的是可靠性：如果数据包没有被确认，它将被重新传输。无论是TCP还是上世纪90年代的IP版本IPv4，都不提供对传输数据的加密。因此，任何能够监视服务器或客户端的局域网或主干路由器上的数据包的人可能能够了解，例如，特定用户请求的特定页面。如果您正在运行一个关于退行性疾病的在线社区，这可能会导致您的一个用户失去工作。

有两种方法可以保护用户免受数据包嗅探器的侵害。第一种方法是使用较新版本的互联网协议IPv6，它提供了本地数据安全和身份验证。在辉煌的IPv6世界中，我们可以确定数据包的来源，无论是来自合法用户还是拒绝服务攻击者。在辉煌的IPv6世界中，我们可以确定从Web流量中嗅探信用卡号码或其他用户敏感数据是不切实际的。然而，截至2005年春季，目前还无法申请家庭IPv6连接。因此，我们被迫回到20世纪90年代的方式，在HTTP和TCP之间添加一层。这是由网景通信公司首创的安全套接字层（SSL），现在正在标准化为TLS 1.0（参见[http://www.ietf.org/html.charters/tls-charter.html](http://www.ietf.org/html.charters/tls-charter.html)）。

无论如何进行加密，加密都是处理器密集型的。在客户端，这并不是什么大问题。客户端机器可能有一个98%空闲的2 GHz处理器。然而，在服务器端执行加密可能会占用一个整个CPU的时间，每个用户的请求期间。

如果你的处理能力不足，唯一的解决方法就是...增加处理能力。问题是什么类型的处理能力以及在哪里增加。向多CPU计算机添加通用处理器非常昂贵，正如前面提到的。向双层服务器农场添加额外的单CPU前端服务器可能不是一个坏策略，特别是因为，如果你已经在运行双层服务器农场，它不需要新的思考或系统管理技能。然而，特殊用途的硬件可能更具成本效益或更易于管理。特别是可以在IPv6路由器中进行加密。HTTP连接的SSL加密可以通过插件板来完成，其中一个例子是2005年售价为1400美元的康柏AXL300，PCI卡，声称每秒处理330个SSL连接的性能。最后，可以在Web服务器（通过普通HTTP通信）和客户端（通过HTTPS发出请求）之间插入硬件加密设备。例如，这是F5 Networks负载平衡路由器的一个选项（[www.f5.com](http://www.f5.com)）。

### 你有足够的CPU吗？

在阅读前面的部分之后，你已经购买了一些计算机硬件。你如何知道它是否足以支持预期的请求量？一个很好的经验法则是，每个 CPU 每秒最多处理不超过 10 个动态页面的请求。所谓的“动态”页面是指涉及在服务器端执行任何计算机程序的页面，而不仅仅是简单的 HTTP 服务，即除了发送 JPEG 或 HTML 文件之外的任何内容。每秒 10 个的数字假设页面要么没有加密，要么加密是由 HTTP 服务器前面的额外硬件完成的。例如，如果你有一个处理持久性和抽象的 4-CPU RDBMS 服务器和 4 个处理演示和 HTTP 服务的 1-CPU 前端机器，你不应该期望每秒传送超过 80 个动态页面。

你可能会问，这个每秒每 CPU 10 次点击的 CPU 速度是基于什么的？这个数字与 CPU 速度无关！在 1990 年代中期，我们有 200 MHz 的 CPU。Web 脚本查询数据库并将结果与嵌入在脚本中的字符串合并。一切都在一台物理计算机上运行，因此没有从一个地方复制数据的开销。只有最终的信用卡处理页面是加密的。我们努力处理每秒 10 次点击。在 1990 年代末，我们有 400 MHz 的 CPU。Web 脚本查询数据库并将结果与必须解析的模板合并。数据从 RDBMS 服务器通过网络传输到 Web 服务器，然后再传输给用户。出于隐私问题的考虑，我们加密了更多页面。我们努力处理每秒 10 次点击。在 2000 年，我们有 1 GHz 的 CPU。Web 脚本查询 referer 头以查找请求是否来自我们的联合品牌合作伙伴的客户。然后脚本选择适当的模板。我们用 Java Server Pages 和 Enterprise Java Beans 重载了服务器。我们努力处理每秒 10 次点击。在 2002 年，我们有 2 GHz 的 CPU。程序员决定遵循 XML/XSLT 的潮流。我们努力处理每秒 10 次点击……

看起来合理地预期硬件工程师将继续提供实质性的性能改进，而软件开发和业务复杂性的潮流将继续剥夺用户享受这些改进的乐趣。因此，在你拥有自己的应用程序特定基准测试证明相反之前，坚持每个 CPU 每秒处理 10 个请求。

### 负载均衡

正如本章前面提到的，一个分布在15台物理计算机中的拥有100个CPU的Internet服务，如果所有100个CPU都必须工作才能使整个服务正常运行，那么它将不会非常可靠。 我们需要制定一个负载平衡策略，以便（1）用户请求在可用CPU之间更或多或少地均匀分配，（2）当硬件故障时，不会向用户返回太多错误，并且（3）我们可以重新配置硬件和网络而不会破坏用户的书签和其他站点的链接。

我们将从假设一个两层服务器农场开始，其中一个多CPU机器运行RDBMS，而多个单CPU前端机器分别运行Web服务器程序，解释页面脚本，执行SSL加密，并通常执行RDBMS内未执行的任何计算。

**** 插入我们示例服务器农场的图纸 ****

**图11.1：**中到高流量Internet应用程序的典型服务器配置。 强大的多CPU服务器支持关系型数据库管理系统。 多个小型1CPU机器运行HTTP服务器程序。

#### 在持久层进行负载平衡

我们的持久层是运行关系型数据库管理系统的多CPU计算机。 RDBMS本身通常是多进程或多线程应用程序。 对于每个数据库客户端，RDBMS都会生成一个单独的进程或线程。 在这种情况下，每个前端机器都会将自己呈现给RDBMS作为一个或多个数据库客户端。 如果我们假设用户请求的负载分布在前端机器之间，操作系统进程或线程调度器将会将数据库工作的负载分布在RDBMS服务器的多个CPU之间。

#### 在前端机器之间进行负载平衡

大约在1995年，高流量Web站点的一种流行策略是*轮询DNS*。 每个前端机器被分配一个唯一的公共可路由IP地址。 Web站点的域名系统（DNS）服务器被编程为在请求Web服务器的主机名的翻译时给出不同的答案。 例如，www.cnn.com正在使用轮询DNS。 他们有一个中央NFS文件服务器，其中包含站点的内容以及一个装有小型前端机器的机架，每个机器都是Web服务器和NFS客户端。 这种架构使CNN能够通过仅触摸一台机器来一致地更新其站点，即中央NFS服务器。

用户如何体验CNN系统？当麻省理工学院的学生请求[http://www.cnn.com/TECH/](http://www.cnn.com/TECH/)时，他或她的台式机会向本地名称服务器请求将主机名www.cnn.com翻译为32位IP地址的过程。（请记住，所有的互联网通信都是机器之间的，需要数字IP地址；像“www.amazon.com”或“web.mit.edu”这样的字母数字主机名仅用于用户界面。）麻省理工学院的名称服务器会联系InterNIC注册处，以了解cnn.com域的名称服务器的IP地址。然后，麻省理工学院的名称服务器会联系CNN的名称服务器，并得知“www.cnn.com”在IP地址207.25.71.5处可用。在一定时间内，麻省理工学院同一子网内的后续用户将获得相同的答案207.25.71.5，而无需麻省理工学院的名称服务器再次联系CNN的名称服务器。

这个系统中的负载均衡在哪里？假设哈佛大学的生物专业学生请求[http://www.cnn.com/HEALTH/](http://www.cnn.com/HEALTH/)。哈佛的名称服务器也会联系CNN的名称服务器，以了解“www.cnn.com”的翻译。然而，这一次，CNN服务器会提供不同的答案：207.25.71.20，将该用户以及哈佛网络内的后续用户引导至不同于向麻省理工学院用户提供页面的机器的前端服务器。

轮询DNS今天并不是一种非常流行的负载均衡方法。首先，它并不是非常均衡。假设CNN的名称服务器告诉美国在线的名称服务器www.cnn.com可在207.25.71.29处访问。美国在线完全可以向其超过2000万客户提供该翻译。轮询DNS的另一个问题是前端机器发生故障时对用户的影响。如果207.25.71.29处的机器出现故障，那么美国在线的所有客户都将无法访问www.cnn.com，直到翻译的过期时间到期为止——该站点将正常运行并向全球数十万用户提供页面，但对那些接收到指向死机器的不幸DNS翻译的用户则不提供服务。对于典型的域，这段时间可能从6小时到1周不等。CNN意识到了这个问题，可以缩短cnn.com的过期时间和“最小生存时间”，但如果将其缩短到比如30秒，CNN的名称服务器的负载可能会接近其Web服务器的负载强度。几乎每个用户页面请求都将先于DNS翻译请求。（事实上，CNN将他们的最小生存时间设置为15分钟。）

round-robin DNS的最后一个问题是它不提供抽象化。假设CNN，其主要服务器都是Unix机器，希望运行一些仅适用于Windows的讨论论坛软件。所有服务器的IP地址都是公开的。唯一的方法将用户引导到服务的特定部分的不同机器是将它们链接到不同的主机名，因此可以将其转换为不同的IP地址。例如，CNN将用户链接到“http://forums.cnn.com”。喜欢这些论坛的用户会收藏这个URL，互联网上的其他网站会插入到这个URL的超链接。一年后，假设Windows服务器正在故障，知道如何维护它们的人已经离职。同时，讨论论坛软件也已经适用于Unix。CNN希望将讨论服务重新放回其主服务器农场，URL为http://www.cnn.com/discuss/。为什么用户需要意识到这种硬件的重新调整呢？

**** 插入服务器农场（云）、负载均衡器、公共互联网（云）的图示 ****

**图11.2：** 为了保持在服务器农场内重新排列组件的自由，通常公共互联网上的用户只与负载均衡路由器通信，这是服务的“公共面”，www.popularservice.com将其IP地址翻译为。

现代负载均衡的方法是负载均衡路由器。这台机器通常由标准个人电脑硬件构建，运行着一个免费的Unix操作系统和一层薄薄的定制软件，是唯一从公共互联网可见的机器。所有的服务器硬件都在负载均衡器后面，并且具有来自互联网其他部分无法路由的IP地址。例如，如果用户请求www.photo.net，这会被转换为216.127.244.133，这是photo.net负载均衡器的IP地址。负载均衡器在端口80上接受TCP连接，并等待Web客户端提供请求行，例如，“GET / HTTP/1.0”。只有在收到该请求后，负载均衡器才尝试联系其后面的私有网络上的Web服务器。

首先注意到，这种路由器提供了一些固有的安全性。Web 服务器和 RDBMS 服务器不能直接被公共互联网上的黑客联系。唯一的入口是通过成功攻击负载均衡器，攻击 Web 服务器程序（Microsoft Internet Information Server 遭受了许多缓冲区溢出漏洞），或攻击发布者编写的页面脚本。该路由器还提供了一些防御拒绝服务攻击的保护。如果 Web 服务器配置为最多生成 100 个同时线程，那么恶意用户可以通过简单地向服务器打开 100 个 TCP 连接然后永远不发送请求行来有效地关闭站点。负载均衡器对于清除此类空闲连接是很聪明的，而且无论如何都有非常长的队列。

负载均衡器可以执行任意复杂的算法来决定如何路由用户请求。它可以以循环方式将请求转发到一组前端服务器，如果服务器未响应，则将其从轮询中排除。负载均衡器可以定期从前端服务器拉取负载和健康信息，并将每个传入的请求发送到最不繁忙的服务器。负载均衡器可以检查所请求的 URI 并路由到特定服务器，例如，将任何以"/discuss/"开头的请求发送到运行讨论论坛软件的 Windows 机器。负载均衡器可以保留先前请求路由的表，并尝试将连续请求从特定用户路由到同一前端机器（在除了 RDBMS 的层中构建状态时非常有用）。

无论负载均衡器使用何种算法，前端机器中的硬件故障通常只会导致少量用户请求失败，即实际失败的机器上正在处理的请求。

负载均衡器实际上是如何构建的？似乎我们需要一个等待 Web 请求的计算机程序，采取一些行动，然后向用户返回结果。这不就是 Web 服务器程序所做的吗？那么为什么不向标准 Web 服务器程序添加一些代码，将组合运行在自己的计算机上，然后称之为我们的负载均衡器？这正是 Zeus 负载均衡器（[http://www.zeus.com/products/zlb/](http://www.zeus.com/products/zlb/)）和 mod_backhand（[http://www.backhand.org/mod_backhand/](http://www.backhand.org/mod_backhand/)）采取的方法，后者是 Apache Web 服务器的负载均衡器模块的一个示例。另一种选择是 F5 Networks（[http://www.f5.com/](http://www.f5.com/)），该公司销售基于 PC 硬件、NetBSD Unix 操作系统和未指定的魔术软件构建的即插即用负载均衡器。

#### 故障转移

记住我们的战略目标：（1）用户请求在可用的 CPU 之间分配得比较均匀；（2）当一台硬件出现故障时，不会导致太多错误返回给用户；（3）我们可以重新配置硬件和网络，而不会破坏用户的书签和来自其他站点的链接。

看起来前端的负载均衡路由器和后端的负载均衡操作系统使我们能够实现目标 1 和 3。如果前端单 CPU 机器发生硬件故障，我们也实现了目标 2。但是如果多 CPU 的 RDBMS 服务器发生故障怎么办？或者负载均衡器本身发生故障怎么办？

从一个损坏的负载均衡器切换到一个正常工作的负载均衡器实质上是一个网络配置挑战，超出了本教材的范围。基本上需要的是两个相同的负载均衡器，并与连接您的服务器群到公共互联网的下一个路由链路合作。那些上游路由器必须知道如何根据哪个负载均衡器正在运行来路由对同一 IP 地址的请求。防止这变成一个无休止的负载均衡螺旋的是上游路由器实际上并没有查看 TCP 数据包以找到 GET 请求。它们只是做更简单的 IP 路由工作。

确保从一个损坏的 RDBMS 服务器切换到一个正常工作的服务器是一个更困难的挑战，也是一个尝试过并发现不够理想的各种想法。第一个想法是确保 RDBMS 服务器永远不会出现故障。该机器将有三个电源供应器，只需要两个。每个磁盘驱动器都将被镜像。如果 CPU 板发生故障，操作系统将优雅地切换到剩余的 CPU 上运行。将有几个网络卡。每个磁盘驱动器将有两条路径。考虑到内部的移动部件数量，这些大型复杂服务器非常可靠，但它们并不是百分之百可靠。

鉴于单个大型服务器不够可靠，我们可以购买一堆服务器并将它们全部连接到同一个磁盘子系统，然后运行类似 Oracle Parallel Server 的东西。数据库客户端连接到任何可用的物理服务器机器。如果无法从特定服务器获得响应，客户端会在几秒钟后重试连接到另一台物理服务器。因此，RDBMS 服务器机器发生故障会导致返回错误给正在处理该机器的任何用户请求，并且可能会导致被指向该故障机器的客户端的用户在几秒钟内中断或缓慢的服务，但不会导致站点长期不可用。

正如本章“持久层”部分所讨论的，这种方法会浪费大量的CPU时间和带宽，因为物理机器会相互通知数据库更新。Oracle在2000年引入了一种妥协方法，即配置一个双节点并行服务器。第一台机器将处理在线交易。第二台机器允许在更新方面落后于第一台，例如，最多落后十分钟。如果您想要进行CPU密集型报告查询上个月的用户活动，您将与备用机器通信。然而，如果第一台机器发生故障，第二台机器几乎会立即注意到，并开始从硬盘上的事务日志中将自己的状态向前滚动。一旦第二台机器与最后一个提交的事务保持同步，它将开始作为主数据库服务器提供服务。Oracle自豪地宣称，对于愿意为RDBMS服务器硬件花费两倍的客户，双节点故障转移配置比单台机器“只慢一点点”。

### 硬件扩展练习

#### 练习1：基于Web服务器的负载均衡器

像 Zeus 负载均衡器这样的产品如何工作？我们担心我们的Web服务器程序会不堪重负，所以我们增加了九台额外的机器，运行九份额外的程序副本。将所有用户都通过运行在一台机器上的Web服务器程序作为瓶颈，这可能是我们最初设置的方式，这样做是否是个好主意？

#### 练习2：纽约时报

考虑基本的纽约时报网站。忽略任何社区功能，如聊天或讨论论坛。集中精力解决核心文章和广告的传递问题。每个用户将看到相同的文章，但可能看到不同的广告。设计一个服务器硬件和软件基础设施，能让纽约时报工作人员使用Web表单更新网站，用户体验与这些更新之间的滞后时间不超过一分钟，并且最小化计算机硬件和系统管理成本。

明确说明所使用的计算机数量，每台计算机内的CPU数量以及计算机之间的连接。

您对这个练习的回答不应超过半页纸的文字。

#### 练习3：eBay

访问[www.ebay.com](http://www.ebay.com)，熟悉他们的基本服务，包括拍卖竞标和用户评级。假设您需要支持1亿注册用户，每天8亿页面浏览量，每天1000万次竞标，每天1000万次搜索以及每天50万次新用户评级。设计一个服务器硬件和软件基础设施，能在可靠性（包括优雅降级）、初始成本和管理成本之间达成合理的折衷。

明确说明所使用的计算机数量，每台计算机内的CPU数量以及计算机之间的连接。如果你对真实数字感兴趣，请记住eBay是一家上市公司，发布年度报告，可在[http://investor.ebay.com/](http://investor.ebay.com/)获取。

你对这个练习的回答不应超过一页。

#### 练习4：eBay代理竞标

eBay提供一项名为“代理竞标”或“自动竞标”的服务，您可以指定愿意支付的最高金额，服务器本身将以取决于当前最高出价的增量为您提交竞标。您将如何在您为前面的练习设计的基础设施上实现代理竞标？勾勒出您需要的任何SQL语句或触发器。明确指出代理竞标的代码将在哪里执行：在哪台服务器上？在哪个执行环境中？

#### 练习5：Uber-eBay

假设eBay每天达到10亿次竞标。这将如何改变你的设计，如果有的话？

#### 练习6：Hotmail

假设Hotmail是一个由关系数据库支持的拥有2亿活跃用户的互联网服务。提供仍然提供合理可靠性和可维护性的最低成本硬件配置是什么？Hotmail和eBay之间的根本区别是什么？

注意：[http://philip.greenspun.com/ancient-history/webmail/](http://philip.greenspun.com/ancient-history/webmail/)描述了由Jin S. Choi构建的由Oracle支持的Web邮件系统。

#### 练习7：Scorecard

为[www.scorecard.org](http://www.scorecard.org/)背后的服务器基础架构提供一个段落的设计，并说明你的决定。

### 转向困难的问题

我们可以建立一个大型服务器。我们可以支持很多用户。然而，随着社区规模的增长，这些用户是否能继续以我们服务作为在线学习社区所需的*有目的*方式进行互动？我们如何防止讨论和学习变得混乱和聊天？

或许我们可以从传统的面对面世界中汲取一些想法。让我们看看一些使离线社区良好的因素，以及我们如何将它们转化到在线世界中。

### 将离线社区的好元素从离线转化到在线世界

面对面的社区几乎总是一个人们被识别、认证和负责的社区。假设你是一个50岁、身高6英尺、体重250磅的家伙，全镇人都认识你叫“弗雷德·琼斯”。你能走到你邻居的十二岁女儿面前，自我介绍为一个十三岁的女孩吗？可能不会很成功。假设你在房子前挂了一面纳粹旗。你能在下次镇上会议上表达意见而不被人记住你是“那个挂纳粹旗的家伙”吗？看起来不太可能。

我们如何将可识别性、认证性和问责性的特征转化到在线世界中？在私人社区中，比如企业知识管理系统或大学协调服务中，这很容易。除非是员工或注册学生，否则我们不允许任何人使用系统，在在线环境中，我们通过他们的全名来识别用户。这种重量级的认证与运行公共在线社区的实际情况相矛盾。例如，是否实际上要安排与photo.net的每个潜在注册者进行面对面会议，新用户需要出示身份证明？另一方面，正如在“用户注册和管理”章节中讨论的那样，我们可以通过要求电子邮件验证和要求Hotmail风格电子邮件账户的人提供替代认证，在公共在线社区中尝试认证。在公共和私人社区中，我们可以通过将每个用户的姓名设为指向其在网站上贡献完整记录的超链接来增强问责性。

在面对面的世界中，演讲者有机会在讲话时评估听众的反应。假设你是一名政治家，正在向一个名为WAGC（“反对枪支管制的妇女”）的妇女组织演讲。你的日程如此紧张，以至于你记不起你的助手告诉你关于这个组织的事情，所以你计划使用你一贯的演讲，讲述你一直致力于确保更高的税收、政府对个人生活的更多干预，尤其是让美国人拥有枪支变得更加困难。在你为突击步枪禁令做出贡献之前很久，你可能已经注意到听众对你这种家长式的品味并不太接受，并修改了你计划的演讲。典型的计算机中介通信系统使得向服务中的每个人广播你的想法变得容易，但没有机会获得有用的关于你的消息如何被接收的反馈。你可以将长篇电子邮件发送给大邮件列表。在前500人收到后，你将第一次感觉到人们是否喜欢它。你可以在讨论论坛中发布对一个情绪激动的问题的回复，但在最终确定回复之前，至少不会通过同一软件获得其他社区成员的帮助。

或许你可以设计你的软件，让用户可以将响应暴露给最终受众的1%的测试观众，从这些样本接收者那里得到反馈，并在授权发送给整个群体之前完善消息。

当在离线世界中聚集了太多人以至于无法进行有效讨论时，通常会有分组和重新组合的安排。例如，学术会议通常有一半是“一对很多”讲座，另一半是休息和用餐时间，期间会举行许多“少数人对少数人”的讨论。假设一个存档的讨论论坛被1万人使用。你很确定自己知道问题的答案，但不确定你的想法是否足够完善，可以向1万人展示并永久保存在数据库中。那么，是否可以向那些此刻已登录的用户大声呼喊提议的回应，并首先与他们尝试这个想法？向一个房间里的人大声呼喊的电子等效物是在聊天室中输入文字。我们在 photo.net 进行了实验，比较了在我们自己的服务器上运行的基于 HTML 和 JavaScript 的聊天室与在 AOL Instant Messenger 基础设施上指定聊天室的简单超链接：

> ````
> <a href="aim:gochat?RoomName=photonet">photo.net chatroom</a>
> 
> ````

这会导致一个正确配置的浏览器启动 AIM 客户端（[试一试](aim:gochat?RoomName=photonet)）。尽管基于 AIM 的聊天提供了更好的互动性，但由于（1）一些用户没有在他们的计算机上安装 AIM 软件，（2）一些用户身处防火墙之后，无法使用 AIM，但主要是因为（3）photo.net 用户通过真实姓名相互认识，无法通过他们的 AIM 屏幕名称识别朋友。似乎提供一个分组和重新组合的聊天室是有用的，但它需要与在线社区的其余部分紧密集成，特别是用户身份必须在社区内的所有服务中得到保留。

人们喜欢计算机和互联网，因为它们快速。如果你想要一个问题的答案，你会转向回答最快且最相关的搜索引擎。在离线世界中，人们通常渴望速度。30秒内送达的巨无霸比10分钟送达的巨无霸更好。然而，当情绪和利益高涨时，我们作为一个社会经常选择延迟。我们本可以在两周内选举一位总统，但我们选择了几乎持续两年的总统竞选活动。我们本可以在2000年7月5日之后立即审判并判决托马斯·朱恩塔，当时他在波士顿地区的一个溜冰场殴打迈克尔·科斯汀，另一个十岁冰球运动员的父亲，致其死亡。毕竟，这一罪行被数十人目击，对于朱恩塔的罪行几乎没有疑问。但直到2002年1月，朱恩塔才被审判、定罪并被判处六到十年监禁。即时通讯、聊天室和基于网络的讨论论坛并不总是适合进行深思熟虑的讨论，特别是当话题涉及情感时。

| “随着在线讨论的延长，涉及纳粹或希特勒比较的概率接近于1” —（迈克）戈德温定律 |
| --- |

对于一些社区来说，考虑在发布时添加人为延迟可能是合适的。假设你回复了乔·兰特的消息，将他与阿道夫·希特勒相比较。二十四小时后，你会收到服务器发来的电子邮件：“下面的消息是否真正代表你最好的想法？通过点击以下网址之一选择一个选项：确认 | 编辑 | 丢弃。” 你有一些时间冷静下来思考。乔·兰特是一位有才华的油画家吗？乔·兰特曾被评为《时代》杂志年度人物吗（[希特勒在1938年获得](http://www.time.com/time/poy2000/archive/1938.html)）？经过反思，与希特勒的比较是不恰当的，你选择在消息公开之前进行编辑。

在离线世界中，有多难找到对我们重要问题感兴趣的人？如果你相信慈善从家庭开始，所有政治都是地方性的，找到与你分享关注的人就像在社区里四处走动一样简单。将这种方式转化到在线世界的一种方法是为每个地理区域建立单独的社区。如果你想了解你所在州的环境情况，你可以访问massachusetts.envrionmentaldefense.org。但如果你的兴趣范围更广呢？如果你对整个新英格兰地区的环境感兴趣，难道你必须访问五六个不同的服务器才能找到热门话题吗？或者假设你的兴趣更狭窄。如果你住在靠近纽约州边界的地方，担心某个化工厂，难道你必须浏览大量关于马萨诸塞州东部人口密集地区的帖子吗？

由比尔·皮斯和金·S·崔为[scorecard.org](http://www.scorecard.org)服务开发的*地理化讨论论坛*，是这个问题的一个有趣解决方案。尝试以下页面：

+   在一些西部州的问题讨论：[http://www.scorecard.org/bboard/usgeospatial-2.tcl?topic=Pollution%20in%20Your%20Community&epa_region=9](http://www.scorecard.org/bboard/usgeospatial-2.tcl?topic=Pollution%20in%20Your%20Community&epa_region=9)

+   相同的论坛，但限定在加利福尼亚州的帖子：[http://www.scorecard.org/bboard/usgeospatial-one-state.tcl?topic=Pollution%20in%20Your%20Community&usps_abbrev=CA](http://www.scorecard.org/bboard/usgeospatial-one-state.tcl?topic=Pollution%20in%20Your%20Community&usps_abbrev=CA)

+   相同的论坛，但限定在圣克拉拉县的帖子：[http://www.scorecard.org/bboard/usgeospatial-one-county.tcl?topic=Pollution%20in%20Your%20Community&fips_county_code=06085](http://www.scorecard.org/bboard/usgeospatial-one-county.tcl?topic=Pollution%20in%20Your%20Community&fips_county_code=06085)

+   相同的论坛，但限定为关于一个工厂的主题：[http://www.scorecard.org/bboard/usgeospatial-one-facility.tcl?topic=Pollution%20in%20Your%20Community&tri_id=95050WNSCR960CE](http://www.scorecard.org/bboard/usgeospatial-one-facility.tcl?topic=Pollution%20in%20Your%20Community&tri_id=95050WNSCR960CE)

用户可以收藏其中任何页面，并定期进入网站参与尽可能广泛的讨论。

另一种看待地理空间化的方式是从用户自身出发。例如，考虑一个以非洲慈鲷鱼繁育为中心的在线学习社区。大多数文章和讨论都对全球所有用户感兴趣。但是，帮助地理上接近的会员找到彼此是很好的。会员们可以分享有关最好的水族店的信息，并安排在周末聚会交换小鱼。为了促进用户的地理空间化，你的软件应在每个新用户注册时征求居住国家和邮政编码。几乎总是可以找到每个国家邮政编码的纬度和经度重心的数据库。例如，在美国，你应该在[www.census.gov](http://www.census.gov)上寻找“地名文件”，特别是用于邮政编码分析区域（ZCTA）的文件。

尽管应用了上述技巧，但社区的增长始终有可能超过老用户应对所有新用户及其贡献的能力。从上世纪70年代早期开始，每一个互联网协作系统都受到了这样的抱怨：“我过去喜欢这个[邮件列表|新闻组|MUD|Web社区]，但现在它变大了，充满了冒犯的失败者；有趣而深思熟虑的材料被厚厚的废料掩埋了。” 对于这种抱怨的最早技术修复是*bozo过滤器*。如果你不喜欢某人说的话，你就把他们加入你的bozo列表，软件将隐藏他们对社区的贡献，让你看不到。

2001年中期，我们在photo.net社区添加了一个“反bozo过滤器”功能。如果你在照片共享系统中发现了一件很有创意的作品，或者在讨论论坛中发现了一篇思慕的回复，你可以将作者标记为“有趣的”。在随后的登录中，你的个人工作区将显示一个“你的朋友”部分。你标记为有趣的人按照他们对网站的最新贡献顺序列出。功能添加后的六个月内，有5000名用户建立了25000个“我认为其他用户很有趣”的关系。

### 人类规模化练习

#### 练习8：报纸的在线社区

选择一个由国家或国际观众操作的在线报纸运营的讨论论坛服务器，例如，[www.nytimes.com](http://www.nytimes.com)，等等。选择一个你感兴趣的讨论区域。这个论坛作为一个在线学习社区的效果如何？哪些功能是有帮助的？如果这是你的服务，你会添加哪些功能？

报纸的特点是什么，使得它特别难以作为在线社区的发布者？

#### 练习9：amazon.com

列出[amazon.com](http://www.amazon.com)的功能，似乎会导致他们的在线社区更优雅地扩展。解释每个功能是如何帮助的。

#### 练习10：您社区的扩展计划

在您的服务器上的抽象URL`/doc/planning/YYYYMMDD-scaling`上创建一个文档，并开始编写您社区的扩展计划。该计划应列出您期望在站点增长时修改或添加的那些功能。这些功能应按阶段分组。

从`/doc/`或规划子索引页面添加一个链接到您的新计划。

#### 练习11：实施第一阶段

实施您的扩展计划的第一阶段。这可能是确保每当用户的姓名或电子邮件地址出现在您的服务上时，文本都是该人对社区的所有贡献的一个锚点（问责）。或者，它可能是完全的地理空间化。这实际上取决于您的客户预计在未来几个月将要服务的社区有多大。

### 防止垃圾信息在公共在线社区中的传播

公共在线社区是指接受来自公共互联网的任何IP地址的注册，并向公共互联网返回内容的社区。在私人在线社区中，例如，在公司防火墙后面并且只接受公司员工的成员的企业知识共享系统中，您不必太担心垃圾信息，其中 *垃圾信息* 在这种情况下被定义为“任何与主题无关，违反使用条款，多次发布在多个地方的内容，或者对其他试图学习的社区成员没有帮助的内容”。

让我们看一些具体的情景。假设我们有一个公共社区，用户提交的内容可以立即发布，无需经过审核员的批准。在任何要求内容必须经过预先批准才能出现在其他成员面前的社区中，垃圾信息的问题都会大大减少，但是这样的社区如果希望讨论自由流动，则需要更多的审核员。

情景1：莎拉·赚钱者已注册为用户＃7812，并发布了50篇文章评论和讨论论坛留言，带有链接指向她的“天然伟哥”销售网站。莎拉手动点击并粘贴了来自桌面上打开的文字处理器的文本字符串，在她的垃圾邮件活动中投入了约20分钟。处理莎拉的适当工具是一组高效的管理页面。以下是点击流的进行方式：

1.  网站管理员访问“过去30天内发布的所有内容”链接，结果是一页又一页的内容

1.  网站管理员在顶部点击一个控件，将显示限制为只有来自新注册用户的内容，传统上这些用户是最棘手的，结果是一个可管理的5屏幕列表

1.  网站管理员审核内容项，每个内容项都有一个顶部的摘要标题和正文的前200个字，带有一个“更多”超链接以查看完整项目，并在末尾有一个带超链接的作者姓名

1.  网站管理员点击一个显然与主题无关且商业垃圾邮件的发布下面的名称“莎拉·赚钱者”；这将带来一个页面，总结了莎拉在服务器上的注册以及她贡献的所有内容

1.  网站管理员从莎拉·赚钱者处点击“消灭此用户”的链接，并看到一个“您真的要删除莎拉·赚钱者，用户＃7812以及她贡献的所有内容吗？”

1.  网站管理员确认了删除操作，执行了一个大的SQL事务，其中删除了与莎拉·赚钱者相关的所有行。请注意，这与版主将内容标记为“未批准”并且该内容仍然保存在数据库中但不在页面上显示是不同的。假设商业垃圾邮件没有价值，莎拉不会成为社区的有价值成员。事实上，与用户＃7812相关联的`users`表中的行也应删除。

网站管理员假设他或她已经在审阅站点上的所有新内容，花了不到30秒的时间删除了垃圾邮件发布者花了20分钟发布的内容，比率为40:1。只要删除垃圾邮件比发布垃圾邮件容易得多，社区就相对不受垃圾邮件影响。请注意，如果建立了由新注册用户贡献的内容进行预批准的政策，莎拉将无法破坏社区。

情景2：用户#3571艾拉·安格里维奇对用户#4189赫舍尔·梅洛曼怀有怨恨。在赫舍尔发表的每个讨论论坛帖子下，艾拉都发表了针对赫舍尔的人身攻击。处理莎拉·蒙尼洛弗的程序在这里不适用，因为在对赫舍尔发怒之前，艾拉已经发表了600个有用的讨论论坛回复，我们不愿删除。处理这个问题的正确工具是一个管理页面，显示用户#3571按日期排序贡献的所有内容。在每个内容项的标题下是正文的前200个字，这样管理员可以在不点击下去的情况下评估消息是否是针对赫舍尔的垃圾邮件。在每个内容项旁边是一个复选框，所有内容底部有一个标记为“不批准所有选中项”的按钮。对于艾拉必须输入的每个愤怒回复，管理员只需在复选框上点击一次鼠标，也许是100：1的垃圾邮件制作者努力和管理员努力之间的比例。

情景3：一名专业程序员被聘请来提升公司的搜索引擎排名，编写脚本在互联网上插入内容，并带有指向客户网站的超链接。这些程序足够复杂，可以通过社区中的新用户注册页面，注册100个新帐户，每个帐户都有唯一的名称和电子邮件地址。程序员还设置了机器人来回应您软件发送的电子邮件地址验证消息。现在，您有了100个新（虚假）用户，每个用户都发表了两条消息。如果程序员有点马虎，可以想象所有用户注册和内容都是从同一个IP地址发布的，这种情况下，您可以通过向内容管理表添加`originating_ip_address`列，并构建一个管理页面，让您查看并可能删除特定IP地址的所有内容来防御这种攻击。在事后发现这个问题后，您可以通过编写一个管理页面来总结新用户注册和贡献，并具有批量删除功能的复选框，以删除这些用户及其所有内容。清除垃圾邮件后，您可能会在用户注册过程中添加一个“验证您是人类”的步骤，例如，在一个图案位图图像中隐藏一个难以辨认的单词，注册者必须在噪音中识别单词并输入。这将防止机器人建立100个虚假帐户。

无论一个公共在线社区开始时被如何小心和智能地编程，它最终都会成为新形式垃圾邮件的牺牲品。计划否则就像是1950年的美国人，当时抗生素、疫苗和DDT正在消灭一种又一种可怕的疾病。乐观的新郊区居民从未想过病毒会比人类更聪明。每六个月至少要预算几天程序员时间来编写针对垃圾邮件世界中新思路的新管理页面或其他保护措施。

### 更多

+   "面对面和计算机中介社区的比较分析"，作者是阿米塔伊·艾茨尼和奥伦·艾茨尼，出自《信息社会》第15卷，第4期（1999年10月至12月），第241-248页或[http://www.gwu.edu/~ccps/etzioni/E31.html](http://www.gwu.edu/~ccps/etzioni/E31.html)。

+   Linux虚拟服务器，一种仅基于数据包重写的非常简单的负载均衡器；[www.linuxvirtualserver.org](http://www.linuxvirtualserver.org/)

### 时间与动作

硬件扩展练习应该每次花半小时到一小时。不熟悉eBay的学生应该计划额外花半小时熟悉它。人力扩展练习可能需要一到两个小时。第一阶段所需的时间将取决于具体情况。

## 搜索

* * *

从[“规划”章节](planning)中回想起我们可持续在线社区的原则：

1.  由专家编写的磁铁内容

1.  合作方式

1.  ****强大的浏览*和搜索*磁铁内容和贡献内容的设施****

***   授权给中介的方式*   识别对社区施加不当负担的成员以及改变他们的行为和/或将他们从社区中排除而不让他们意识到的方法*   社区成员自己进行软件扩展的方式**

**一个可持续的在线社区是能够容纳新用户的社区。如果新手乔（Joe Novice）通过浏览和搜索找不到与自己需求相关的现有内容，他会问一些问题，这些问题会惹恼其他社区成员：“你没有搜寻过档案吗？”“你没有读过FAQ吗？”长期的社区成员，与其被新奇有趣的话题讨论所激发，更多地感到他们的会员身份是指引新用户到他们“应该”自己能找到的页面上的烦人负担。

社区的第一道防线是高质量的信息架构和导航，正如在[“内容管理”章节](content-management)的最后所讨论的。用户更擅长浏览而不是制定搜索查询。然而，社区的第二道防线是一个出色的全文搜索设施。搜索数据库必须包括由发布者编写和用户贡献的内容。以下是一些示例查询类别：

+   问答：例如，计划前往圣贝尔岛（佛罗里达州）拍摄鸟类，并想知道应该租用哪款长焦镜头，用户键入“最佳镜头圣贝尔”

+   导航：用户知道服务器上存在一个文档，但记不得它在哪里，例如，记得服务器上存在一个关于在花园里拍照的教程，用户键入“花园摄影”

+   任务完成：用户想找到上传照片页面，而不是在键入“照片分享”时找到关于照片分享的讨论

+   管理：用户想找到网站的隐私政策，而不是在键入“隐私政策”后找到有关隐私政策的讨论

在一个大型网站上，用户可能希望以某种方式限制搜索。如果搜索表单位于在线书的章节顶部，提供“整个网站”和“在本书章节内”选项可能是有意义的。如果出版商或其他用户费心评分内容，那么默认搜索可能会限制结果为已评分为高质量的文档。如果网站上有多个讨论论坛，每个论坛本质上都是一个独立的子社区，那么这些页面上的搜索框可能会提供“限制搜索到该论坛的帖子”选项。如果用户一个月没有访问过网站，并想知道是否有新的和相关的内容，网站或许应该提供“限制搜索到最近 30 天内添加的内容”选项。

### SQL 有什么问题（搜索质量）

关系数据库管理系统（RDBMS）听起来就像是这项工作的完美工具。我们有很多数据，而且希望在查询时提供很大的灵活性。假设一个人来到一个运动员网站，并在搜索表单中输入了“跑步”。网站向数据库发送以下 SQL 查询：

> ````
> select * 
> from content
> where body like '%' || :user_query || '%'
> 
> ````

在绑定变量`:user_query`被替换的时候，它变成了：

> ````
> select * 
> from content
> where body like '%running%'
> 
> ````

在 Oracle 中，这不会选取包含相同单词但大小写不同的行。相反，我们会执行以下操作：

> ````
> select * 
> from content
> where upper(body) like upper('%running%')
> 
> ````

如果用户输入了多个词怎么办？查询

> ````
> select * 
> from content
> where upper(body) like upper('%running shoes%')
> 
> ````

不会选取包含短语“跑步鞋”的消息。相反，我们需要多个 where 子句：

> ````
> select * 
> from content
> where upper(body) like upper('%running%')
> and upper(body) like upper('%shoes%')
> 
> ````

这个AND子句不太对。如果有很多包含"running"和"shoes"的文档，那么这些是我们想要看到的文档。然而，如果没有包含所有查询词的行，我们可能需要向用户提供包含部分查询词的行。我们可能需要使用OR、一个评分函数和一个ORDER BY，以便首先返回包含两个查询词的行。如果我们坚持使用AND子句，那么当用户告诉我们她的兴趣越多时，我们将返回的文档越少，最终如果她继续添加单词，将返回"找不到结果"。（请注意，2005年左右的公共搜索引擎，如Google、Yahoo、A9和MSN，*隐式使用AND*，如果用户不断添加单词到查询中，而数据库中没有包含每个单词的文档，则返回0结果。）

采用穴居人SQL程序员方法进行全文搜索存在一些更深层次的问题。假设一条消息包含短语"My brother-in-law Billy Bob *ran* 20 miles yesterday"，但不包含单词"running"。或者一条消息包含短语"My cousin Gertrude *runs* 15 miles every day"。这些应该作为与查询"running"相关的返回，但LIKE子句无法完成任务。需要的是一个系统来对查询词和索引词进行*词干提取*：对于索引和检索，"running"、"runs"和"ran"都将被压缩为词干词"run"。

如果有一条消息说"I attended [the 100th anniversary Boston Marathon](http://www.photo.net/photo/sports/boston-marathon)"？LIKE查询无法捕捉到。需要的是一个强大到足以将"running"和"marathon"之间的联系联系起来的扩展查询的系统。

### SQL有什么问题（性能）

让我们回到最简单的LIKE查询：

> ````
> select * 
> from content
> where body like '%running%'
> 
> ````

关系数据库管理系统必须检查`content`表中的每一行来回答此查询，即必须执行顺序表扫描（O[N]时间，其中N是表中的行数）。假设在`body`列上定义了一个标准的RDBMS索引。`body`的值将用作B树的键，我们可以执行

> ````
> select * 
> from content
> where body = 'running'
> 
> ````

也许，根据实现方式而定，

> ````
> select * 
> from content
> where body like 'running%'
> 
> ````

在O[logN]时间内。但用户的兴趣不仅限于唯一单词为"running"或以单词"running"开头的文档。用户希望找到可能包含单词"running"的文档。单个B树索引是无法帮助的。

### 放弃关系数据库管理系统

通过将所有数据转储到*全文搜索系统*中，我们可以解决性能和搜索质量问题。正如其名称所示，这些系统会索引文档中的每个单词，而不仅仅是标准关系数据库B树中的第一个单词。全文索引可以回答问题“找到包含单词'running'的文档”所需的时间接近O[1]，即，一个不随索引*语料库*大小变化的时间量。如果语料库中有1000万个文档，那么搜索这1000万个文档将不会比搜索1000个文档的语料库花费更多的时间。（在这种情况下接近常数时间需要确保1000万个文档集合不使用比1000个文档集合更大的词汇量，并且不是这样的情况，即90%的文档包含单词“running”。）

它是如何工作的？就像其他索引策略一样：在插入时额外工作以换取查询时的较少工作。考虑构建一个包含英语单词的大表，旁边是包含该单词的文档的数据库键：

> | 单词 | 文档ID |
> | --- | --- |
> | [溜之大吉](http://education.yahoo.com/search/ahd?p=absquatulate) | 612 |
> | [华丽装饰](http://education.yahoo.com/search/ahd?p=bedizen) | 36, 9211 |
> | [隐源性的](http://education.yahoo.com/search/ahd?p=cryptogenic) | 9 |
> | [指甲雕刻](http://education.yahoo.com/search/ahd?p=dactylioglyph) | 7214 |
> | [剥夺继承权](http://education.yahoo.com/search/ahd?p=exheredate) | 57, 812, 4010 |
> | [专栏小品](http://education.yahoo.com/search/ahd?p=feuilleton) | 87, 349, 1203 |
> | [遗传营养的](http://education.yahoo.com/search/ahd?p=genetotrophic) | 5000 |
> | [鹿马](http://education.yahoo.com/search/ahd?p=hartebeest) | 710 |
> | [浓缩](http://education.yahoo.com/search/ahd?p=inspissate) | 549, 21, 3987 |
> | ... |
> | [萨摩耶犬](http://education.yahoo.com/search/ahd?p=samoyed) | 17, 91, 1000, 3492 |
> | [长词的](http://education.yahoo.com/search/ahd?p=sesquipedalian) | 723 |
> | [the](http://education.yahoo.com/search/ahd?p=the) | 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,... |
> | [肥胖的](http://education.yahoo.com/search/ahd?p=uberous) | 6, 800 |
> | [天鹅绒般的](http://education.yahoo.com/search/ahd?p=velutinous) | 45, 2307 |
> | [逆时针方向](http://education.yahoo.com/search/ahd?p=widdershins) | 7300 |
> | [友好的](http://education.yahoo.com/search/ahd?p=xenial) | 3611 |
> | [蕊形的](http://education.yahoo.com/search/ahd?p=ypsiliform) | 5607 |
> | [貂皮](http://education.yahoo.com/search/ahd?p=zibeline) | 4782 |

如果我们将其构建为哈希表，我们可以在表中O[1]的时间内访问一行。如果我们仅保持行按排序顺序排列，我们可以在表中O[log W]的时间内访问任何一行，其中W是我们词汇表中的单词数。性能不随收藏中文档的数量变化……或者说呢？几乎每个英文文档都会包含单词"the"，因此仅返回单词"the"的`document_ids`列的值将花费O[N]的时间，其中N是语料库中文档的数量。无论如何，这一行都不是有用的，因为它不是选择性的，即，我们几乎可以通过对文档表进行顺序扫描并收集所有文档ID来以几乎相同的速度获取相同的信息。在对文档进行索引时，全文搜索系统将引用*停用词*列表，即太常见而不值得索引的单词。对于标准英语，停用词列表包括诸如"a"、"and"、"as"、"at"、"for"、"or"、"the"等单词。

将新文档插入收藏将会很慢。我们必须逐字逐字地遍历文档，并更新与文档中不同单词数量相同的索引行。但在插入时的额外工作将从O[N]的查询时间减少到O[1]。

给定上述形式的数据结构，我们可以快速找到所有包含单词"running"的文档。我们也可以快速找到所有包含单词"shoes"的文档。我们可以快速地对这些结果集求交集，从而得到包含"running"和"shoes"的文档。借助一些更复杂的索引数据结构，我们可以将搜索限制在包含连续短语"running shoes"的文档中，而不是那些单词分开出现的文档中。但假设收藏中有1000个包含这两个单词的文档。哪些文档与用户查询"running shoes"最相关？

我们需要一个新的数据结构：*词频直方图*。这将告诉我们文档中出现的单词以及它们出现的频率，以一种可以轻松调整为文档总长度的方式。

这是托尔斯泰的《安娜·卡列尼娜》[Anna Karenina](http://www.amazon.com/exec/obidos/ASIN/0679410007/pgreenspun-20)第一句的词频直方图：

> | 单词 | 数量 | 频率 |
> | --- | --- | --- |
> | 所有 | 1 | 1/16 |
> | 另一个 | 1 | 1/16 |
> | 但 | 1 | 1/16 |
> | 每个 | 1 | 1/16 |
> | 家庭 | 1 | 1/16 |
> | 家庭 | 1 | 1/16 |
> | 快乐 | 1 | 1/16 |
> | 在 | 1 | 1/16 |
> | 是 | 1 | 1/16 |
> | 其 | 1 | 1/16 |
> | 一个 | 1 | 1/16 |
> | 拥有 | 1 | 1/16 |
> | 相似 | 1 | 1/16 |
> | 不快乐 | 2 | 2/16 |
> | 方式 | 1 | 1/16 |

有人可能会认为这句话作为"所有快乐的家庭都相似，但每个不快乐的家庭都是不快乐的"的文学性更好，但全文搜索软件却认为这种形式更有用。

制作粗略直方图后，通常会根据标准英语中单词的普遍性进行调整。因此，例如，“resemble”的出现比“happy”更有趣，因为“resemble”在标准英语中出现频率较低。像“is”这样的停用词完全被丢弃。*词干提取*是另一个有用的改进。在索引和查询中，我们将所有单词转换为它们的词干。例如，“families”的词干词是“family”。通过词干提取，对“families”的查询将匹配包含“family”的文档，反之亦然。

给定一组直方图，可以回答诸如“显示与此相似的文档”或“显示直方图最接近用户输入字符串的文档”等查询。文档之间的相似性查询可以通过比较已存储在文本数据库中的直方图来处理。搜索字符串“新西兰的铂矿”可能首先通过丢弃停用词“在”和“新”来处理。通过直方图比较，软件将提供包含“铂矿”、“矿山”和“新西兰”最多出现次数的文章。假设“新西兰”比“铂矿”更罕见。那么，一个包含“新西兰”一次的文档优于一个包含“铂矿”一次的文档。一个包含*仅*“铂矿矿山新西兰”这几个词的文档比一个包含100,000个词，其中三个恰好与查询词匹配的文章更匹配。

这种系统的强大之处令人着迷，并引发了一个问题：“我们能否从专门的全文搜索数据库系统中运行整个Web应用程序？”的确，为什么不完全放弃关系数据库管理系统呢？

我们不会放弃关系数据库管理系统，因为我们将其放入以处理并发问题：两个用户同时尝试更新相同项目。更好的查询工具很好，但除非它处理并发问题和关系数据库管理系统一样好，否则我们不能将其作为我们的主要数据库管理系统。

一个务实的方法似乎是从将所有文档保存在关系数据库管理系统中开始：文章、用户评论、讨论论坛帖子等。每晚更新一次或每次添加新文档时，更新全文搜索系统的集合。标准用户体验和工作流程中的页面从关系数据库管理系统中操作。然而，每个页面右上角的搜索框会查询全文搜索系统。让我们称之为*分系统*设计。

**** 插入图 ****

**图12.1：**提供全文搜索的*分系统*方法。应用程序的内容存储在关系数据库管理系统中。脚本定期在专门的文本数据库中维护第二份副本。Web服务器程序执行对关系数据库管理系统的查询、插入和更新。然而，当用户请求全文搜索时，查询会发送到文本数据库。

反对分离系统方法的一个论点是，文档集合会有两份副本。在一个拥有绝对高容量的 200 美元硬盘驱动器的时代，这并不是一个有力的论点。几乎不可能用人类输入的文字填满现代硬盘驱动器。可以用视频或音频流填满硬盘驱动器，但不是文本。而且无论如何，一些全文搜索系统可以在不保留原始文档的情况下构建文档集合的索引，也就是说，在 RDBMS 中实际上只有一个文档的副本。

使用关系数据库管理系统（RDBMS）和全文搜索系统同时的第二个反对理由是，这两个集合会不同步。如果 Web 服务器在进行 RDBMS 事务时崩溃，所有工作都会被回滚。如果 Web 服务器同时向全文搜索系统插入文档，可能全文数据库会包含实际上并不在站点主页面上的文档——站点是由 RDBMS 生成的。另外，RDBMS 插入可能成功，而全文插入失败，导致站点上有可用的文档，但无法搜索。这个论点也最终缺乏说服力。的确，RDBMS 是管理事务和并发性的方便且几乎无误的方法。然而，这并不是唯一的方法。如果雇佣足够细心的程序员和足够专注的系统和数据库管理员，就有可能保持两个数据库同步。

第三个反对分离系统的论点是接口的不一致性。假设我们的 RDBMS 是 Oracle。Web 开发人员知道如何通过 Active Server Pages 与 Oracle 交流。桌面程序员知道如何通过 C API 与 Oracle 交流。市场人员知道如何通过各种报告工具与 Oracle 交流。一些个人用户已经弄清楚如何从标准桌面程序（如 Microsoft Excel 和 Microsoft Access）与 Oracle 交流。如果不仅要教导新程序员关于 RDBMS，还要教导他们关于各种专门工具，每个工具都有自己的接口库，那么引入新程序员的成本就会增加。

然而，使用关系数据库管理系统和“附加式”全文搜索系统的最佳论点是，分离系统并不自然地支持必要的查询类型：

+   显示由街道地址在距离邮政编码 02138 10 英里内的用户编写的与“最佳餐厅”匹配的文档

+   显示由其他用户评价为高于平均水平的用户编写的与“工作室摄影”匹配的文档（这些内容项的评级存储在 RDBMS 表中）

+   显示由最近的分类广告吸引了超过 5 个竞标的用户编写的与“最佳广告技巧”匹配的文档

### 增强关系数据库管理系统

考虑一个全文索引系统。它需要一种写东西的方式（索引数据结构），通常选择操作系统文件系统。它需要一种在过程性计算机语言中执行计算的方式，通常是2004年左右的C语言。

考虑一个现代关系数据库管理系统。它提供了一种写东西的方式：CREATE TABLE和INSERT。它提供了一种在过程性语言中执行软件的方式：在Oracle的情况下是C、Java或PL/SQL；在Microsoft SQL Server的情况下是任何.NET支持的计算机语言。

为什么不能在RDBMS内部构建一个全文搜索索引器？这正是一些商业RDBMS供应商所做的。Oracle在这个领域是先驱，相关的Oracle产品称为"Oracle Text"。

> ````
> create table content (
> 	content_id		integer primary key,
> 	refers_to		references content_raw,
> 	-- who contributed this and when
> 	creation_user		not null references users,
> 	creation_date		not null date,
> 	modified_date		not null date,
> 	mime_type		varchar(100) not null,
> 	one_line_summary	varchar(200) not null,
> 	body			clob,
> 	editorial_status	varchar(30) 
>           check (editorial_status in ('submitted','rejected','approved','expired'))
> );
> 
> -- create an Oracle Text index (the product used to be called
> -- Oracle Context, hence the CTX prefixes on many procedures)
> 
> create index content_text 
> on content(body) 
> indextype is ctxsys.context;
> 
> -- let's look at opinions on running shoes from 
> -- users who registered in the last 30 days, sorting
> -- results in order of decreasing relevance
> 
> select 
>   score(1), 
>   content.content_id, 
>   content.one_line_summary, 
>   users.first_names,
>   users.last_name
> from content, users
> where contains(body, 'running shoes', 1) > 0
> and users.registration_date > current_timestamp - interval '30' day
> and content.creation_us
> er = users.user_id
> order by score(1) desc;
> 
> ````

在前面的例子中，Oracle Text在`content`表的`body`列上构建了自己的索引。当在表上定义了Text索引时，就可以在WHERE子句中使用`contains`运算符。Oracle RDBMS SQL查询处理器足够聪明，知道如何使用Text索引来回答这个查询，而不必进行顺序表扫描。在同一个查询中可能有多次调用`contains`。因此，`contains`的最后一个参数是一个标识查询的整数，在本例中为"1"。可以在select列表或ORDER BY子句中使用函数`score`和一个标识从哪个`contains`调用中提取分数的参数。

Oracle Text是Oracle RDBMS中较难和复杂的产品之一。例如，如果您想要能够搜索出现在`one_line_summary`或`body`中的短语并结合相关性分数，您需要构建一个多列索引：

> ````
> ctx_ddl.create_preference('content_multi','MULTI_COLUMN_DATASTORE');
> 
> ctx_ddl.set_attribute('content_multi', 'COLUMNS', 'one_line_summary, body');
> 
> create index content_text 
> on content(modified_date) 
> indextype is ctxsys.context
> parameters('datastore content_multi');
> 
> ````

注意，索引本身是建立在`modified_date`列上的，该列本身没有被索引。在设置COLUMNS属性的`ctx_ddl.set_attribute`调用中确定了哪些列被索引。

> 有一个系统的例子，解决了从不同的Oracle表中索引文本的挑战，参见[http://philip.greenspun.com/seia/examples-search/site-wide-search](examples-search/site-wide-search)

Oracle Text 还具有其默认搜索模式为精确短语匹配的特性。一个用户在搜索引擎中输入“zippy pinhead”时，期望找到包含短语“Zippy the Pinhead”的文档。如果您的脚本直接将原始用户查询传递给`Contains`运算符，这种情况就不会发生。更为棘手的是，当用户输入包含 Oracle Text 特殊处理字符的查询字符串时会发生什么。如果您的过程脚本没有捕获错误，这可能导致 SQL 查询引发错误，并向用户返回“服务器错误 500”。如果 Oracle Text 有一个名为“ProcessRawQueryFromWebForm”或类似的内置过程就好了。但至少在我们查找的 Oracle 版本 10g 文档中没有找到这样的过程。下一个最好的选择是一个名为`pavtranslate`的过程，可从[http://technet.oracle.com/sample_code/products/text/htdocs/query_syntax_translators/query_syntax_translators.html](http://technet.oracle.com/sample_code/products/text/htdocs/query_syntax_translators/query_syntax_translators.html)获取。

通过“INSO filters”选项，Oracle Text 具有在 BLOB 列中索引各种文档的能力。例如，该软件可以识别 Microsoft Excel 电子表格，提取文本并将其添加到索引中。同时，它足够智能，知道何时完全忽略一个文档，例如，如果 BLOB 列填充有 JPEG 照片。

### 练习 1：预期查询

询问客户在您的社区中预计最常见的查询类型是什么。例如，在学术网站中，输入一个人的姓名并获取该人撰写的所有出版物可能非常重要。在购物网站中，查询品牌名称并返回产品评论可能至关重要。只有您的客户可以权威地说出。

### 练习 2：记录您的设计

在 /doc/search 放置一个文档，描述您团队提供站点内容全文搜索的计划。如果您的内容管理系统让您在文件系统和 RDBMS 中混合使用，解释您将如何同步和统一这些文档在一个全文索引中。如果需要每晚维护脚本，请在此处记录它们。

将客户对练习 1 的答案包含在本文档中。

### 练习 3：构建基本搜索模块

构建一个基本的搜索模块，提供以下功能：

+   用户从 URI `/search/` 查询，目标是 `/search/results`

+   管理员能够查看语料库的大小和结构统计信息（每种类型的文档数量，集合的总大小）

+   管理员能够删除并重建全文索引。遗憾的是，这在大多数工具中定期是必要的，您不希望出版商被迫使用晦涩的 shell 命令。一个理想的解决方案将完全可以从 Web 浏览器中维护。

### 练习 4：大哥

一般用户更喜欢浏览而不是搜索。如果用户为了获得标准答案或执行常见任务而进行搜索，那么可能是站点的导航或信息架构存在问题。如果用户进行搜索并从您的全文搜索设施中得到零结果，那么您的索引或站点内容需要补充。

记录用户搜索字符串在 RDBMS 表中，并让管理员查看热门搜索词（按天、周或月）。确保突出显示任何导致用户看到页面“没有匹配您的查询”的搜索。请问自己是否可以实施一个设施，使站点管理员能够查看搜索字符串和输入这些字符串的用户的报告，这是否符合道德。

更新您的 `/doc/search` 文件以反映此设施的添加。

### 练习 5：链接

在您社区的页面中找到逻辑位置，以链接到搜索设施。例如，在许多站点上，在每个页面的右上角放置一个快速搜索框是有意义的。在大多数站点上，从搜索结果页面返回到搜索是有意义的，可以使用一个默认填充原始查询的“再次搜索”框进行链接。

确保您的主要文档页面链接到这个新模块的文档。

### 与公共搜索引擎合作

如果您的在线社区位于公共互联网上，您可能希望看到您的内容被公共搜索引擎（如Google ([www.google.com](http://www.google.com)））索引。首先，Google 必须知道您的服务器。这要么是当已经在 Google 索引中的某人链接到您的站点时发生，要么是当您从 google.com 主页的表单中手动添加您的 URL 时发生。其次，Google 必须能够读取您服务器上的文本。至少在 2005 年之前，公共搜索引擎都没有实现光学字符识别（OCR）。这意味着嵌入在 GIF、Flash 动画或 Java 小程序中的文本不会被索引。这些文本可能对视力完美的人类用户可读，但对于爬行网络以建立公共搜索引擎数据库的计算机程序来说是不可读的。第三，Google 必须能够访问您服务器上的所有页面。例如，如果您要求注册才能查看讨论，那么除非您的软件足够聪明以识别是 Google 在请求，然后做出例外，否则这些讨论将不会被 Google 索引。如何识别 Google？以下是来自 philip.greenspun.com 访问日志的一行代码（为了可读性插入了换行符）：

> ````
> 66.249.71.53 - - [10/Feb/2005:02:13:15 -0500]
> "GET /sql/triggers.html HTTP/1.0" 200 0 ""
> "Googlebot/2.1 (+http://www.google.com/bot.html)"
> 
> ````

注意末尾的用户代理标头：Googlebot/2.1，其中包含了建议 Web 出版商查看[http://www.google.com/bot.html](http://www.google.com/bot.html)以获取更多信息。由于一些搜索引擎会存档它们索引的内容，您不希望向成员提供真正私密内容的免费注册访问。理论上，在 HTML 文档的 HEAD 中放置`<META NAME="ROBOTS" CONTENT="NOARCHIVE">`可以防止搜索引擎存档页面，但机器人不一定会遵循这样的指令。

一些搜索引擎允许您提供索引提示和用户查看搜索结果页面时的提示。例如，在本书的目录页中，我们在 HEAD 中有以下 META 标签：

> ````
> <meta name="keywords" content="web development 
> online communities MIT 6.171 textbook">
> 
> <meta name="description" content="This is the textbook for the MIT
> course Software Enginering for Internet Applications">
> 
> ````

"keywords" 标签添加了一些与文档相关但在可见文本中不存在的词语。这将有助于那些决定搜索"MIT 6.171 教科书"的人。"description" 标签可被搜索引擎用于总结页面内容。如果不存在，搜索引擎可能会显示页面上的前 20 个词或遵循一些启发式方法来构建一个合理的摘要。这些标签经常被滥用。出版商可能会在与这些词无关的网站上添加流行的搜索词，比如"性爱"，希望吸引更多读者。公司可能会将竞争对手的名称添加为关键词。用户除非费心使用浏览器的"查看源代码"命令，否则不会看到这些卑劣的把戏。由于这种滥用的历史，许多公共搜索引擎忽略这些标签。

> 请参阅[http://searchenginewatch.com/resources/metasuits.html](http://searchenginewatch.com/resources/metasuits.html)以了解关于 meta 标签内容的各种诉讼案例。

一种特别破坏性的做法是"隐匿"，其中 Web 服务器被编程为向搜索引擎和人类用户发送完全不同的页面（通过其用户代理标头中包含"Mozilla"或"MSIE"来识别）。不道德的出版商会查找公共搜索引擎上当前最流行的搜索词（[http://searchenginewatch.com/facts/searches.html](http://searchenginewatch.com/facts/searches.html)提供了对各种搜索服务的窗口），将这些词串联在一起，并向搜索引擎提供这些词的混合体。与此同时，当普通用户访问网站时，页面呈现的将是平淡无奇的产品推销。Google 威胁称，任何从事这种做法的网站都将被其索引中删除。

#### `/robots.txt` 文件

假设您不希望公共搜索引擎索引服务器上`/staging/`目录下的任何内容。这些内容并不是绝密的，但您也不希望在时机未到之前发布。您也不希望同一内容在 Google 索引中出现两次，一份在暂存区，一份在站点的最终位置。

你需要阅读 Web 排除标准，这是 Web 发布者和 Web 爬虫之间通信的协议，可从 [http://www.robotstxt.org/wc/norobots.html](http://www.robotstxt.org/wc/norobots.html) 获取。作为发布者，你需要在你的站点上放一个文件，位于 `/robots.txt`，包含机器人的指令。下面是一个示例，排除了暂存目录：

> ````
> User-agent: *
> # let's keep the robots away from our half-baked stuff
> Disallow: /staging
> 
> ````

`User-agent` 行指定了对哪些机器人适用这些禁令。每个 `Disallow` 都要求机器人不要查看特定目录。虽然没有什么要求机器人遵守这些禁令，但是这一标准似乎已被所有主要搜索引擎采纳。

> 访问 [http://www.ibm.com/robots.txt](http://www.ibm.com/robots.txt) 来了解一个站点可能如何随着时间的推移而发展。

### 练习 6: robots.txt

在服务器上放置一个文件 `/robots.txt`，将机器人排除在服务器的适当部分之外。在文件顶部放一些注释，解释是谁创建了这个文件，何时创建的，以及排除背后的原因。

> 如果你正在做一个完全基于数据库的内容管理系统，你可以自由地将 robots.txt 文件的内容放在关系数据库管理系统中，只要在请求 URI `/robots.txt` 时提供即可。

### 练习 7: 客户签字确认

与你的客户一起审查搜索功能，包括用户和管理员页面。记录下客户对这个新模块的反应，特别注意客户可能对站点上典型查询有什么新想法。

### 未来展望

随着在线社区的成长和扩大，用户被“有 100,000 份文档符合您的查询”所淹没的可能性越来越大。当社区是新的和小的时候，仅通过阅读站点上所有内容的标题，即浏览，就可能搜索到答案。因此，随着社区的增长，信息检索工具的重要性也越来越大。本章的练习着重于通过呈现与用户查询相关的文档链接来回答用户的查询。假设我们建立了一个搜索功能，总是返回语料库中最相关的文档。这是一个最优解吗？只有当你认为用户喜欢阅读时才是最优解。

假设 Joe 用户访问 photo.net 并在搜索框中输入“需要三脚架的快门速度是多少？”。可以合理地假设 Joe 想要阅读一个包含这个问题答案的 10,000 字的文档吗？还是 Joe 更愿意得到……他问题的答案。答案“在慢于 1/镜头焦距的快门速度下”比包含此信息的文档要小得多，阅读速度也要快得多。

要了解如何在全文索引器之上构建问答系统的情况，请阅读《将问答系统扩展到网络》（Cody Kwok、Oren Etzioni、Dan Weld；WWW10 会议，2001年5月；[http://www.www10.org/cdrom/papers/pdf/p120.pdf](http://www.www10.org/cdrom/papers/pdf/p120.pdf)），该文章描述了华盛顿大学构建的系统。该系统包括所有预期的语言技巧以及用于解决 *噪音* 的互联网特定问题的代码。传统的信息检索系统是为与权威性文档一起工作而设计的，例如《大英百科全书》，一本公司政策手册或者飞机设计说明书。语料库中的文档被认为具有权威性。对于诸如“乔阿基诺·罗西尼是在哪一年出生的？”、“购买57,300美元需要多少个签名？”或者“飞机的翼展有多宽？”等问题，不会有四个不同的答案，其中三个完全错误。然而，在在线社区的用户撰写的内容中，似乎可以安全地假设，虽然平均答案很可能是正确的，但对于每100个正确的答案，至少会有三到四个不正确的答案。即使数据不需要解释，也会有拼写错误。例如，[在2005年2月搜索“rossini 1792-1868”](http://www.google.com/search?hl=en&q=rossini+1792-1868)返回了50,900个文档；[搜索“rossini 1792-**1869**”](http://www.google.com/search?hl=en&q=rossini+1792-1869)返回了43个文档。建立在轻度审核的用户撰写内容之上的问答系统将不得不像人类一样行使判断力：文档A与文档B各有多少篇？相互冲突的文档的相对权威性是多少？两个相互冲突的文档中哪一个更近？

移动互联网设备对信息检索施加了更大的压力。连接速度更慢。屏幕更小。对于用户来说，使用语音浏览器驾驶汽车时，深入查看搜索引擎返回的可能与查询相关的20个文档是不切实际的。

如果你想从下一次互联网崩溃的尘埃中脱颖而出，就要致力于信息检索。

### 更多

+   [http://www.oracle.com/technology/products/text/](http://www.oracle.com/technology/products/text/)，Oracle Text 的技术概述

+   [http://trec.nist.gov](http://trec.nist.gov/)，用于 Text REtrieval Conferences（TREC）的会议记录

### 时间与动作

两次客户访谈，分别在练习开始和结束时进行，每次都不应超过一小时。

搜索设计和文档应该是一个团队的努力，需要花费一到两个小时。

最幸运的团队将能够在一个小时内让他们的搜索系统正常运行起来。使用难以安装的搜索系统的不幸团队可能需要大部分一天的时间。只有一个内容表和没有静态HTML页面的团队应该能够在一到两个小时内构建基本的页面脚本。对于管理跨多个表和文件系统的内容的设计，将需要额外的时间。

剩下的练习应该能在2到4个程序员小时内完成。

## 重新规划

* * *

自从[“规划”章节](planning)以来发生了很多变化。你对挑战有了更好的理解，这可能在你的脑海中激发了新的服务想法。你的客户有机会看到终极服务的原型，这可能在他们的脑海中激发了新的想法。你的客户应该对你的能力有更高的尊重，因此愿意为这个项目投入更多的思考和注意力。考虑到大多数计算机程序员在以下领域存在严重的缺陷：

+   深思熟虑一个计算机应用程序应该做什么

+   编写设计文档

+   编写实施计划

+   记录重要特性或设计决策

+   清晰的模块化设计

+   运用良好的判断力（例如，在只有一两周的时间内，不要试图构建完整复杂的东西）

+   传达项目状态

在你已经证明你比以前与客户合作过的软件开发人员更出色的程度上，你会发现他们对你的信心自课程开始以来已经增加。

### 你为什么在与客户交流

回想一下在[“讨论”章节](discussion)进行可用性测试时你学到了多少。计算机科学教科书和关系型数据库管理系统手册可以教你如何处理并发，但只有对用户的观察和互动才能教会你如何构建更好的用户体验。你的客户掌握着王国的钥匙：(1) 吸引人们的内容；(2) 发布服务的权威；(3) 对可以链接到新服务的现有网站的编辑权力；(4) 那些可能会发现新服务有用的人的电子邮件地址和电话号码。

如果你能在课程结束之前启动你的在线学习社区，你将有机会从第一批用户那里学习，并通过进行微小改变，在课程的最后一天拥有一个极大改善的应用程序。

### 清理代码

在开始课程其余部分的规划过程之前，值得回顾一下已经完成的工作，以便(a)稍微整理一下，和(b)熟悉需要进行重写的内容。逐个审查每一页脚本、数据模型文件和文档页面，并自问以下问题：

+   每个脚本都签名并注明日期了吗？头部说明了脚本的功能吗？描述仍然准确吗？

+   脚本中的所有 SQL 查询是否可读且正确缩进？ （请参阅 [http://philip.greenspun.com/sql/style](http://philip.greenspun.com/sql/style) 获取一些提示）

+   数据模型文件是否包含适当的注释？

+   文件和变量名称是否一致？

+   结构是否符合您在“软件模块化”章节练习中制定的标准？

+   如果你正在使用某种模板或代码后台系统，你是否在每个页面上都使用了它？

+   文档是否全部签署、日期化并且链接正确？

+   文档是否与您在“软件模块化”章节练习中制定的标准一致？

修复小的差异，并记录大的差异以纳入您的课程其余部分实施计划中（见下文）。

### 清理用户体验

在多个程序员共同开发一个系统时，很容易在各种页面的设计中出现小的不一致。 提出一组对用户在您的应用程序中完成的重要任务进行代表性任务，并在 `/doc/testing/representative-tasks` 中记录这些任务。 作为团队一起完成这些任务，看看是否确实有些小问题应该在用户看到的方面进行清理。

与此同时，寻找更大的问题。 问问自己，你建立的应用程序内的任务完成是否与流行的公共互联网应用程序（如亚马逊、eBay 和 Google）的页面设计和流程一致。 记住，独特的*内容*应该区分一个网站和另一个网站，而不是独特的界面。

您是否将信息上升到最高可能的级别？ 例如，在显示来自数据库表的事物类别的页面上，您的应用程序是否在每个类别旁边显示了一个计数，表示该类别中有多少个项目？ 或者用户必须再点击一层才能找出一个类别中有多少项（然后再返回并再次点击进入另一个类别，然后再返回并再次点击进入另一个类别，...）？

您是否让信息成为界面？ 例如，在前面列出的类别列表示例中，用户是否通过点击类别名称（“信息”）来导航下去，还是必须点击“点击这里获取更多信息”文本字符串或图标？

屏幕空间中有多少被网站官僚主义占用，以及多少可用于显示信息？ 网站官僚主义包括诸如标识性徽标、导航链接和图标、迷你搜索表单以及版权和政策说明等内容。 这些官僚主义是否可以消除，或者至少被推到页面底部？

### 练习 1：轻量级可用性测试

在讨论论坛用户测试和本章的清理项目之间，您已经清理了用户界面的明显问题。 现在是进行另一次可用性测试的好时机，这次测试比上次少结构化一些。

找一个以前从未见过你的项目的人，请他们通过 `/doc/testing/representative-tasks` 中的任务，并让你的整个团队观察。在 `/doc/testing/planning-redux-usability` 中写下一个简短的报告，说明情况如何。

### 练习 2：特性网格

通过电话或面对面会议，与你的客户一起确定在线学习社区在启动前必须完成的工作。启动可以是私密的（仅限被邀请者），软启动（公开，但不进行广告宣传），或公开。重要的是，应用程序被视为完成，并且至少向几十个用户展示。

小心 layperson 的倾向，试图尽可能多地包含他或她能想到的特性。当一个网站还很年轻时，它应该简单，拥有很少的合作区域。如果有 30 个独立的讨论论坛和评论区，前 15 个用户将如何找到彼此呢？提醒你的客户，[www.slashdot.org](http://www.slashdot.org)，“科技新闻”，自 1997 年以来一直作为单一未分类的论坛运行，并且在 2005 年每月为大约 1 亿人次的读者提供大约 250 万个页面。

竞争对手的网站是否有很多花哨的功能？这不是推迟发布的理由，直到构建了一个同等复杂的用户界面。竞争对手网站的用户实际上是否在使用所有这些功能？还是大多数用户聚集在几个地方？

对于在线社区的世界新手来说，启动日似乎是互联网应用生命中最重要的一天。实际上，比起刚开始的第一个月，在它的第 36 个月会有更多的用户访问该网站。唯一的风险是发布了一个如此糟糕的东西，以至于测试用户会感到疏远并永远不会再返回。在 60 亿人口的世界中，这可能看起来不是一个严重的问题，但如果潜在用户是，例如，被邀请尝试新内部网络的公司员工，那么给人一个良好的第一印象可能是至关重要的。以下是给人一个良好第一印象的最低要求：

+   高质量的内容，在互联网上无法获得，并且与用户当前的任务相关

+   简单快捷的用户界面（没有 30 秒的 Flash 下载或令人困惑的死胡同）

如果客户提出了一个不符合这些要求的特性，请问一个问题：“为什么这会阻碍我们发布？”服务没有发布的每一天都是你不从用户那里学到东西的一天。服务没有发布的每一天都是客户组织没有学会如何操作服务的一天。

与你的客户合作，开发一个特性网格，将所需的特性分成以下类别：

1.  最小可启动特性集，即启动所需的东西

1.  版本 1.0（尽量在本课程结束前完成）

1.  版本 2.0（写下计划的后续实施）

大多数管理页面可以从最小可发布功能集中排除。在没有用户的情况下，就不会有用户活动，因此几乎不需要统计数据或内容的管理和组织。对用户和客户有价值且相对容易实现的事项应包含在1.0版本中。任何需要大量编程工作或目前无法完全指定的事项应推迟到2.0版本。

将您的功能网格放在`/doc/planning/YYYYMMDD-feature-grid`。

### 练习3：实施计划

现在你已经想清楚要做什么了，是时候写下你要如何做了。编写一个实施计划，涵盖团队成员和客户在本课程最后一天之前的所有活动。实施计划应包括代码冻结、验收测试、发布和任何重新发布的日期。实施计划应明确具体地说明每个团队成员将做什么，更重要的是*客户的责任是什么*。“乔客户将在五月初前交付额外的网站内容”太模糊了。更好的做法是：“乔客户将在5月2日前交付/about-us、/privacy、/copyright和/contact页面的内容”。

记住，你的目标是尽快推出服务，以便每个人都能通过与真实用户的互动学习。

你如何估计执行计划中任务所需的小时数？毕竟，你以前从未执行过实施计划中的事项，否则它们就不会在“待实施计划”中。估算新项目的最佳工具是记录完成一堆旧项目所需时间。新项目与哪个最相似？例如，假设你花了三天时间构建一个讨论论坛系统，现在被要求构建一个分类广告系统。这两个系统需要相似数量的数据库表。这两个系统接受用户内容并需要某种管理员批准。如果在当前运行讨论论坛的服务器上构建，分类广告系统不需要任何新软件、子系统或其他你尚未安装和使用的工具。因此，估计分类广告系统为一个三天的项目可能是安全的。

将完成的计划放在`/doc/planning/YYYYMMDD-implementation`，并通过电子邮件通知客户和教师，告知他们计划已准备好最终审查。

### 这是必要的吗？

假设你的团队只有两个人，而你的客户是一个团队成员的母亲，是一家当地潜水店的老板。是否有必要参与这样一个正式的流程？通过坐在一个房间里编写代码，定期叫妈妈过来看看已完成的工作，是否可能获得成功的结果？

绝对。

那么，当团队如此小的时候为什么要强调流程呢？这是每个软件开发人员都应该养成的一个好习惯，尤其是现代软件项目往往跨越公司和国际边界。

从简决策者的角度考虑一个软件项目。简不了解好代码和坏代码之间的区别。她也无法看着一个大部分完成的项目，然后计算出还需要多少编码才能使其正常工作。简决策者不会被一个有着在最后一刻奇迹般地将一切整合起来的团队所安慰。她怎么知道奇迹会不会再次在她的项目上发生呢？

简会被流程和表现出对他们和客户来说是可预测的程序员所安慰。计划语言越详细，简就会越受安慰，特别是如果工作已经外包给另一家公司。

总之，更大的团队需要更多的流程，更长的项目需要更多的流程，而跨企业和/或国际边界的工作需要更多的流程。你们这门课的项目是由一个小团队在一个紧凑的时间表内完成的，理想情况下，与客户在同一个城市。使用一个并非绝对必要的流程对你有什么好处呢？

使用更彻底的流程的一个好处是，在展示你的工作时，你会给人留下更深刻的印象。进行程序员面试的人已经见过很多代码猴子，但他们不会见过太多拿着他们清晰计划和时间表的打印件出现，然后谈论他们如何实现这些计划和时间表的人。

更深层次的好处是，你会变得擅长流程，它在后续项目中将变得更轻松。

最深层次的好处是，按照书面计划工作将成为一种无意识的习惯。飞行员接受训练，要极其仔细和一贯地遵循清单和程序。如果每次飞行的顺序或方式不同，飞机不会从天空中掉下来，如果在一个阳光明媚、维护良好的飞机上飞行，很多事情都不重要。然而，除非清单和程序已经成为一种习惯，否则遇到恶劣天气或机械问题的飞行员有很大几率丧生。人们会告诉自己“今天我有点马虎，因为这是一次不具挑战性的飞行，但当我需要时我会小心的”，但事实上，除非小心的技能已经成为习惯，否则它们并不是很有用。

### 练习4（给教练）

给每个学生团队的客户打电话，询问他们对以下陈述的认同程度：

1.  我认为我的学生团队所做的工作在质量上可以与我每天访问的公共互联网上的服务相媲美。

1.  我的学生团队构建的服务是我们在学期初概述的挑战的完整解决方案。

1.  我的学生团队构建的服务组织良好，易于使用。

1.  我对管理页面上提供给我的信息和实用性印象深刻。

1.  我了解已经完成的工作，课程结束时将要完成的工作，以及留给2.0版本的工作。

1.  我的学生团队让我很容易自己检查他们的进展。

1.  我的学生团队让我充分了解他们的进展。

1.  我的学生团队在设计和功能决策中适当地让我参与。

1.  我对我的学生团队所做的用户测试的彻底性印象深刻。

1.  我对文档的清晰度和彻底性印象深刻。

1.  我认为如果我的学生团队消失了，一个新的程序员接手这个项目会很容易。

1.  我对我的服务的手机界面印象深刻。

1.  我对我的服务的VoiceXML界面印象深刻。

1.  我的学生团队是我曾经合作过的最优秀的工程师团队。

1.  我的学生团队由我非常愿意再次合作的人组成。

通过将每个问题的分数相加来评分这个练习：0表示“不同意”或含糊的同意（客户不会想说年轻志愿者的坏话），1表示“同意”，2表示“强烈同意”。

### 时间和动作

整个团队共同努力应该能在一个工作日或6至8小时内完成代码和用户体验的清理工作。可用性测试不应超过一小时。对于一直保持计划文件、时间表和客户会议最新的团队，功能表格和实施计划应该不到一小时，因为这些信息已经写下并保存在他们的服务器上。对于计划和文档工作有所疏忽的团队，可能需要五个小时来恢复当前性。

## 使用HTTP、XML、SOAP和WSDL进行分布式计算

* * *

> "我认为也许全球市场只需要五台计算机。" - IBM主席托马斯·沃森，1943年

或许沃森错了四个。

在20世纪90年代初，很少有人听说过蒂姆·伯纳斯-李的万维网，而那些听说过的人中，很少有人意识到它的重要性。毕竟，自20世纪70年代以来，计算机就已经连接到互联网，计算机之间的数据传输是司空见惯的。然而，Web带来了一些真正新颖的东西：将整个互联网视为单一信息空间的视角，用户访问数据时可以通过跟随链接在机器之间无缝透明地移动。

目前，应用程序的视角转变类似，这一次涉及应用程序。尽管分布式计算一直存在，只要存在计算机网络，应用程序就仅最近开始大规模部署，利用许多互连的机器作为一个巨大的计算媒介。这种可能性的实现是基于HTTP构建的新的分布式计算协议，并且这些协议是为*程序与程序交互*而设计的，而不是为*使用浏览器浏览*而设计的。

有几种协议：

1.  **数据交换：** 要比从人类阅读的Web页面中抓取文本更好的东西。正如您在“基础知识”章节中看到的那样，您可以在这里使用XML。

1.  **程序调用：** 一种进行*远程方法调用*的方法，即程序调用在其他机器上运行的程序并回复此类调用。这里提出的新标准是SOAP（简单对象访问协议），于2000年5月提交给Web联盟。

1.  **自我描述：** 一种机器可读的方式，使程序描述自己应该如何被调用，例如使用Web服务描述语言（WSDL）。

1.  **发现：** 程序自动了解其他程序的方法，例如通过统一描述发现与集成（UDDI），由[www.uddi.org](http://www.uddi.org)标准化。

我们目前正在从应用程序部署在个别机器和Web服务器上的环境中移动，转向一个由许多不同的机器组成的片段 —— 在当前的行话中称为*服务* —— 组成的世界，在这个世界中，服务无缝透明地相互交互，以产生整体效果。尽管这种变化的后果可能不大，但它也可能像引入Web一样深远。无论如何，公司正在推出利用新基础架构的新*Web服务*框架。微软的*.NET*就是这样的框架。

在本章中，您将构建使用Web服务来将在线学习社区中的数据与[Google](http://www.google.com/)和[Amazon](http://www.amazon.com/)中的远程数据相结合的应用程序。您将构建SOAP客户端来访问这些公共服务。在最后的练习中，您将创建自己的服务，该服务提供有关您社区中最新内容的信息。您将使此服务同时可用于SOAP的*法定标准*和RSS的*事实标准*，RSS是从网络日志世界中发展而来的。

****插入图示*****

**图14.1：** Web服务交互。人类用户通过HTTP协议与服务器A和B交流，接收HTML页面中的结果。当服务器A需要在服务器B上调用一个过程时，它首先尝试弄清楚函数的名称及其参数。这些信息在Web服务描述语言（WSDL）文档中返回。使用该WSDL文档中的信息，服务器A能够制定一个合法的简单对象访问协议（SOAP）请求并处理结果。

### 网络上的SOAP

根据你使用的工具，你可能永远不需要知道SOAP请求和响应实际是什么样子的。尽管如此，让我们从*SOAP消息*的幕后一瞥开始，这些消息通常嵌入在HTTP POST中通过网络发送。

这是一个关于假想的“在线用户”服务的原始SOAP请求/响应对，返回最近N秒内活跃用户信息的例子：

**请求**（加上空格以提高可读性）

> |  ``` POST /services/WhosOnline.asmx HTTP/1.1
> Host: somehost
> Content-Type: text/xml; charset=utf-8
> Content-Length: length
> SOAPAction: "http://jpfo.org/WhosOnline"
> 
> <?xml version="1.0" encoding="utf-8"?>
> <soap:Envelope
>     
>     
>     >
>   <soap:Body>
>     <WhosOnline >
>       <n_seconds>600</n_seconds>
>     </WhosOnline>
>   </soap:Body>
> </soap:Envelope>
> 
> ```  |
> | --- |

**响应**（加上空格以提高可读性）

> |  ``` HTTP/1.1 200 OK
> Content-Type: text/xml; charset=utf-8
> Content-Length: length
> 
> <?xml version="1.0" encoding="utf-8"?>
> <soap:Envelope
>     
>     
>     >
>   <soap:Body>
>     <WhosOnlineResponse >
>       <WhosOnlineResult>
>         <user>
>           <first_names>Eve</first_names>
>           <last_name>Andersson</last_name>
>           <email>eve@eveandersson.com</email>
>         </user>
>         <user>
>           <first_names>Philip</first_names>
>           <last_name>Greenspun</last_name>
>           <email>philg@mit.edu</email>
>         </user>
>         <user>
>           <first_names>Andrew</first_names>
>           <last_name>Grumet</last_name>
>           <email>aegrumet@alum.mit.edu</email>
>         </user>
>       </WhosOnlineResult>
>     </WhosOnlineResponse>
>   </soap:Body>
> </soap:Envelope>
> 
> ```  |
> | --- |

### 练习1：社区阅读列表，数据模型和亚马逊API

你在这个练习中的目标是为社区成员提供一个共享阅读列表的功能，一组新手或初学者可能会发现有用的书籍。你将使用亚马逊网络服务的SOAP接口（[http://www.amazon.com/webservices/](http://www.amazon.com/webservices/)）直接从亚马逊服务器检索产品信息，然后在你的服务器的HTML页面中显示。

首先编写一个设计文档，详细说明SQL数据模型以及如何使用亚马逊API（调用哪些函数？处理哪些值？）。你的`recommended_books`表可能应该以国际标准书号（ISBN）作为键。在作为数据建模师的大部分职业生涯中，最好使用生成的键。然而，在这种情况下，有一个完整的基础设施来确保ISBN的唯一性（参见[www.isbn.org](http://www.isbn.org)），因此可以安全地用作主键。

对于每本书，你的数据模型应该至少能记录以下内容：

+   标题

+   作者（可以合并在一列中，这是对第一范式的可怕违反，或者如果你有精力的话可以拆分开）

+   描述

+   书籍封面的照片URL以及该图像的宽度和高度（如果可以轻松获取）

+   推荐这本书的时间

+   推荐这本书的人

+   推荐这本书的人对为何这本书对这个社区特别相关的评论

您可能希望通过查找服务的Web服务描述语言（WSDL）文件来开始探索亚马逊SOAP API。WSDL文件是可调用函数、参数名称和类型以及返回值类型的正式描述。大多数互联网应用程序开发环境提供了一个SOAP工具集，将WSDL文件转换为一组代理类或函数库，可以像在本地运行时实现服务一样调用它们。在Microsoft Visual Studio .NET中，此操作称为“添加Web引用”。如果您不是Microsoft成就者，您可能会发现本章末尾的“SOAP实现”链接有用。

### 练习2：社区阅读列表，构建页面

我们建议在`/reading-list/`下创建一个子目录，用于组成新模块的页面脚本。我们建议实现以下URL：

+   一个索引页面，按标题、作者列出阅读列表中的书籍，并显示封面艺术品，可能还包括描述的前100个字

+   一个`/reading-list/one-book`页面，显示完整描述、推荐该书的人以及原因

+   一个`/reading-list/search`页面，是首页文本输入框的目标，返回与查询字符串匹配的来自亚马逊API的书籍列表；已在阅读列表中的书籍应显示，但以灰色显示并标记为已在列表中（不应有再次添加的按钮！）。不在列表中的书籍应是指向“add-book”URL的超链接。（您可以使书名成为超链接锚文本；记住始终*让信息成为界面*。）

+   一个`/reading-list/add-book`页面，向建议的用户征求关于为何这本特定书籍适合其他社区成员的评论

一个很好的经验法则是，您向数据模型添加的每个表大约意味着5个用户可访问的URL和5个管理URL。到目前为止，我们已经有4个用户页面，如果您要启动此功能，您需要构建一些管理页面。

### 练习3：鼓励在提问之前进行搜索和使用Google API

威胁在线社区的一个主要挑战是重复问题的混乱以及指导提问者查看FAQ或搜索引擎的努力。您服务器上或互联网其他地方的现有内容项可能无法完全回答Joe Newbie的问题，但阅读它可能会导致他将注意力集中在不同方向的查询上。

在这个练习中，您将创建一个替代的发布确认流程，这将涉及编写两个新的Web脚本，您在[“搜索”章节](search)中开发的搜索功能，以及Google Web API服务（[http://www.google.com/apis/](http://www.google.com/apis/)）。目标是在Joe Newbie面前放置一些内部和外部链接，并鼓励他在最终向整个社区展示问题之前查看它们。

您的新发布确认流程应仅针对启动讨论主题的问题调用，而不是问题的答案。我们在线社区的经验是，重要的是审查确定将讨论什么的问题，而不是个别答案。

如果你当前的发布确认页面位于 `/forum/confirm`，我们建议为你的新脚本添加一个 `-query` 后缀，例如 `/forum/confirm-query`。此页面应具有以下形式：

1.  在顶部，用户的问题将显示在论坛中，并在下面附有“确认”和“编辑”按钮。

1.  站点文章和现有讨论论坛帖子中与用户问题匹配的前 5-10 个匹配项的全文搜索（将一行摘要或可能是整个问题提供给您的本地搜索引擎）

1.  Google 数据库中用户问题的前 5-10 个匹配项，再次使用用户问题作为 Google 查询字符串

此时你会遇到一个挑战。假设你希望用户在发布之前浏览一些内部和外部链接。假设问题实际上是一个新问题。你不想强迫新手 Joe 回退到确认页面（而且你真的不希望浏览器说“页面已过期”，并强迫 Joe 重新提交）。理想情况下，Joe 可以进入链接，但在任何时候都能看到确认和编辑按钮。

有几种方法可以实现这一点。其中一种是使用 HTML `<a>` 标签的 `target=` 语法，使所有链接都指向一个单独的窗口。然而，新手用户可能会感到困惑，因为额外的窗口会弹出在屏幕上，而他们可能不知道如何使用他们的浏览器或操作系统返回到确认/编辑页面。一个小尺寸的 JavaScript 弹窗可能会减小这个问题的规模。另一个选项是使用 HTML 的令人恐惧的 Frames 功能，将确认/编辑页面放在一个框架中，将其他内容放在另一个框架中。当 Joe 最终决定确认/编辑时，Frames 语法提供了一种机制，让服务器告诉浏览器“现在只返回一个窗口”。第三个选项是做一个“服务器端框架”，其中你构建的页面形式为 `/forum/confirm-follow-link`，其中包含确认/编辑按钮的完整发布，并且外部或内部链接的内容显示在单个页面中。

出于本练习的目的，您可以自由选择其中任何一种方法或我们尚未考虑的方法。请注意，本练习不应要求修改任何数据库表或现有脚本，除了从“提问新问题”页面到一个链接。

### 练习 4：与主题相关的书籍（再次是亚马逊）

在这个练习中，您将在讨论论坛帖子的呈现旁边放置一系列相关的书籍列表。这样做有以下几个原因：(a)读者可能会发现了解正在讨论的主题有相关书籍非常有用，以及(b)亚马逊联盟计划为Web发布者提供了转介费（“回扣”），每当社区成员跟随编码链接转到亚马逊并购买东西时都会得到回扣。

服务器如何知道哪些书籍与问题和答案交流相关？首先建立一个过程，该过程将遍历问题和所有回复以建立一个常见词语列表。您的过程应排除那些在停用词列表中的极为常见的英文单词，例如“the”，“and”，“or”等。您在“搜索”章节中使用的任何全文搜索工具可能在文件系统文件或数据库表中包含这样的列表。您可以使用此列表中的前几个单词查询Amazon以获取匹配标题的列表。

对于此练习，您可以在每次页面加载时获取您的亚马逊数据。在实践中，在生产站点上，由于额外的延迟，这对您的用户是不好的，对您与亚马逊的关系也是不好的，因为您可能每秒钟执行几次相同的查询。您可能会决定将相关书籍存储在您的本地数据库中，并且如果有新的回复线程，则定期重建。

每本相关的书籍都应该有指向Amazon.com产品页面的链接，可选择使用Amazon Associates ID进行标识。这里是一个示例参考：

> ````
> <a href="http://www.amazon.com/exec/obidos/ASIN/0240804058/pgreenspun-20"><cite>Basic
> Photographic Materials and Processes</cite></a>
> 
> ````

ISBN跟在“ASIN”后面，在此示例中Associates ID是“pgreenspun-20”。

### 练习5：什么是新页面

如果您还没有，请构建一个HTML页面，其中列出了您社区中最近添加的十个内容项。对于每个内容项，显示以下内容：

+   标题或一行摘要

+   内容的文本摘要，或者如果合适，内容本身

+   创建该项目的人的姓名，链接到该人的用户资料页面

+   项目创建的时间（RFC 822格式，精确到秒，例如`Wed, 29 Oct 2003 00:09:19 GMT`）

将此页面在您选择的目录中的`new-content`处提供。请注意，您可以使用在[软件模块化章节](software-modularity)练习中定义的intermodule API功能轻松构建此页面。

### 练习6：新的网络服务是什么

将您的过程暴露给更广泛的世界，以便其他应用程序可以通过远程方法调用利用它。安装一个SOAP处理程序，实现以下功能：

> +   处理HTTP请求到`/services/new-content`，并检查是否有正确的SOAP语法
> +   
> +   从请求中提取`n_items`参数，如果存在的话
> +   
> +   执行过程调用并获取结果
> +   
> +   将结果作为包含零个或多个“item”记录的有效SOAP响应传递，每个项目的字段在练习5中列出。

您的开发平台可能提供工具，一旦您将外部Web服务映射到内部过程调用，就可以透明地处理HTTP和SOAP机制。如果没有，您将需要浏览SOAP规范中的示例并阅读下面链接的介绍性文章。

### 练习7：自我描述

编写一个描述您的`new-content`服务输入和输出的WSDL合同。请注意，如果您使用的是Microsoft .NET，这些WSDL合同在大多数情况下将自动生成。您只需要将它们暴露出来。

您的WSDL应该可以通过在服务本身的URL后添加`?WSDL`（对于Microsoft .NET用户很方便）或者通过在服务本身的URL后添加`.wsdl`扩展名来获得。

通过邀请另一个团队测试您的服务来验证您的WSDL合同和SOAP方法。对他们也做同样的事情。或者，寻找并使用Web上的验证工具。

### 进步的步伐

最初的Web标准，大约在1990年左右，是简单的。HTTP足够简单，以至于任何称职的程序员都可以在一两天内编写一个基本的服务器。HTML足够简单，以至于程序员能够在三十分钟内构建他们的第一个页面，非程序员也不会远远落后。事实上，最初的Web标准是如此简单，以至于学术计算机科学家预测该系统不会起作用。

然而，在十年内，Web联盟将其努力集中在“语义Web”和资源描述框架上（参见[http://www.w3.org/RDF](http://www.w3.org/RDF/)）。在标准委员会成员曾经讨论是否方便为照片添加标题时，现在您会听到类似“本体论”的词汇。因此，Web开发变得像解决人工智能问题一样具有挑战性。

SOAP和WSDL在从HTML的简单性到语义Web的AI完全问题的连续性中处于何种位置？显然，它们更接近于RDF而不是HTML，因为SOAP和WSDL要花费很多年才能像人类可读的Web那样迅速传播。

博客的动态世界已经确定了一个标准，这个标准传播得非常迅速，使得可以构建许多从多个博客中聚合信息的计算机程序。这个标准，主要由Userland的Dave Winer推动，被称为*真正简单的联合*或*RSS*，并在[http://blogs.law.harvard.edu/tech/rss](http://blogs.law.harvard.edu/tech/rss)上有文档记录。

### 练习8：新的Syndication Feed

为了对成千上万运行桌面网络日志聚合器的人们表示友好，为你的内容创建一个 RSS 订阅源，路径为 `/services/new-content-rss.xml`。该订阅源应只包含每个项目的标题、描述和全局唯一标识符（GUID）。鼓励你使用项目的完全限定 URL 作为其 GUID，如果有的话。

使用 RSS 阅读器或 [http://rss.scripting.com](http://rss.scripting.com/) 上的验证器来验证你的订阅源。

**模板**

> | ``` <?xml version="1.0"?>
> <rss version="2.0">
>         <channel>
>                 <title>{site name}</title>
>                 <link>{site url}</link>
>                 <description>{site description}</description>
>                 <language>en-us</language>
>                 <copyright>Copyright {dates}</copyright>
>                 <lastBuildDate>{rfc822 date}</lastBuildDate>
>                 <managingEditor>{your email addr}</managingEditor>
>                 <pubDate>{rfc822 date}</pubDate>
>                 <item>
>                         <title>{item1 title}</title>
>                         <description>{description for item1}</description>
>                         <guid>{guid for item1}</guid>
>                         <pubDate>{rfc822 date for when item1 went live}</pubDate>
>                         </item>
> 
>                 <item>
>                         <title>{item2 title}</title>
>                         <description>{description for item2}</description>
>                         <guid>{guid for item2}</guid>
>                         <pubDate>{rfc822 date for when item2 went live}</pubDate>
>                         </item>
>                 </channel>
>         </rss>
> 
> ``` |
> | --- |

记得转义标题和描述中的任何标记，例如 `<em>Whoa!</em>` 变为 `&lt;em&gt;Whoa!&lt;/em&gt;`。

### 更多

+   [http://www.soapware.org/bdg](http://www.soapware.org/bdg) — SOAP 忙碌开发者指南

+   [http://www-106.ibm.com/developerworks/library/ws-soap/?dwzone=components#2](http://www-106.ibm.com/developerworks/library/ws-soap/?dwzone=components#2) — 在 SOAP 应用中使用 WSDL（为 SOAP 程序员介绍 WSDL 的入门）

+   [http://www.w3.org/TR/wsdl.html](http://www.w3.org/TR/wsdl.html) — Web 服务描述语言（WSDL）

+   [http://www.sun.com/software/sunone/wp-arch](http://www.sun.com/software/sunone/wp-arch/) — Sun 开放网络环境（Sun One）白皮书

+   [http://www.xmlrpc.com](http://www.xmlrpc.com/) — XML-RPC

+   [http://dmoz.org/Computers/Programming/Internet/Web_Services/SOAP/Implementations](http://dmoz.org/Computers/Programming/Internet/Web_Services/SOAP/Implementations/) — SOAP 实现的目录

+   [http://www.jabber.org](http://www.jabber.org) — 一个即时通讯客户端，同时也是一个开放的 XML 消息传递和在线状态信息平台，与 AOL 即时通讯、MSN 即时通讯、Yahoo 即时通讯、ICQ 和 IRC 兼容。

+   [http://www.ietf.org/rfc/rfc0822.txt?number=822](http://www.ietf.org/rfc/rfc0822.txt?number=822) — 互联网文本消息格式的 RFC822 标准。

+   [http://blogs.law.harvard.edu/tech/directory/5/aggregators](http://blogs.law.harvard.edu/tech/directory/5/aggregators) — 一个 RSS 阅读器目录

+   [http://rss.scripting.com](http://rss.scripting.com/) — RSS 验证器

### 时间和动作

使用 SOAP 工具包的团队应该能够在两到四个小时内完成三个主要的 API 消费部分（亚马逊、谷歌、再次亚马逊）。如果采用分治模式工作，让同一个团队成员完成两个亚马逊部分可能是有意义的。其余的练习（5 到 8）应该每个都需要一个小时或更少的时间。

## 元数据（和自动代码生成）

* * *

在这一节中，你将构建一个应用需求的机器可读表示，然后构建一个计算机程序来生成实现该应用的计算机程序。我们将把这些材料放在构建知识管理系统的背景下，这是最常见的在线社区类型之一，并试图向你介绍这一领域商业人士使用的术语。

组织对其信息系统有复杂的要求。经济快速增长期可能导致疯狂的时间表和要求在几周内完成新的信息系统。最后，组织善变，对于在中途更改需求毫不犹豫。

技术人员传统上通过争论编程工具来应对这些挑战。数据模型无法表示用户需要的信息，应用程序不能做用户需要它做的事情，而工程师们却在争论 Java 对 Lisp 对 ML 对 C# 对 Perl 对 VB 的优劣。如果你想知道为什么计算机程序员的薪水比医生低，想象一下两名外科医生到达事故现场的情况。病人大量流血。如果外科医生像程序员一样，他们会让病人流血以进行关于两种不同止血带优劣的令人满意的争论。

**战争故事** 作者们被要求帮助西门子和波士顿咨询集团（BCG）为分布在 84 个国家的 17,000 名电话交换机销售人员实现一个知识共享系统。这是在 20 世纪 90 年代，当时（a）电话公司正在扩大容量，（b）企业投资于信息系统作为击败竞争对手的一种方式。

西门子公司与一家专业构建 HTML 页面但在编写 SQL 方面遇到困难的 Web 开发承包商合作了 6 个月。他们承诺在我们首次会面后 6 周推出精心规划的系统。我们得出结论，他们想要的许多功能可以从 photo.net 在线社区背后的源代码中进行调整，但添加“知识库”将需要 4 名全职工作的程序员 6 周的时间。更糟糕的是，在查看规格时，我们决定实现的系统将过于复杂，尤其是对于繁忙的销售人员而言是不可用的。

我们没有盲目地编写代码，而是将项目分配给了一名程序员，我们的朋友特雷西·亚当斯。她将人类可读的设计笔记转化为机器可读的数据库元数据表。特雷西开始构建一个用于编写程序的程序，但没有任何可见的结果。西门子和波士顿咨询集团在第四周时紧张起来，因为完成的系统可以进行测试了。

“你觉得怎么样？”我们问道。“这是我们使用过的最糟糕的信息系统，”他们回答道。“你觉得和你们的规格相比如何？”我们问。“嗯...也许我们应该简化规格，”他们回答道。

经过另外两轮迭代后，被称为“ICN Sharenet”的系统准时推出，并迅速被采纳，西门子公司在其运营的第一年内因此获得了额外的 1.22 亿美元销售额的贡献。

如果你一次只编写一个网页，你可以转向当下流行的语言以寻求更高的生产力。但除非你停止一次只为一个页面编写代码，否则不会取得显著的收益。考虑一下如何编写应用程序和用户体验的机器可读描述，然后让计算机自动生成应用程序。

我们希望你在这门课程中学到的一件事是与用户测试和应用程序迭代改进的价值。如果一个应用程序是由机器生成的，你可以与用户测试，根据他们的反馈编辑规范，并在几分钟内重新生成应用程序，准备进行新的测试。

我们将探讨*元数据*（关于数据模型的数据）和*知识管理*领域中的自动生成代码。

### 什么是“知识管理”？

*知识管理*或*知识共享*系统是一个多用户信息系统，使用户能够分享关于共享领域专业知识或研究的*知识*。什么是“知识”？回答这个问题的一种方法是在大学哲学系认识论小组花十年的时间。然而，从关系数据库管理系统的角度来看，也许更容易将知识定义为“由社区用户撰写的文本，用户可以附加文档、照片或电子表格”。其他用户可以评论这些知识，提交他们自己的文本和可选的附件。从这个定义来看，你之前构建的讨论论坛似乎满足了用户的需求。事实上，存档和索引的问答论坛可以满足*实践社区*的许多需求，这是一个试图解决类似问题并可以从彼此经验中学习的人群。然而，组织可能会要求一些超出讨论论坛的功能，例如以下内容：

+   知识“对象”之间的链接（这是MBA领域中使用的术语）

+   提供比原始讨论论坛更结构化的浏览和搜索设施，可能包括链接到现有结构化数据集（例如，在下面的示例2中，美国所有机场的列表）

+   跟踪和奖励贡献和重复使用

### 为什么组织需要知识管理？

在任何企业中，一组工人或学生的技能和经验都会呈现出近似的高斯分布：几乎一无所知的人（初学者，无能者，懒骨头），几乎什么都知道的巫师（老手，天才，学习努力的人），以及中间的人群，他们的知识水平适中。企业的管理者们会问自己，“如果这个企业的所有人都像巫师一样有知识，我们还能做得更多吗？”最初的假设通常是知识是有限的，这导致建立一个主要是静态知识体系的系统，从专家的大脑中提取，并编码成一系列文件或数据库行。然而，用户很快就会发现，他们面对的情况并不完全类似于“知识库”中描述的情况，而“知识管理系统”被视为“知识太平间”。

一个组织的第二次尝试建立旨在帮助初学者和普通员工利用最有能力的专家的信息系统通常被称为*知识共享*。在一个知识共享系统中，用户A有能力向社区提出问题，以便用户B、C和D编写新材料和/或指导A到以前撰写的文章。

如果没有其他办法，知识共享系统提供了一个让层级结构的员工之间交流的手段。考虑图15.1中描述的组织。假设新加坡的一个工人有一个可以由得梅因的一个工人回答的问题。找到同事并获得帮助的行为需要从伦敦的首席执行官那里一直上升到层级结构，然后通过不同的路径下降到得梅因。这种瓶颈可以通过消除层级结构来消除。然而，大多数组织不想消除他们的层级结构。正是层级结构使得公司能够通过在中间级别建立盈亏责任来减少管理复杂性。最好是通过一种非正式的机制来*补充*层级结构，让新加坡的工人可以寻求帮助，得梅因的工人可以提供帮助，即知识共享系统。

**** 插入公司等级结构图 ****

**图15.1：** 跨国公司围绕着一套命令和控制的等级制度组织起来。这对于分配盈亏责任很有好处，但也造成了信息流的瓶颈。建立一个知识共享系统是促进树叶之间信息流动的一种方式。

### 练习1：制定本体论

美国传统词典将*本体论*定义为“处理存在本质的形而上学分支。” 计算机科学研究人员谈论“一个本体论”作为知识表示的结构，即本体论限制了我们可以记录的信息种类（如果你将这个高级计算机科学概念与简单的数据建模混淆，也是可以理解的）。

您的本体论将包括类定义，并且由于关系数据库是在线社区背后持久性的来源，您的本体论的实现将包括 SQL 表定义，每个类一个表。 为了帮助您为社区开发一个有用的本体论，这里有一些示例。

#### 示例本体论 1：计算机科学

尽管公司通常可能没有任何知识，但所有公司都有知识管理系统。 大学声称拥有知识，但却没有知识管理系统。 大学计算机科学系的知识管理系统会是什么样子？

让我们假设我们的本体论至少包括以下类型：

+   人

+   出版物

+   数据结构

+   系统

+   算法

+   问题

+   语言

对于这些类型中的每一个，我们将定义一个表，并将其中的一行称为“对象”。 要说“约翰·麦卡锡开发了Lisp编程语言”，作者将创建两个对象：一个类型为`language`，一个类型为`person`。 为什么不直接链接到`users`表呢？ 约翰·麦卡锡可能不是系统的注册用户。 您将引用的一些人，例如约翰·冯·诺伊曼，已经过世。

每个对象包含一组元素。 一个元素存储在一列中。 对于系统中的每个对象，我们希望记录以下元素：

+   名称（关于该事物的简短描述）

+   概述（更长的描述）

+   谁创建了这个对象

+   他们创建它的时间

+   谁最后修改了它

+   他们何时修改了它

+   谁有权修改它

+   谁有权查看它

+   是否需要批准？

+   是否已经批准？

+   如果需要，由谁和何时？

+   如果是这样，属于哪个部分？

除了这些管理元素外，我们将定义特定类型的元素：

> 对于`person`类型
> 
> 出生日期，头衔
> 
> 对于`language`类型
> 
> 语法示例，垃圾收集_p（语言是否具有像Lisp那样的自动存储分配或像C那样的内存泄漏），强类型_p，类型推断_p，词法作用域_p，首次使用日期
> 
> 对于`publication`类型
> 
> 这是用于存储对书籍和期刊文章的引用，因此您希望在引用某物时看到所有字段； 还包括一个摘要字段
> 
> 对于`data structure`类型
> 
> 插入复杂性，检索复杂性（包含"O(1)", "O(N)"等的varchars）
> 
> 对于`system`类型
> 
> 系统的例子包括 "Multics"、"Xerox Alto"、"TCP/IP"、"MIT Lisp Machine"、"Apple Macintosh"、"Unix"、"World Wide Web"。包括 `date_of_conception`（概念日期）、`date_of_birth`（诞生日期）、`organization_name`（组织名称）、`open_source_p`（是否开源）等字段。无需包括开发者姓名字段，因为我们可以使用 `person` 类型的对象链接来代表主要开发者或推动者。
> 
> 用于 `problem` 类型
> 
> 问题的例子包括 "旅行推销员"、"用餐哲学家"、"排序"、"查询是否包含在已排序列表中"。我们需要元素来存储初始条件和解决方案标准。一般来说，`problem` 类型的对象将链接到 `algorithm`（解决问题的算法）、`publication`（阐述问题的论文）和 `person`（参与陈述或解决问题的人）类型的对象。
> 
> 用于 `algorithm` 类型
> 
> 例子包括 "快速排序" 和 "二分查找"，以及伪代码和高级解释的元素。一般来说，`algorithm` 类型的对象将链接到 `problem`（算法解决的需求）、`publication`（描述算法或其实现的论文）和 `person`（参与开发算法的人）类型的对象。

若要了解此类完成系统的示例，请访问保罗·布莱克（Paul Black）的《算法、数据结构和问题词典》[http://www.nist.gov/dads/](http://www.nist.gov/dads/)。

#### 例子本体 2：飞行

我们希望有一个系统，使得飞行员可以通过相关经验互相帮助，例如，“N123号飞机的自动驾驶不可信”，“在Hopedale机场的咖啡馆避免墨西哥玉米片”，并且这些评论由美国官方政府信息锚定到关于机场、跑道和导航无线电信标的信息。

对象类型包括：

+   人员

+   出版物

+   飞机设计

+   飞机

+   机场

+   跑道

+   导航辅助设备（"navaid"）

+   餐馆

+   酒店

+   飞行学校

+   飞行教练

除了在示例 1 中定义的基本元素之外，我们还定义了特定类型的元素：

> 用于 `airplane design`（飞机设计）类型
> 
> 对于每种类型的飞机，此表中有一个条目。例如可能是 "塞斯纳 172" 或 "波音 747"。我们需要指定性能的元素，例如 `stall_speed`（空中失速前最低速度）、`approach_speech`（接近跑道降落时的最佳速度）和 `cruise_speed`（巡航速度）。我们还希望有诸如 `date_certified`（认证日期）、`manufacturer_name`（制造商名称）和 `manufacturer_address`（制造商地址）等元素来描述设计。
> 
> 用于 `airplane` 类型
> 
> 此表中的条目是特定的飞机，很可能是属于飞行学校的租用机。我们需要诸如 `date_manufactured`（制造日期）、`ifr_capable_p`（是否可飞入云层？）和 `optional_equipment`（可选设备）等元素。
> 
> 用于 `airport` 类型
> 
> 我们想知道机场在哪里：纬度经度；海拔；与城市的关系（距离和方向从一个指定的城镇）。我们想知道机场是军用、私人还是公共的。我们想知道机场是否有旋转的绿/白色信标和跑道灯。我们想存储天气信息的频率，与其他飞行员联系（如果是无塔机场）或与控制塔联系（如果是有塔机场），以及用于仪表飞行许可的空中交通管制。我们需要记录跑道长度和条件。一个机场可能有几条跑道，因此产生了多对一的关系，这就是为什么我们将跑道单独建模并将它们与机场链接起来。
> 
> 对于`runway`类型
> 
> 编号（例如，“09/27”），长度，条件。请注意，跑道编号意味着磁方向：09意味着090度的航向或朝磁东着陆；如果风有利于在相同的跑道上反向着陆，你就在27上，这意味着270度的航向或正西（36朝北；18朝南）。
> 
> 对于`navigation aid`类型
> 
> 美国联邦航空管理局维护着一个全国范围的超高频全向信标（VOR）网络。这些发射两个信号，其中一个信号无论飞机相对于VOR的方位如何，相位始终恒定。第二个信号的相位随着绕VOR旋转而变化。因此，飞机上的VOR接收机可以比较两个信号的相位，并确定飞机位于VOR的123度射线上，例如。如果你的飞机没有全球定位系统接收机，你可以通过从两个VOR出发绘制射线来确定你在图表上的位置。对于导航设备，我们需要存储它的类型（可能是一个旧的非定向信标，只是发出AM广播风格的广播），频率，位置和莫尔斯码ID（你想听点划模式以确保你接收到正确的导航设备）。
> 
> 对于`restaurant`类型
> 
> 菜单摘录，营业时间，距离机场距离，电话号码，网址，电子邮件，街道地址
> 
> 对于`hotel`类型
> 
> 价格，距离机场距离，电话号码，网址，电子邮件，街道地址

作为这种系统的一个运行示例，访问[http://www.airnav.com/airports/](http://www.airnav.com/airports/)并输入你喜欢的机场的名称或代码。

#### 回到你的本体...

沿着你在“软件模块化”章节中设计的结构，创建一个名为“km”（代表“知识管理”）的模块，并开始这个模块的高级文档，包括（a）子系统目的声明，以及（b）对象类型列表，各类型共享的管理元素，和类型特定元素。

为了方便评估和与你的同学互动，**我们建议将用户页面放在http://yourservername/km/**。

### 练习2：设计一个元数据数据模型

您在前面练习中编写的文档是团队成员、客户和助教之间讨论的良好基础。但是，它不是机器可读的。理论上，开发一个机器可读的元数据存储库，以制表符分隔的文件系统文件形式存在，可以用文本编辑器编辑。然而，在实践中，系统更干净，当底层机制更少时。到目前为止，您的持久性主要来源是关系数据库管理系统，因此您可能也会将其用于元数据存储库。至少，数据库是项目中的新程序员期望找到元数据的地方。

这里是一个元数据存储库的示例 SQL 数据模型：

> ```
>  -- note that this is designed for the Oracle 8i/9i RDBMS
> 
> -- we'll have one row in this table for every object type 
> -- and thus for every new SQL table that gets defined; an 
> -- object type and its database table name are the same; 
> -- Oracle limits schema objects to 30 characters and thus
> -- we limit a table_name to 21 characters so that we can 
> -- have some freedom to create schema objects whose names
> -- are prefixed with an object type
> 
> -- a "pretty name" is a synonym used when presenting pages
> -- to users; the prettiness could be as simple as replacing
> -- underscores with spaces or spelling out abbreviations;
> -- e.g., for an object type of "airplane_design", the pretty
> -- form might be "airplane design", and pretty_plural
> -- "airplane designs"
> 
> create table km_metadata_object_types (
>         table_name              varchar(21) primary key,
>         pretty_name             varchar(100) not null,
>         pretty_plural           varchar(100)
> );
> 
> -- here is the table for elements that are unique to an object type
> -- (the housekeeping elements can be defined implicitly in the source 
> -- code for the application generator); there will be one row in 
> -- the metadata table per element
> 
> create table km_metadata_elements (
>         metadata_id             integer primary key,
>         table_name              not null references km_metadata_object_types,
>         column_name             varchar(30) not null,
>         pretty_name             varchar(100) not null,
>         abstract_data_type      varchar(30) not null, 	-- ie. "text" or "shorttext" "boolean" "user" 
> 	-- this one is not null except when abstract_data_type is "user"
>         oracle_data_type        varchar(30),   -- "varchar(4000)"
>         -- e.g., "not null" or "check foobar in ('christof', 'patrick')"
>         extra_sql               varchar(4000),
>         -- values are 'text', 'textarea', 'select', 'radio', 
> 	-- 'selectmultiple', 'checkbox', 'checkboxmultiple', 'selectsql'
>         presentation_type       varchar(100) not null,
>         -- e.g., for textarea, this would be "rows=6 cols=60", for select, Tcl list,
>         -- for selectsql, an SQL query that returns N district values
>         -- for email addresses mailto:
>         presentation_options    varchar(4000),
>         -- pretty_name is going to be the short prompt, 
> 	-- e.g., for an update page, but we also need something
> 	-- longer if we have to walk the user through a long form
>         entry_explanation       varchar(4000),
> 	-- if they click for yet more help 
>         help_text               varchar(4000),
>         -- note that this does NOT translate into a "not null" constraint in Oracle
>         -- if we did this, it would preclude an interface in which users create rows incrementally
>         mandatory_p             char(1) check (mandatory_p in ('t','f')),
>         -- ordering in Oracle table creation, 0 would be on top, 1 underneath, etc.
>         sort_key                integer,
>         -- ordering within a form, lower number = higher on page 
>         form_sort_key           integer,
>         -- if there are N forms, starting with 0, to define this object, 
> 	-- on which does this go?  (relevant for very complex objects where
> 	-- you need more than one page to submit)
>         form_number             integer,
>         -- for full text index
>         include_in_ctx_index_p  char(1) check (include_in_ctx_index_p in ('t','f')),
>         -- add forms should be prefilled with the default value
>         default_value           varchar(200),
> 	check ((abstract_data_type not in ('user') and oracle_data_type is not null)
>                 or
>               (abstract_data_type in ('user'))),
>         unique(table_name,column_name)
> ); 
> ```

### 练习 3：编写一个生成 DDL 语句的程序

开始一个管理界面到你的 km 模块，从一个 URL 以 "ddl-generate" 结尾的页面开始。这应该是一个脚本，将从元数据表生成 CREATE TABLE（数据定义语言）语句。在将其提供给 RDBMS 之前，您可能希望查看一下 SQL，因此您可能希望编写您的脚本，以便它简单地将 DDL 语句输出到具有 MIME 类型`text/plain`的 Web 浏览器。当您满意时，您可以将其保存到本地文件系统为`km-generated.sql`，并在满意时将其提供给您的 SQL 客户端。

除了您为应用程序定义的管理元素之外，每个对象表应该有一个`object_id`列。该列的值应在 km 模块的所有表中是唯一的，在 Oracle 中，如果您使用单个序列生成所有键，这很容易做到。给定跨类型的唯一对象 ID，如果您要添加一个`km_object_registry`表，您将能够发布更干净的 URL，只传递对象 ID 而不是对象 ID 和类型。

除了基于元数据的对象表定义，您的脚本还应该定义一个通用的映射表，以支持知识对象之间的链接。这里是一个 Oracle 语法示例：

> ```
>  create table km_object_object_map (
>         object_id_a		integer not null,
>         object_id_b		integer not null,
> 	-- the objects are uniquely identified above but let's save ourselves
> 	-- hassle by recording in which tables to find them
> 	table_name_a		not null references km_metadata_object_types,
>         table_name_b		not null references km_metadata_object_types,
>         -- User-entered reason for relating two objects, e.g.
>         -- to distinguish between John McCarthy the developer of
> 	-- Lisp and Gerry Sussman and Guy Steele, who added lexical scoping
>         -- in the Scheme dialect 
> 	map_comment		varchar(4000),
> 	creation_user		not null references users,
> 	creation_date		date default sysdate not null,
>         primary key (object_id_a, object_id_b)
> ); 
> ```

注意，这个表允许用户将一个对象映射到系统中的任何其他对象，而不考虑类型。

为简单起见，假设关联是双向的。假设一个知识作者将赫夫曼编码算法（几乎用于每种压缩方案，包括 JPEG）与人物大卫·A·赫夫曼（1925-1999；当时是麻省理工学院的研究生，在他的发明提交为学期论文时）关联起来。我们还应该理解这意味着大卫·A·赫夫曼与赫夫曼编码算法相关联。这就是为什么`km_object_object_map`中的列名称为"object_id_a"而不是"from_object"。

在Oracle数据库中，上述主键约束会产生一个索引，使得快速询问“与对象17相关的对象是什么，其中对象17恰好出现在A槽中”成为可能。为了有效地查询“与对象17相关的对象是什么，其中对象17恰好出现在B槽中”，请按与主键约束相反顺序在列上创建一个连接索引。

> SQL for Web Nerds的“Trees”章节，位于[http://philip.greenspun.com/sql/trees](http://philip.greenspun.com/sql/trees)，提供了一些连接索引的示例。如果你正在使用Oracle，可能需要阅读性能指南和参考手册（在线和产品文档中）中的复合索引部分以及SQL参考手册中关于“创建索引”的部分。

### 练习4：编写一个生成“删除所有表”脚本的程序

在与`ddl-generate`相同的管理目录中编写一个名为`drop-tables-generate`的脚本。这应该从元数据表生成DROP TABLE语句。你可能不会第一次就得到正确的数据模型，因此最好准备好清空关系数据库管理系统并重新开始。

将数据模型创建和清理脚本的结果提供给数据库管理系统，直到不再收到错误消息。

### 尺寸控制

在页面上显示大量信息列表时，考虑在顶部添加*尺寸控制*。例如，假设你希望帮助管理员浏览站点的注册用户。你觉得用户社区会变得太大，完整列表将不再有用。因此，你添加一个中间页面，包含以下选项：

+   显示最近30天内注册的用户

+   显示与我相同地理区域的用户（网站管理通常按地区划分）

+   显示贡献超过5个项目的用户

+   显示内容评级低于“C”的用户（寻找向数据库添加大量垃圾的人）

设计良好的这种形式的页面将在每个选项旁边显示一个离散的小数字，显示选择该选项后将显示的用户数量。设计不良的页面将让管理员猜测选择选项后将显示多少信息。

这种传统方法有一些缺点。首先，在管理员能看到任何用户名之前，需要多点击鼠标。理想情况下，你希望应用程序的每个页面都显示信息和/或潜在操作，而不是纯粹的官僚主义和导航。其次，更严重的是，这种方法不太容易扩展。当管理员说“我需要看到在过去30天内注册的用户，贡献了超过4个产品评论，并且购买了至少$100的商品，这样我就可以用优惠券轰炸他们”时，必须在列表中添加另一个选项。最终，导航页面会因选择而变得繁重。

想象一下，第一次鼠标点击将管理员带到一个页面，显示了过去30天注册的所有用户，一个很长的列表。顶部是滑块。每个滑块控制一个维度，每个维度可以限制或扩展列表中的项目数量。以下是一些针对像amazon.com这样的社区电子商务网站的示例维度：

+   注册的新颖性，从1天前（严格）到时间开始（宽松）

+   地理接近度，从相同的邮政编码（严格）到相同的城市到相同的州到世界任何地方（宽松）

+   总购买额，从至少$10,000（严格）到至少$500到$0或更多（宽松）

+   评论活动，从前100名评论者（严格）到前1000名评论者到0或更多评论（宽松）

+   内容质量，从平均评分为4.5星或更高（严格）到任何平均值

如果默认页面显示了太多名称，管理员将调整一个或两个滑块以更严格。如果管理员想要看到更多名称，他或她将调整一个滑块朝着该维度的宽松端。

如何实现尺寸控制？遗憾的是，没有HTML标记可以生成一个小的连续滑块。您可以通过为每个尺寸提供一组沿着尺寸的离散点来模拟滑块，每个点都是一个简单的文本超链接锚点。例如，对于内容质量，您可以提供"4或更好"，"3或更好"，"2或更好"，"全部"。

### 练习5：构建知识捕获页面

这是我们认为您会想要创建的URL列表，以"名词-动词"约定命名：

+   索引

+   对象创建

+   对象显示

+   对象总结

+   对象编辑元素

+   添加链接

+   一种类型浏览

首先在您的`/km/`目录中创建一个索引页面。至少，索引页面应显示一个对象类型的无序列表，并在每种类型旁边提供"浏览"或"创建"选项。您的数据库中没有任何信息，因此您应首先构建一个名为`object-create`的脚本。此页面将查询元数据表以构建一个数据输入表单，以创建特定类型的单个对象。

当您的对象创建流水线完成将行插入数据库时，它应将作者的浏览器重定向到显示对象的页面（如果您没有更好的想法，请将脚本命名为`object-display`）。原始作者可能有权编辑此对象，因此此页面应显示小的超链接以编辑单个字段。所有这些链接都可以以不同的参数指向URL`object-edit-element`。对象显示页面还应总结所有当前链接的对象，并具有一个"添加链接"超链接，其目标是`link-add`。

由`link-add`返回的页面几乎与索引页面相同，即对象类型列表。每种对象类型都可以是指向`one-type-browse`的多用途脚本的超链接。当只使用`table_name`参数调用时，此页面将显示一个带有顶部维度控件的对象名称表。维度应该是“我的|所有人的”和“创建日期”。用户应该能够点击表头并按该列进行排序。

当使用额外参数调用`one-type-browse`时，将这些参数传递给`object-summarize`，这是一个非常类似于`object-display`的脚本，但只显示足够的信息，以便作者可以明确识别对象，并具有接受潜在链接参数的能力，例如，`table_name_a`和`object_id_a`。

### 胡萝卜和棍棒；鸡和蛋

大多数工作者因为工作而受到奖励；他们为什么要抽出时间在在线系统中撰写知识并回答问题？人们会在他们期望得到答案的地方提出问题。如果没有人回答，就不会有人提问，从而导致鸡生蛋问题。

创建一个奖励用户展示所需行为的激励系统非常重要。例如，在amazon.com上，网站所有者希望用户撰写大量的读者评论。与此同时，他们显然不想支付人们来撰写评论。截至2003年的解决方案是通过“评论者排名”来认可贡献者。如果许多其他亚马逊用户点击表示他们发现你的评论有用，你可能会超过1000，并且在你的名字旁边会出现“前1000评论者”图标。从亚马逊的主页，导航到“朋友和收藏夹”（在“特色”下）。然后，在“探索”下面，点击“顶级评论者”。请注意，前10名评论者中有些人已经免费为亚马逊撰写了5000多篇评论！

在在线社区中奖励什么是有意义的？我们可以从一些明显的活动开始：内容撰写和问题回答。每晚，我们的系统可以查询内容表，并根据用户发布到数据库中的文章和答案数量更新用户排名。仅仅基于数量奖励用户真的是一个好主意吗？我们不应该更加重视那些实际上帮助了人们的内容吗？例如，假设有十个回答一个讨论论坛问题。给提问者认为最有价值的答案的作者最大的奖励是有意义的。如果一个问题可以被提问者标记为“紧急”，那么给予回答紧急问题的人比回答非紧急问题的人更大的奖励可能是有意义的。一篇文章很好，但一篇引导另一个用户说“我在组织的领域中重用了这个想法”的文章更好，应该用更大的奖励来鼓励。

### 练习6：收集统计数据

现在，不要立即对讨论论坛系统进行手术，让我们从为新的知识管理数据模型添加一个会计系统开始。首先创建一个用于保存对象视图的表。以下是一个示例：

> ```
>  create sequence km_object_view_id;
> 
> create table km_object_views (
> 	object_view_id	integer primary key,
> 	-- which user
> 	user_id		not null references users,
> 	-- two columns to specify which object 
> 	object_id	integer not null,
> 	table_name	varchar(21) not null,
> 	view_time	timestamp(0) not null,
> 	reuse_p		char(1) default 'f' check(reuse_p in ('t','f'))		
> ); 
> ```

修改`object-view-one`，使其仅在24小时内没有此用户/对象对应的日志行时才将一行插入`km_object_views`表。您可以通过以下步骤实现：

1.  开启一个事务

1.  锁定表

1.  计算过去24小时内匹配行的数量

1.  将结果与0进行比较，必要时插入

1.  结束事务

这似乎是一个对看似简单问题来说过于复杂的解决方案。是否可能用一条语句完成这个任务？

让我们从Oracle开始。以下是一个仅在表中没有行时才会产生影响的INSERT语句的示例：

> ````
> insert into km_object_views (object_view_id, user_id, object_id, table_name, view_time)
> select km_object_view_id.nextval, 227, 891, 'algorithm', current_timestamp(0)
> from dual
> where 0 = (select count(*) 
>            from km_object_views
>            where user_id = 227
>            and object_id = 891
>            and view_time > current_timestamp - interval '1' day);
> 
> ````

这个语句的结构是"将查询1行系统表DUAL的结果插入KM_OBJECT_VIEWS"。我们并没有从DUAL表中提取任何数据，只在SELECT列表中包含常量。WHERE子句也没有基于DUAL表中的信息限制结果，而是在查询KM_OBJECT_VIEWS。这似乎是一种反常的SQL使用方式，但实际上在标准SQL中是相当常规的，因为标准SQL中没有IF语句。

然而，假设同时启动两个此INSERT的副本。请记住，事务处理系统提供ACID保证：原子性、一致性、*隔离性*和持久性。Oracle对*隔离性*的实现，“事务的结果对其他事务是不可见的，直到事务完成”，通过为每个用户提供一个虚拟版本的数据库，即事务开始时的状态来实现。

| Session A | Session B |
| --- | --- |

| 在系统更改编号（Oracle内部的伪时间SCN）30561时将INSERT发送到Oracle。

Oracle统计`km_object_views`中的行数，结果为0。

Oracle在SCN 30567时向`km_object_views`插入一行（COUNT(*)完成需要一段时间；与此同时，其他用户一直在其他表中插入和更新行）。| 在Session A开始其事务后的系统更改编号30562时将INSERT发送到Oracle，但在Session A完成插入之前几个时刻。

Oracle在忙于其他用户时，并不会在SCN 30568之前开始计算`km_object_views`中的行数，这是在Session A插入之后的情况。然而，数据库会返回0个块，因为它向Session B呈现的是数据库在SCN 30562时的状态，即事务开始时的状态。

在计数中找到0行后，INSERT继续插入一行，从而创建了重复的日志条目。

**图15.2：**

更多信息：请参阅Oracle文档中包含的《Oracle9i数据库概念》中的“数据并发性和一致性”章节。

现在考虑在SQL Server中运行相同查询的情况：

> ````
> insert into km_object_views (user_id, object_id, table_name, view_time)
> select 227, 891, 'algorithm', current_timestamp
> where 0 = (select count(*) 
>            from km_object_views
>            where user_id = 227
>            and object_id = 891
>            and datediff(hour, view_time, current_timestamp) < 24)
> 
> ````

与上述Oracle语句存在轻微的语法差异，但结构相同。仅在过去二十四小时内找不到匹配行时才插入新行。

SQL Server实现与Oracle相同的隔离级别（“读取提交”），但方式不同。SQL Server在数据修改操作期间持有独占锁，而不是创建数据库的虚拟版本。在上面的示例中，Session B的INSERT操作直到Session A的INSERT完成后才能开始。一旦允许开始，Session B将看到Session A的插入结果，因此不会插入重复行。

更多信息：请查看Microsoft SQL Server文档中的SQL Server Books Online中的“理解SQL Server中的锁定”章节。

每当进行日志记录时，最好使用服务器时间而不是用户时间。在许多Web开发环境中，您可以通过调用一个API过程来实现这一点，该过程将关闭与用户的TCP连接，从而停止右上角浏览器图标的旋转/波动。同时，您的线程（IIS，AOLserver，Apache 2）或进程（Apache 1.x）仍然在服务器上运行，并且可以运行执行日志记录所需的任何代码。许多Web服务器允许您定义在向用户提供页面后运行的过滤器。

帮助处理日期/时间算术：请参阅[http://philip.greenspun.com/sql/dates](http://philip.greenspun.com/sql/dates)上的SQL for Web Nerds的“日期”章节。

### 练习7：收集更多统计信息

修改`object-view-one`以添加一个“我重复使用了这个知识”按钮。这应链接到`object-mark-reused`，一个更新`km_object_views`中最近相关行的`reuse_p`标志的页面。如果找不到要更新的行，则页面应引发错误。

### 练习8：解释练习7中的并发问题

针对在服务器时间上进行日志记录的`object-view-one`实现，解释在练习7中出现的并发问题，并讨论解决方法。

将这些非编码练习的解决方案写入您的km模块概述文档中，或者写入同一目录中名为`metadata-exercises`的文件中。

### 练习9：进行一些性能调优

在`km_object_views`上创建一个索引，使练习6和7中的代码运行更快。

### 练习10：显示统计信息

创建一个摘要页面，例如在`/km/admin/statistics`，显示每天查看和重复使用的对象数量。此报告应按对象类型进行拆分，并且所有统计数据都应是指向“深入了解”的页面的链接，其中显示了底层数据，例如哪些实际用户何时查看或重复使用了知识。

### 练习11：考虑全文索引

制定一个策略，将在此系统中编写的对象添加到站点范围的全文索引中。

### 练习12：考虑与您的内容表统一

撰写一个统一您现有内容表与本章构建的系统的策略。讨论使用新表格进行知识管理模块还是扩展旧表格的利弊。

### 欢迎手动编辑

假设一个自动生成的应用程序基本上已经完成并且功能正常，但你可以看到一些改进的空间。将一些生成的代码拉到文本编辑器中手动更改是可以接受的做法吗？绝对可以！使用元数据的目的是应对极端需求，并尽快让原型展示给真实用户。不要因为你没有解决自动化编程这个五十年来的研究难题而感到失败。

### 时间和动作

团队应该与客户一起开发本体论。这些讨论和初步文档应该需要两到三个小时。对于使用 Oracle 构建的团队来说，设计元数据数据模型可能是一个简单的复制/粘贴操作，但无论如何，不应该超过一个小时。生成 DDL 语句和删除表脚本应该需要一个程序员约两个小时的工作时间。构建系统页面，练习 5 到 10，应该需要八到十二个程序员小时。这部分可以在一定程度上分开，但最好限制编程工作在两个紧密合作的个人之间，因为练习是相互建立的。最后，结尾的撰写应该总共需要一到两个小时。

## 用户活动分析

* * *

本章探讨了您如何监控社区内用户活动的方法，以及如何利用这些信息来个性化用户的体验。

### 第一步：提出正确的问题

在考虑技术上可行之前，最好先列出一个关于用户活动的愿望清单，这些问题与客户的应用程序相关。以下是一些初始问题：

+   哪些 URL 导致了服务器错误？（答案引导行动：修复错误的代码）

+   有多少用户请求了不存在的文件，他们从哪里获取了错误的 URL？（答案引导行动：修复错误的链接）

+   至少有 50% 的用户访问了`/foobar/`，我们最新和最重要的部分吗？（答案引导行动：也许从网站的其他区域添加更多指向新部分的指针）

+   语音和无线接口对应用程序有多受欢迎？（答案引导行动：在受欢迎的接口上投入更多精力）

+   哪些页面导致用户卡住并放弃他们的会话？即，用户在一天结束前查看的典型最后页面是什么？（答案引导行动：澄清这些页面的用户界面或注释）

+   假设我们经营一个电子商务网站，并在谷歌和纽约时报网站购买了广告。来自这两个来源的访问者购买东西的可能性有多大？金额又如何比较？（答案引导行动：从发送高利润用户的地方购买更多广告）

### 第二步：看看容易获得的内容

每个HTTP服务器程序都可以配置为记录其操作。通常，服务器会写入两个日志：（1）“访问日志”，包含与每个用户请求对应的一行，以及（2）“错误日志”，包含有关在导致程序错误的请求期间出现了什么问题的完整信息。一个“文件未找到”将导致访问日志条目，但不会导致错误日志条目，因为服务器不必捕获脚本错误。相比之下，向数据库发送非法SQL命令的脚本将导致访问日志和错误日志条目。

下面是来自文件[http://philip.greenspun.com/seia/examples-user-activity-analysis/2003-03-06.log.gz](examples-user-activity-analysis/2003-03-06.log.gz)的片段，记录了这台服务器（philip.greenspun.com）上一天的活动。请注意，日志文件的名称“2003-03-06”被安排得这样，以便按照时间顺序进行词典排序，因此，在查看目录列表中的文件时，您将看到从最旧到最新的连续进展。文件本身采用了“通用日志文件格式”，这是1995年开发的标准。

> ```
> 193.2.79.250 - - [06/Mar/2003:09:11:59 -0500] "GET /dogs/george HTTP/1.1" 200 0 "http://www.photo.net/" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 193.2.79.250 - - [06/Mar/2003:09:11:59 -0500] "GET /dogs/sky-and-philip.jpg HTTP/1.1" 200 9596 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 193.2.79.250 - - [06/Mar/2003:09:11:59 -0500] "GET /dogs/george-28.jpg HTTP/1.1" 200 10154 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 193.2.79.250 - - [06/Mar/2003:09:11:59 -0500] "GET /dogs/nika-36.jpg HTTP/1.1" 200 8627 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 193.2.79.250 - - [06/Mar/2003:09:11:59 -0500] "GET /dogs/george-nika-provoke.jpg HTTP/1.1" 200 11949 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 152.31.2.221 - - [06/Mar/2003:09:11:59 -0500] "GET /comments/attachment/36106/bmwz81.jpg HTTP/1.1" 200 38751 "http://philip.greenspun.com/materialism/cars/nsx.html" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
> 193.2.79.250 - - [06/Mar/2003:09:12:00 -0500] "GET /dogs/george-nika-grapple.jpg HTTP/1.1" 200 7887 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 193.2.79.250 - - [06/Mar/2003:09:12:00 -0500] "GET /dogs/george-nika-bite.jpg HTTP/1.1" 200 10977 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 193.2.79.250 - - [06/Mar/2003:09:12:00 -0500] "GET /dogs/george-29.jpg HTTP/1.1" 200 10763 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 193.2.79.250 - - [06/Mar/2003:09:12:00 -0500] "GET /dogs/philip-and-george-sm.jpg HTTP/1.1" 200 9574 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 152.31.2.221 - - [06/Mar/2003:09:12:00 -0500] "GET /comments/attachment/44949/FriendsProjectCar.jpg HTTP/1.1" 200 36340 "http://philip.greenspun.com/materialism/cars/nsx.html" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
> 193.2.79.250 - - [06/Mar/2003:09:12:00 -0500] "GET /comments/attachment/35069/muffin.jpg HTTP/1.1" 200 15017 "http://philip.greenspun.com/dogs/george" "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"
> 152.31.2.221 - - [06/Mar/2003:09:12:01 -0500] "GET /comments/attachment/77819/z06.jpg HTTP/1.1" 200 46996 "http://philip.greenspun.com/materialism/cars/nsx.html" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
> 151.199.192.112 - - [06/Mar/2003:09:12:01 -0500] "GET /comments/attachment/137758/GT%20NSX%202.jpg HTTP/1.1" 200 12656 "http://philip.greenspun.com/materialism/cars/nsx" "Mozilla/4.0 (compatible; MSIE 5.0; Mac_PowerPC)"
> 152.31.2.221 - - [06/Mar/2003:09:12:02 -0500] "GET /comments/attachment/171519/photo_002.jpg HTTP/1.1" 200 45618 "http://philip.greenspun.com/materialism/cars/nsx.html" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
> 151.199.192.112 - - [06/Mar/2003:09:12:27 -0500] "GET /comments/attachment/143336/Veil%20Side%20Skyline%20GTR2.jpg HTTP/1.1" 200 40372 "http://philip.greenspun.com/materialism/cars/nsx" "Mozilla/4.0 (compatible; MSIE 5.0; Mac_PowerPC)"
> 147.102.16.28 - - [06/Mar/2003:09:12:29 -0500] "GET /photo/pcd1253/canal-street-43.1.jpg HTTP/1.1" 302 336 "http://philip.greenspun.com/wtr/application-servers.html" "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT)"
> 147.102.16.28 - - [06/Mar/2003:09:12:29 -0500] "GET /photo/pcd2388/john-harvard-statue-7.1.jpg HTTP/1.1" 302 342 "http://philip.greenspun.com/wtr/application-servers.html" "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT)"
> 147.102.16.28 - - [06/Mar/2003:09:12:31 -0500] "GET /wtr/application-servers.html HTTP/1.1" 200 0 "http://www.google.com/search?q=application+servers&ie=ISO-8859-7&hl=el&lr=" "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT)"
> 
> ```

第一行的内容可以解码如下：

> 一个位于IP地址**193.2.79.250**的计算机用户，在那台计算机上没有告诉我们他的登录名，也没有向Web服务器提供HTTP身份验证登录名（**- -**），于2003年3月6日凌晨9点11分59秒在格林尼治平均时间落后5小时的时区（**06/Mar/2003:09:11:59 -0500**），使用**HTTP/1.1**协议的**GET**方法请求了文件**/dogs/george**。服务器找到了文件并正常返回（状态码为**200**），但是由于一个行为不端的脚本没有向服务器提供写入的字节数信息，因此状态码后面是**0**。这个用户从**http://www.photo.net/**（引用头部）跟踪到这个URL，并使用一个浏览器，该浏览器首先错误地将自己标识为Netscape 4.0（**Mozilla 4.0**），但随后解释说实际上只是与Netscape兼容，实际上是在Windows NT上的Microsoft Internet Explorer 5.0（**MSIE 5.0; Windows NT**）。在一个轻度使用的服务上，我们可能已经配置了服务器使用`nslookup`并记录`stargate.fs.uni-lj.si`的主机名而不是IP地址，这样我们就可以瞥一眼日志并看到这是斯洛文尼亚的一所大学的某人。

这一行包含了大量信息，但请考虑缺失了什么。如果这个用户之前登录过并提供了一个`user_id` cookie，我们无法知道并且没有这个用户ID。在电子商务网站上，通过显示一个成功请求“complete-purchase” URL的行，我们可能能够推断用户购买了某样东西。然而，我们看不到购买的金额，而一个$1000的购买肯定比一个$10的购买更有趣。

### 步骤3：弄清楚你需要记录的额外信息

如果你的客户对标准日志中可用的信息不满意，有三种基本的替代方案：

+   配置HTTP服务器程序将cookie头内容添加到标准访问日志中

+   增强你的软件，将额外的用户活动记录到关系数据库中，并在服务的站点管理员区域构建自定义查询页面

+   构建一个完整的用户活动维度数据仓库

如果你每次请求只需要用户ID，通常可以简单地配置HTTP服务器程序，例如Apache或Microsoft Internet Information Server，将整个cookie头的内容或只是一个命名的cookie附加到访问日志中的每一行。

当这还不够时，你可以开始向数据库表中添加列。从某种意义上说，你已经开始了这个过程。例如，你的`users`表中可能有一个`registration_date`列。这些信息可以从访问日志中派生出来，但如果你需要在用户资料中显示“自2001年起成为会员”的注释，将其保留在关系数据库中更有意义。如果你想为会员提供一个“自上次访问以来的新物品”页面，你可能会向用户表中添加`last_login`和`second_to_last_login`列。请注意，你需要`second_to_last_login`，因为一旦用户#345返回网站，你的软件将更新`last_login`。当他或她点击“自上次访问以来的新物品”页面时，可能距离`last_login`列中的时间戳仅有三十秒。用户#345更可能期望的是自上一周一以来的新内容，即他或她与服务的上一个会话。

假设市场部门开始在十个不同的网站上运行广告活动，目标是吸引新会员。他们希望得到一个报告，显示来自这十个外部网站的注册用户数量。每个广告将是指向你服务器上编码URL的超链接。这将设置一个会话cookie，表示“source=nytimes”（“我来自纽约时报网站的广告”）。如果那个人最终注册为会员，标记“nytimes”将被写入`users`表中的`source`列。一个月后，你将被要求编写一个管理员页面，查询数据库并显示按天、按月、按来源等的注册直方图。

向事务处理表添加列并构建特定的SQL查询以回答问题的道路是漫长而曲折的。回到一个可管理的信息系统，让用户得到他们需要的答案的传统方法是*维度数据仓库*，在SQL for Web Nerds的数据仓库章节中有详细讨论，网址为[http://philip.greenspun.com/sql/data-warehousing](http://philip.greenspun.com/sql/data-warehousing)。数据仓库是事务处理表信息的大量去规范化副本，排列以便于查询而不是更新。

本章的练习将引导您了解这三种替代方案，每种方案都有其适用的地方。

### 练习1：看看另一半是如何生活的

大多数Web发布者的预算有限，因此对程序员的访问也有限。因此，他们依赖于分析标准服务器访问日志的标准日志分析程序。在这个练习中，您将看到他们看到的内容。选择一个标准的日志分析程序，例如，在本章末尾引用的analog程序，并准备一个上个月所有记录用户活动的报告。

对于这个练习的一个可接受的解决方案将涉及链接到站点管理页面上最新的报告，以便发布者可以查看。一个更好的解决方案将包括在管理页面上放置一个“准备当前报告”的链接，该链接将在需求时调用日志分析程序并显示报告。一个详尽（令人疲惫？）的解决方案将包括一个定期进程（Unix术语中的“cron job”，Windows中的“at命令”或“计划任务”），每天运行日志分析程序，更新累积报告并准备一个新的每日报告，所有这些都可以从站点管理页面访问。

确保您的报告清楚显示“404 Not Found”请求（任何标准的日志分析程序都可以配置为显示这些请求），并显示引用者标头，以便您可以找出坏链接可能在哪里。

### 在响应Web请求运行程序的安全风险

对管理员请求运行日志分析程序听起来很无害，但任何一个HTTP服务器程序可以在Web请求的响应中启动一个新进程的系统都存在安全风险。许多Web脚本语言都有“exec”命令，其中Web服务器具有在命令行中输入的已登录用户的所有权限。这是一个强大且有用的功能，但一个恶意用户可能能够，例如，运行一个程序，该程序将返回服务器的用户名/密码文件。

在Unix世界中，对这一挑战最有效的解决方案是`chroot`，即*change root*。这个命令会将Web服务器的文件系统根目录以及Web服务器启动的任何程序更改为文件系统中的其他位置，例如`/web/main-server/`。位于目录`/usr/local/bin/`中的程序无法被chroot后的Web服务器执行，因为Web服务器甚至无法描述一个文件，除非其路径以`/web/main-server/`开头。根目录`/`现在是`/web/main-server/`。这种方法的一个缺点是，如果Web服务器需要在目录`/usr/local/bin/`中运行程序，则无法运行。解决方案是将所有实用程序、服务器日志分析器和其他所需程序移动到`/web/main-server/`下面，例如，移动到`/web/main-server/bin/`。

遗憾的是，在Windows中似乎没有`chroot`的等效功能，尽管有其他方法可以锁定Web服务器，使其进程无法执行程序。

### 练习2：错误的喜剧

任何出版商都不希望用户在请求时面对“服务器错误”。不幸的是，如果一个用户遇到错误，很可能会有更多的用户遇到错误。HTTP服务器程序将记录每个事件，但除非一个站点是新发布的，否则在任何给定时刻可能没有程序员在监视错误日志。

首先确保服务器配置为尽可能多地记录有关每个错误的信息。至少，您需要服务器记录发生错误的URL以及引发错误的过程的错误消息。更好的Web开发环境还将记录堆栈回溯。

其次，从站点范围的管理页面提供一个超链接，指向显示错误日志最近的500行的页面，还可以选择返回更多的500行等。

第三，编写一个定期运行的过程，可以作为一个单独的进程或作为HTTP服务器程序的一部分，并扫描错误日志，查找自上次运行过程以来的新条目。如果这些新条目中有任何实际错误，该过程会将它们通过电子邮件发送给维护站点的程序员。你可能希望从一个小时的间隔开始。

### 实时错误通知

在练习2中构建的系统可以保证程序员在大约一个小时内发现错误。在一个备受关注的站点上，这可能不够。将错误通知构建到软件本身可能是值得的。严重错误可以被捕获，错误处理程序可以调用一个`notify_the_maintainers`过程发送电子邮件。例如，这可能值得包含在一个允许页面脚本连接到关系数据库管理系统（RDBMS）的集中设施中。如果RDBMS不可用，系统管理员、数据库管理员和程序员应立即收到通知，以便他们找出出了什么问题并将系统恢复正常。

假设 RDBMS 故障与对一个每秒收到 10 个请求的网站上的`notify_the_maintainers`的天真实现相结合。进一步假设邮件通知列表中的所有人一起午餐一小时。在他们返回时，他们会发现他们的收件箱中有 60x60x10 = 36,000 封相同的电子邮件。

为了避免这种灾难，最好让`notify_the_maintainers`记录HTTP服务器内存或磁盘上的`last_notification_sent`时间戳，并使用它来忽略或累积在上一个请求的约 15 分钟内收到的通知请求。一个合理的假设是，一旦程序员收到警报，就会访问服务器并开始查看完整的错误日志。因此，`notify_the_maintainers`实际上不需要发送关于遇到的每个问题的信息。

### 练习 3：与您的客户交谈

使用您在之前练习中获得的标准化 Web 服务器日志报告作为起点，与您的客户讨论他或她真正想看到的用户活动分析的类型。您希望在至少有些东西可以展示之后再进行这样的讨论，这样讨论会更具体，而且因为客户的思考可能会因查看日志分析器的报告并注意到缺失的内容而被激发。

记下您的客户说的最重要的问题。

### 练习 4：设计一个数据仓库

编写一个用户活动的维度数据仓库的 SQL 数据模型。查看 [http://philip.greenspun.com/sql/data-warehousing](http://philip.greenspun.com/sql/data-warehousing) 中的零售示例以获得灵感。最终的数据模型应该能够回答客户在练习 3 中提出的问题。

在这个练习中，你将面临的最大设计决策是事实表的粒度。如果你对用户在站点内如何从页面到页面感兴趣，那么事实表的粒度必须是“一个请求”。在像 2003 年推出的全国“别打电话给我”注册表 [www.donotcall.gov](http://www.donotcall.gov) 这样的网站上，人们预计只会访问一次。因此，用户活动数据仓库可能仅存储每个注册用户的一行，总结他们在站点上的出现和注册完成，事实表粒度为“一个用户”。对于许多服务，中间粒度“一个会话”将是合适的。

通过“一个会话”的粒度和适当的维度，可以提出诸如“有多少百分比的会话是响应于 Google.com 上的广告？”（在事实表中添加源字段）“比较购买者在第四次与第五次服务会话中的购买可能性？”（在事实表中添加第 n 次会话字段）“比较外国客户与国内客户在会话中的购买价值”（在事实表中添加购买金额字段加上客户维度）等问题。

### 更多

+   [www.analog.cx](http://www.analog.cx/) — 下载模拟 Web 服务器日志分析器

+   [http://www.microsoft.com/technet/scriptcenter/tools/logparser/](http://www.microsoft.com/technet/scriptcenter/tools/logparser/) — 微软日志解析器

+   [www.cygwin.com](http://www.cygwin.com/) — Windows 上的标准 Unix 工具

### 时间与动作

生成第一个访问日志报告可能需要几分钟到一小时不等，这取决于日志分析工具的质量。整个第一个练习不应超过两个小时。跟踪错误应该花费两到四个小时。与客户交谈可能需要大约一小时。设计数据仓库应该花费一到两个小时，这取决于学生对数据仓库的熟悉程度。

## 写作

* * *

> 如果我不为自己，谁会为我呢？
> 
> 当我为自己时，我是什么？
> 
> 如果不是现在，那么何时？
> 
> -- 希莱尔（公元前70年 - 公元10年）
> 
> 如果我不记录我的成果，那么谁会呢？
> 
> 如果我的工作的重要性没有被传达给他人，那么我是什么？
> 
> 如果不是现在，那么何时？
> 
> -- philg

你认为世界欠你关注吗？如果不是，你觉得为什么会有人花三十分钟在你建立的社区里四处浏览，以找到最有趣的特性？无论如何，如果你的许多工程成功体现在管理页面中，那么没有管理员权限的人怎么会看到它们呢？

在本课程开始时的代码审查中，我们经常发现学生制作源代码文件而没有署名（"我知道谁写的"），制作网页而没有电子邮件签名（"没有人会真正使用这个"）。迈蒙尼德对希勒上述引文的评论是，一个人在年轻时就会养成做对或做错的习惯——美德和恶习；年轻人现在应该做好事，而不是等到成年。也就是说，如果您作为大学生现在不采取措施来帮助其他用户和程序员，那么就没有理由相信您会在毕业后养成美德的习惯。另一种思考方式是问问自己，当您试图使用别人的网页时卡住了，却找不到明确的发送反馈或获取帮助的方法，或者阅读应用程序的源代码时不知道是谁写的、为什么写的、在哪里提问，您会有什么感受。延续本章的塔木德主题，记住希勒对对犹太教感兴趣的外邦人的回应："你所讨厌的，不要对待你的邻居。这就是整个《圣经》；其余的是评论。去学习吧。"

每个源代码文件顶部的注释头和每个页面底部的电子邮件地址。这是建立专业声誉的良好开端。但这还不够。对于您构建的每个计算机应用程序，您应该准备一个*概述文档*。这将是一个包含线性文本的单个HTML页面，可以通过简单滚动阅读，即读者无需跟随任何超链接即可理解您的成就。可以合理地期望您可以吸引普通人的注意力，阅读四到五屏幕的文本和插图。概述插图中应包括什么？显示应用程序功能的Web或移动浏览器屏幕的内联图像。如果应用程序支持复杂的工作流程，也许可以显示所有状态和转换的图形。

以下是一些由和您一样的人完成的示例：

+   [http://philip.greenspun.com/seia/gallery/spring2002/](gallery/spring2002/) 和 [http://philip.greenspun.com/seia/gallery/fall2003/](gallery/fall2003/) 中的6.171项目画廊中的任何报告

    #### 来自本课程早期版本

+   [http://philip.greenspun.com/seia/gallery/spring1999/arfdigita/](http://philip.greenspun.com/seia/gallery/spring1999/arfdigita/)

+   [http://philip.greenspun.com/seia/gallery/spring2000/poa/](http://philip.greenspun.com/seia/gallery/spring2000/poa/)

+   [http://philip.greenspun.com/seia/gallery/fall2000/wap/](http://philip.greenspun.com/seia/gallery/fall2000/wap/)（仅支持WAP的应用程序）

+   [http://philip.greenspun.com/seia/gallery/fall2000/eaa/](http://philip.greenspun.com/seia/gallery/fall2000/eaa/)

如果您正在寻找灵感，请记住，如果微软、甲骨文、红帽或Sun产品要么简单工作，要么工作简单，信息技术行业中一半的人将失业。同时请记住，对于每个阅读本章的人，印度的一个贫困村民正在学习SQL和Java。高薪很快就会消失。在2001年3月至2004年4月期间，大约有40万个美国信息技术工作岗位被淘汰。许多曾经在默默无闻中编写Java代码的人最终成为出租车司机或沃尔玛的迎宾员。相比之下，个人专业声誉比高薪更难建立，但也更难失去。然而，如果您不花些时间写作（散文，而不是代码），您永远不会在您的同事圈之外建立声誉，而这些同事最终可能会在麦当劳工作，无法在经济衰退期间帮助您找到工程工作。

### 练习1

为本学期构建的应用程序准备一个概述文档。将文档放在您服务器上的`/doc/overview`位置。

尽量确保您的受众在任何时候都可以停止阅读并获得完整的图片。因此，第一段或前两段应说明您构建了什么以及为什么对于这群用户很重要。这个介绍应该简要介绍为谁构建了应用程序的社区，以及为什么他们不能简单地在同一时间在同一个房间聚在一起。

集中精力展示您的应用程序独特和令人惊讶的功能的屏幕截图可能是值得的。像独立的讨论论坛或全文搜索页面这样的东西可以用一个项目或句子来描述，并且读者可以轻松想象。

如果您发现您的屏幕截图并不十分引人注目，需要使用5或6个屏幕截图来讲述一个故事，考虑重新设计一些页面！如果在您的概述文档中一屏幕上能看到站点的所有最重要功能和信息是有意义的，那么对于站点的日常用户来说也可能在一屏幕上看到它们是有意义的。

您有两种基本结构选项。如果人们如何使用服务更或多或少明显，您可能可以使用洗衣单结构：列出应用程序的功能，以屏幕截图为标点。然而，总的来说，日常生活结构可能更具吸引力和可理解性。在这里，您可以演示几位用户如何使用应用程序并完成任务的场景。例如，在一个照片评论网站上，您可以展示以下内容：

1.  施洛莫·门德尔松上传了他狗的最新照片（照片上传页面的截图）。

1.  温斯顿·吴查看了最近提交的照片页面，并选择了施洛莫的照片。

1.  温斯顿在施洛莫的照片上发表评论，并附上照片的编辑版本（“附加文件到您的评论”页面的截图）。

1.  Schlomo通过手机浏览器查看谁评论了他的照片。

1.  Winona Horowitz从朋友的电话中打来，并从VoiceXML界面得知过去24小时内发布了大量新内容。

1.  Winona回家打开Web浏览器，访问管理页面，删除了一个重复发布和三个不相关的帖子（“所有最近上传的内容”屏幕截图）。

1.  ...

在这种情况下，您可以在网站的所有重要功能中工作，同时让读者了解这些功能与用户和管理员目标的相关性。

请注意上面的示例如何在网站的移动和VoiceXML界面中运行。所有读者都曾使用过网站，但移动和VoiceXML相对较新。

### “专业”是什么意思？

在软件工程的背景下，我们所说的“专业”是什么意思？标准职业（法律和医学）需要特定的教育学位，并由其他专业人士认证。相比之下，许多从未上过计算机科学课程的人现在正在用Java编程。他们的Java工作也没有被其他程序员评估和认证。理论上，如果你的无能导致足够多的患者死亡，你的同行医生可以阻止你继续从事医学工作。如果你从客户那里偷走太多，你的同行律师有权利阻止你工作。

没有必要的教育计划或国家强制制裁进入该领域，成为“专业程序员”意味着什么？让我们退后一步，看看医学领域的专业成就程度。考虑三位医生：

+   外科医生1在比佛利山诊所一遍又一遍地做同一种手术，赚了很多钱。

+   外科医生2在所有标准手术中都很有能力，但另外还开发了一种创新程序，由于花费时间进行创新，赚的钱比外科医生1少。

+   外科医生3开发了一种创新程序并定期实践，但也抽出时间偶尔前往法国、中国、日本和阿根廷教其他医生如何实践这种创新。

大多数同行医生都会同意外科医生3是该组中“最专业”的医生。外科医生3在最先进的技术上进行实践，改进了最先进的技术，并教导他人如何提高他们的技能。程序员有办法在这些方面表现出色吗？

### 软件行业中的专业精神（约1985年）

当包装软件行业在1985年左右进入中年时，个人程序员很难产生影响。软件必须通过传统媒体进行营销，烧录到物理介质上，装入精美的包装盒，并运送到零售商那里。因此，任何一段代码要达到最终用户，都需要至少五十个人参与。如果将软件发货需要其他五十个人持续支付报酬，软件工程师如何确保他或她的创新最终会到达最终用户呢？如果软件是封闭源代码，他或她所在组织的就业协议要求保密，软件工程师如何教导其他程序员如何实践创新呢？

1985年左右的工业程序员只是一个工厂雇员，纯粹而简单。他或她可能渴望达到高标准的*工艺水平*，但永远不会达到*专业水平*。

如果事实证明手艺精湛是一个不令人满意的职业目标，那么程序员的选择是什么呢？摆脱封闭源代码和保密的唯一途径就是大学。程序员可以加入大学的计算机科学研究实验室，在那里，很可能会被允许通过出版、源代码发布和面对面教学来教授其他人。然而，进入大学，团队成员永远不会齐聚以将软件产品推向市场，程序员放弃了在最前沿工作、创新和教学的机会。

### 软件行业的专业化（约2000年）

有证据表明标准正在发生变化。理查德·斯托曼和林纳斯·托瓦兹在全球吸引了一大批崇拜者。这两位开源软件运动的先驱开始展现出一些上文所述的外科医生3的特质：

+   他们在最前沿实践，编写着被全球数百万人使用的计算机程序（GNU一套Unix工具和Linux内核）

+   他们进行了创新；斯托曼开发了Emacs文本编辑器（第一个多窗口系统之一），托瓦兹开发了一种新的全球协调开发方法

+   他们通过将工作发布为开源软件和编写文档来教导其他人如何实践他们的创新

互联网使个人程序员更容易将工作分发给大众，从而更容易在最前沿实践。开源运动使个人程序员更容易找到一个可以将自己的作品发布给其他程序员的工作，后者可能会在此基础上进行开发。

因此，现在程序员有能力改进自己作为软件工程专业人士的实践，其中*专业*的定义类似于医学中使用的定义。

### 一个提议的新定义

假设我们用以下目标来定义软件工程的专业化：

1.  **专业程序员选择值得攻击的问题**；我们是工程师，不是科学家，因此应尝试解决真正的用户问题。

1.  **专业程序员致力于最终用户体验**；如今，大多数构建的计算机应用程序都是由小团队构建的互联网应用程序，因此现在一个个体程序员可以确保最终用户不会感到困惑或沮丧（对于一个为其他程序员构建工具的程序员来说，目标被定义为“致力于接收程序员易用性”）。

1.  **专业程序员做高质量的工作**；我们保持对良好系统设计、可维护性和文档编写的承诺，这构成了工匠精神的骄傲。

1.  **专业程序员创新**；信息系统还不够好，用户有权获得更好的系统，我们的工作就是构建更好的系统。

1.  **专业程序员以身作则教学**；开源是专业软件工程师的唯一正确之路。

1.  **专业程序员通过文档教学**；写作很难，但最好的软件文档始终是由愿意付出额外努力的程序员撰写的。

1.  **专业程序员面对面教学**；我们没有找到面对面互动的替代品，因此软件工程专业人士应通过代码审查向同事教授，向大众进行简短概述讲座，并帮助教授为期数周的课程。

是否可以创建一个组织，让程序员在这七个方面都能表现出色？在前一段生活中，作者们就是这样做的！我们创建了一个用于构建互联网应用程序的免费开源工具包，即为了让客户免受做你刚刚花了整个学期做的事情（从头开始构建应用程序）的痛苦。以下是我们如何朝着先前陈述的目标努力的方式：

1.  **致力于解决广泛计算机用户的最困难问题**；利基软件产品易于构建且利润丰厚，但大多数在这类产品上工作的程序员都在添加第10000个功能。我们的公司同时解决了公共在线社区、B2B电子商务、B2C电子商务、组织内的合作工作、组织间的合作工作、大学运营、服务公司的会计和人事（HR）等问题。这给了我们的程序员足够的成长空间。

1.  **在销售、客户管理、用户界面和用户体验专家方面保持精简**；编程团队直接与互联网服务运营商以及最终用户联系。我们的程序员对最终用户体验有很大的控制权和责任。

1.  **招聘优秀人才并给予他们良好的薪酬**；只有拥有高素质的同事，才有可能构建高质量的系统。尽管在上世纪90年代末期的招聘市场竞争激烈，我们仍然限制自己只招聘那些在麻省理工学院前身课程中展示出能够编写高质量代码的能力的人。

1.  **对旧代码不予重视，不追求与太多底层系统的兼容性**；我们让程序员建立他们在创新方面的专业声誉，而不是陷入担心新事物会给传统用户带来不便（我们为他们提供了支持合同）或者如何确保新代码在每个品牌的RDBMS上运行。

1.  **制定严格的开源软件政策**；可重复使用的代码被记录并开源，希望能够帮助全球其他程序员。

1.  **拉人参加写作撤退**；大多数程序员说他们不会写作，但经验表明，只要他们愿意练习写作，他们的写作技能会显著提高。我们在总部附近有一座海滨别墅，会拉人出去度过长周末，与其他正在完成自己写作项目的程序员一起完成写作项目。

1.  **建立我们自己的大学，协助在现有大学担任助教，并在我们的办公室内进行指导**；许多计算机博士都不愿离开学术界，因为他们无法继续教学。但我们开设了自己的一年制本科后课程，教授正常的本科计算机科学课程，我们很乐意支付一名开发人员花一个月时间在那里教授一门课程。我们鼓励我们的开发人员在我们办公室附近的大学担任助教或讲师。我们坚持要求高级开发人员内部审查初级开发人员的代码。

结果如何？遵循这些原则，我们建立了一个年收入2000万美元的盈利业务。作为工程师而不是商人，我们认为将公司交给专业经理人和成熟的风险投资公司是明智的选择。为了追求更高的利润，他们抛弃了我们的原则，在不到两年的时间里，将曾经每月的利润变成了亏损，烧掉了5000万美元现金。公司，现在已经完全传统化，崩溃了。

简而言之，尽管实验结束时令人沮丧，但它证明了这七项原则可以带来异常高的成就和利润。

### 练习2

写下你对软件工程专业素养的定义。解释你将如何付诸实践以及如何建立一个可持续发展的组织来支持这个定义。

### 最终演示

在使用本教材的任何课程中，我们建议在每个项目结束时的课堂时间中安排 20 分钟，供外部评审小组进行最终演示。然后，每个团队都有机会向决策者的观众展示其演示技巧，与之前在课堂上听过的技术同行的观众有所不同。

年轻的工程师需要练习说服有钱人写支票来资助他们的工作。因此，最好的评审员是那些在日常生活中听取技术人员的提案并决定是否写支票的人。此类人员的示例包括大公司的高管和风险投资者。

我们建议每个演示采用以下格式：

1.  电梯演讲，对解决了什么问题以及为什么该系统比现有的可用机制更好进行 30 秒的解释

1.  完成系统的演示（参见[“内容管理”章节](content-management)中一些关于制作多用户应用程序清晰演示的提示）（5 分钟；明确系统是否已公开发布）

1.  显示系统架构以及用于构建系统的组件的幻灯片（1 分钟）

1.  讨论项目中面临的最棘手的技术挑战以及如何解决它们（2 分钟；可能需要额外的幻灯片）

1.  文档导览（2 分钟）——您希望说服观众文档足够长期维护。

1.  未来（1 分钟）——接下来的里程碑是什么？谁在继续工作？

总时间：最多 12 分钟。

请注意，技术内容在最后。在看到解决了什么问题之前，没有人关心技术。

### 麻省理工学院的教训

通过观察我们在麻省理工学院的学生与评审员之间的互动，出现了一些一致的主题。

评审员喜欢文档。他们都见过代码猴子，也见过运行的程序。在他们的生活中很少有人见过清晰而全面的文档。我们曾见过微软公司高级执行官看到讨论论坛模块的文档时眼泪汪汪。论坛本身引起了“以前见过”的打哈欠，但执行官们看到一个包含三段概述、SQL 数据模型、页面流程图、所有脚本列表、一些示例 SQL 查询和所有辅助函数列表的单个文档时，他们振作起来。

在开始之前，座谈会成员需要清楚地解释申请的理由。否则，演示会很无聊。在一些从未见过你的项目的人面前练习你的前几分钟，并要求他们向你解释你解决了什么问题以及为什么。

决策者兼优秀技术人员喜欢将挑战的规模量化。一家大型企业的首席信息官想知道他所看到的应用程序开发了多少小时，数据模型中有多少个表。他已经超越了他职业生涯的某个阶段，不再亲自编写自己的 SQL 代码，但他知道每增加一个表通常意味着额外的开发和维护成本。

你需要区分你的应用程序和专家预期的其他系统，这些系统被认为很容易获得。例如，不要花五分钟展示一个讨论论坛。每个专家都会见过那样的。展示论坛的一页，解释一下有一个论坛，有几个级别的主持人和隐私，然后转移到你所构建的独特之处。在一个演示之后，一个专家说：“你展示的所有东西都内置在 Microsoft Sharepoint 中。” 一个面板上的风险投资家插话说：“如果在演示过程中有人指出有一个微软产品可以解决同样的问题，那么会议就结束了。”

与此同时，除非你完全具有创新性，否则一个好的起点是用观众已经熟悉的东西来框定你的成就，例如，雅虎群组或通用在线社区工具包，然后谈论其中的不同之处。你不希望决策者心想：“嘿，我觉得我以前在 Microsoft Sharepoint 中见过这个”，而且整个时间都在头脑中未被解决。

决策者通常会带着高级工程师一起参加演示，这些人可能会困扰于个人主题。假设乔评委选择通过从数据库生成XML，然后通过一些昂贵的行业领先中间件和XSLT将其转换为HTML，再加上大量的Java和企业Java Beans来构建他的最后一个项目。这种方法可能消耗了比使用Microsoft Visual Basic在Active Server Pages或1993年的Perl脚本要多100倍的服务器资源，但可以说更清洁和更现代。在12分钟的演示之后，没有听众能够学到足够多的知识来确定项目是否会受益于XML/XSLT方法，但他却提出了挑战。你可以称他为头脑简单，因为他不了解你的客户和最初的目标，例如，不必购买100个CPU服务器农场来支持一个小社区。你可以通过指出使用与你选择的类似架构的大型成功应用程序来证明他是一个头脑简单的人。但作为一名初级工程师，在会议上处理高级工程师的不公平或不正确的批评可能不是最好的方式，尤其是如果这个人是决策者带来的。最好是奉承这个人，请求他们安排一个30分钟的会议，你可以在那里真正讨论这个问题。利用这30分钟的会议来展示为什么你最初设计这个东西的方式。你可能会让高级工程师改变对你的看法。至少，你不会在决策者面前争论或显得傲慢/过于自信。

### 致评委

想象每个学生团队都被你的前任雇佣了。你正在尝试弄清楚他们做了什么，是否要资助下一个版本，以及如果是的话，这是否是构建和推出下一个版本的正确团队。

随着演示的进行，为团队在以下方面的表现打分（1-10）。

+   这个团队清楚地传达了他们解决的问题。

+   这个演示让我对系统的运作方式有了很好的了解。

+   这个团队在解决工程挑战方面做��非常出色。

+   这个团队清晰而全面地记录了他们的系统。

+   我真的很想雇佣这些人加入我的组织。

在团队进行完12分钟的演示后，告诉他们他们可以做得更好的地方。

在团队的演示过程中，不要犹豫提出简短的问题。如果演示来自你的下属或一家初创公司请求资金，你会打断他们，那么也请打断我们的学生。

### 分别致辞

致力于做一些让你兴奋到想全天候工作的事情。成为数据模型和页面流的专家。独自构建一些出色的系统，并从你的简历中链接到它们的概述文档 —— 能够说“我构建了X”或“苏珊和我构建了X”，而不是“我作为一个庞大团队的一部分构建了X的一部分”。

### 更多

+   6.171 项目画廊，2002年春季，网址为[http://philip.greenspun.com/seia/gallery/spring2002/](gallery/spring2002/)

+   6.171 项目画廊，2003年秋季，网址为[http://philip.greenspun.com/seia/gallery/fall2003/](gallery/fall2003/)

### 时间和动作

写作应该花费四到六个小时，可以由团队成员分工。有效的分工可能是：截图技术员，撰稿人，校对员。思考并写下对专业主义的定义应该花费一到两个小时。如果团队一直保持文档更新，那么演示会更快，但准备时间不应超过几个小时加上一个小时的练习几次。

## HTML

* * *

超文本标记语言，即HTML，是用于指定浏览器如何显示网页的语言。HTML是一种*标记*语言，与编程语言相对，意味着它包含代码来说明页面应该如何格式化，但不包含过程性代码。

让我们看一个简单的例子：

| **代码示例** | **典型呈现** |
| --- | --- |

|

```
<p>
Don't look at your instruments and adjust 
the flight controls to, for example, 
keep the altimeter steady.  The instruments 
have a tendency to <b>lag behind reality</b> 
and therefore you're overcorrecting and
oscillating.
</p>
```

| 不要盯着仪表盘，调整飞行控制，例如保持高度表稳定。仪器有**滞后现实**的倾向，因此你会过度纠正和振荡。 |
| --- |

HTML由标签组成，如`<p>`，与纯文本交错。`<p>`标签开始一个段落；`</p>`结束段落。类似地，`<b>`开始文本加粗，`</b>`结束。

### 基础

在HTML中，几乎每个开标签都有一个闭合标签，就像上面的例子一样。有一些例外情况，我们很快就会遇到，但绝大多数标签必须被关闭。

一些标签具有*属性*，例如`<font>`标签的`face`属性。例如：

> ````
> <font face=arial>
> ````

如果属性值包含空格，则必须用引号括起来：

> ````
> <font face="arial narrow">
> ````

### 逻辑标记

HTML有两种标记：逻辑标记和物理标记。物理标记，如粗体(`<b>`)标签，指定浏览器应该如何呈现文本。相反，逻辑标记，或*语义标签*，指定了被标记内容的*含义*；浏览器可以自由选择对用户硬件合理的呈现方式，例如在台式电脑上斜体可能是一个不错的选择，但在低分辨率的手机上反色可能效果更好。

这里有一些语义标签的示例：

| **标签** | **代码示例** | **典型呈现** |
| --- | --- | --- |
| 斜体 `<em>` |

```
You can fly all day <em>in mid-air</em> 
without using the airplane's rudder.
```

| 你可以在*半空中*整天飞行而不使用飞机的方向舵。 |
| --- |
| 强调 `<strong>` |

```
On short final, press relatively hard
on <strong>both</strong> rudder pedals.
```

| 在短距离着陆时，同时用力踩**两只**脚踏板。 |
| --- |
| 代码 `<code>` |

```
Alaska and Hawaii's airports are 
identified starting with a
<code>PA</code> for "Pacific".
```

| 阿拉斯加和夏威夷的机场以`PA`开头表示“太平洋”。 |
| --- |
| 一级标题 `<h1>` |

```
<h1>Flight Plan</h1>
```

|

# 飞行计划

|

| 二级标题 `<h2>` |
| --- |

```
<h2>Flight Plan</h2>
```

|

## 飞行计划

|

| 三级标题 `<h3>` |
| --- |

```
<h3>Flight Plan</h3>
```

|

### 飞行计划

|

| 四级标题 `<h4>` |
| --- |

```
<h4>Flight Plan</h4>
```

|

#### 飞行计划

|

| 五级标题 `<h5>` |
| --- |

```
<h5>Flight Plan</h5>
```

|

##### 飞行计划

|

| 六级标题 `<h6>` |
| --- |

```
<h6>Flight Plan</h6>
```

|

###### 飞行计划

|

### 物理标记

这里是一些常见的物理标记标签和属性：

| **标签** | **代码示例** | **典型呈现** |
| --- | --- | --- |
| 粗体 `<b>` |

```
Use the flight controls 
to keep the nose of the airplane 
at <b>a constant attitude</b>
relative to the horizon.
```

| 使用飞行控制器保持飞机的机头与地平线**保持恒定姿态**。 |
| --- |
| 斜体 `<i>` |

```
Have you read <i>Stick and
Rudder</i>?
```

| 你读过*Stick and Rudder*吗？ |
| --- |
| 下划线 `<u>` |

```
Flying in the clouds on a summer
afternoon, you run the risk of
entering an <u>embedded
thunderstorm</u>.
```

| 在夏日午后飞行在云层中，您有可能遇到嵌入式雷暴。 |
| --- |

|

> 注意：通常最好避免使用<u>标签；下划线应保留给超链接使用。

|

| 上标 `<sup>` |
| --- |

```
Avogadro's number is
approximately equal to 6.022
x 10<sup>23</sup>
```

| 阿伏伽德罗常数约等于6.022 x 10^(23) |
| --- |
| 下标 `<sub>` |

```
log<sub>e</sub>x
```

| 对数[e]x |
| --- |
| 字体大小 `<font size=...>` |

```
I want a <font size=+2>huge
</font> house, a
<font size=+1>big</font>
dog, and a <font size=-1>
small</font> waist.
```

| 我想要一个巨大的房子，一只大狗和一个纤细的腰。 |
| --- |
| 字体颜色 `<font color=...>` |

```
An airplane's navigation lights
are <font color=green>green</font>
on the right wing and 
<font color="#ff0000">red</font>
on the left.
```

| 飞机的导航灯右翼为绿色，左翼为红色。 |
| --- |

|

> 注意：颜色及其十六进制等价表可从[http://falco.elte.hu/COMP/HTML/colors.html](http://falco.elte.hu/COMP/HTML/colors.html)获取

|

| 字体 `<font face=...>` |
| --- |

```
The <font face="arial narrow,
arial, helvetica">NASA Aviation
Safety Program</font> is the only
source of innovation.
```

| NASA航空安全计划是创新的唯一来源。 |
| --- |
| 打字机文本 `<tt>` |

```
The terminal forecast called 
for winds <tt>02015G25KT</tt>,
which means from the northeast at 
15 knots, gusting to 25 knots.
```

| 机场预报称风速为`02015G25KT`，意味着来自东北方向15节的风，阵风达到25节。 |
| --- |
| 预格式文本 `<pre>` |

```
Winds aloft for Buffalo, Boston, 
and Nantucket, at 3000, 6000, and
9000':
<pre>
    3000    6000    9000
BUF 0517 0215+01 3306-01
BOS 2218 2325+08 2321+03
ACK 2118 2012+08 1917+03
</pre>
```

| 采用于布法罗、波士顿和南塔基特的高空风速，分别为3000、6000和9000英尺：

```
    3000    6000    9000
BUF 0517 0215+01 3306-01
BOS 2218 2325+08 2321+03
ACK 2118 2012+08 1917+03

```

|

| 引用块 `<blockquote>` |
| --- |

```
Aviation safety quote:
<blockquote>
All life is the management of
risk, not its elimination. 
<br>
&mdash; Walter Wriston, 
former Chairman of Citibank 
</blockquote>

```

| 航空安全引用：

> 所有的生活都是风险管理，而不是消除风险。
> 
> — 沃尔特·里斯顿，花旗银行前董事长

|

通常更加考虑使用逻辑标记而不是物理标记。现在有各种各样的设备可以浏览网站，例如移动电话和手持设备，这变得尤为重要。手机可能会忽略`<font size>`标签，但它可能会尝试突出显示标题（`<h1>`）。

### 超链接

*超链接*，通常简称为*链接*，允许用户跳转到新页面或同一页面内的新位置。超链接通常由蓝色、带下划线的文本表示。虽然可以更改超链接在用户界面上的外观，但我们建议不要这样做；用户期望网页有一致的用户界面。

*绝对链接*是指定目标的完整URL的超链接。例如：

> ````
> <a href="http://aviationweather.gov/">aviationweather.gov</a>
> 
> ````

*相对链接*是相对于当前文档位置的文档的超链接。您不需要在URL中指定服务器名称。例如：

> ````
> <a href="glossary">Glossary</a>
> 
> ````

嵌入在目录`/seia/`中的文件将用户带到同一目录中的`glossary`文件。如果您正在在线阅读本书，请在这里尝试一下：[术语表](glossary)。

通过指定目标窗口，您可以使网页在新的浏览器窗口中打开：

> ````
> <a href="glossary" target="glossary_window">Glossary</a>
> 
> ````

如果没有名为`glossary_window`的浏览器窗口，将会弹出一个新窗口。然而，你应该谨慎使用这个功能，因为新窗口的出现可能会让用户感到困惑。此外，许多用户安装了弹出广告拦截器；这些广告拦截器也会阻止合法窗口的弹出。如果你正在在线阅读这本书，请在这里尝试一下：[术语表](glossary)。

你还可以链接到文档中的特定位置，这样用户就不必滚动查找页面上的特定项目。要实现这一点，首先你需要标记文档中需要链接的位置。例如，

> ````
> <a name="DNS">DNS</a>
> 
> ````

然后你可以通过以下方式链接到文件中的位置：

> ````
> see the <a href="glossary#DNS">glossary entry for DNS</a>
> 
> ````

如果你正在在线阅读这本书，请在这里尝试一下：查看 [DNS 的术语表条目](glossary#DNS)。请注意，如果你想链接到同一文件中的另一个位置，可以省略文件名，例如，`<a href="#DNS">DNS</a>`。

你经常会看到 URL 末尾跟着一个问号和表单变量；这被称为*查询字符串*。例如，

> ````
> <a href="http://groups.google.com/groups?hl=fr&group=rec.aviation.student">rec.aviation.student newsgroup</a>
> 
> ````

此查询字符串中的变量是`hl`（标题语言？）和`group`。大多数 Web 编程 [API](glossary#API) 提供了方便的设施来读取查询字符串变量的值。如果你正在在线阅读这本书，[尝试使用上面的链接和其法语标题](http://groups.google.com/groups?hl=fr&group=rec.aviation.student)。

### 换行

在 HTML 中，所有的空白都被视为相等，这意味着空格、制表符和换行都被渲染为单个空格。要强制换行发生，你需要使用一个标签。

这里是一些常见的换行：

| **标签** | **代码示例** | **典型渲染** |
| --- | --- | --- |
| 段落 `<p>` |

```
<p>
"I'll be seeing you,"
he said.
</p>
<p>
Then he walked away.
</p>
```

| “我会再见到你的，”他说。然后他走开了。 |
| --- |
| 换行 `<br>` |

```
Carson's Plumbing<br>
123 Main St.<br>
Seattle, WA 98101
```

| 卡森的管道 123 主街

西雅图，华盛顿州 98101 |

| 水平线 `<hr>` |
| --- |

```
And they lived happily
ever after.
<hr>
The End
```

| 他们从此过上了幸福的生活。

* * *

结束 |

请注意，`<br>` 和 `<hr>` 没有闭合标签。此外，`</p>` 标签是可选的；浏览器会假定当遇到新的 `<p>` 标签时，旧的段落已经结束了。

### 列表

最常见的列表类型是有序列表，其中浏览器在每个列表项前放置一个数字，以及无序列表，它们显示为一系列项目符号。你还可以创建定义列表，用于在线词典或术语表。

| **标签** | **代码示例** | **典型渲染** |
| --- | --- | --- |
| 有序列表 `<ol>` |

```
Alaska summer survival gear:

<ol>
<li>rations for each occupant 
<li>one axe or hatchet
<li>one first aid kit
</ol>

Common training airplanes:

<ol type=A>
<li>Cessna 172
<li>Diamond DA20
<li>Piper Tomahawk
</ol>

Class B VFR Weather Minimums:
<ol type=i>
<li>3 statute miles visibility
<li>clear of clouds
</ol>
```

| 阿拉斯加夏季生存装备：

1.  每位乘员的口粮

1.  一把斧头或斧子

1.  每位乘员一个急救包

常见培训飞机：

1.  塞斯纳 172

1.  钻石 DA20

1.  派珀 Tomahawk

B 类 VFR 天气最低标准：

1.  3 英里的能见度

1.  避开云层

|

| 无序列表 `<ul>` |
| --- |

```
Checklist for Mexican Flying:
<ul>
<li>proof of airplane ownership
<li>proof of liability insurance
<li>pilot's license and medical
<li>seldom asked-for documents:
  <ul>
  <li>radio station license
  <li>radio operator's license
  </ul>
<li>border-crossing flight plan
</ul>
```

| 墨西哥飞行的清单：

+   飞机所有权证明

+   责任保险证明

+   飞行员执照和医疗证明

+   很少被要求的文件：

    +   无线电台许可证

    +   无线电操作员执照

+   边境飞行计划

|

| 定义列表 `<dl>` |
| --- |

```
<dl>
<dt>IFR
<dd>Instrument Flight Rules
<dt>VFR
<dd>Visual Flight Rules
<dt>VOR
<dd>Very High Frequency Omni Ranging
radio navigation beacon
</dl>
```

|

仪表飞行规则

仪表飞行规则

VFR

可视飞行规则

航向无线电导航信标

超高频全向距离无线电导航信标

|

### 图像

图像存储为单独的文件，不是HTML页面的一部分。可以按以下方式将图像包含在页面中：

> ````
> <img src="http://www.eveandersson.com/alex.jpg">
> 
> ````

此标签指示用��的浏览器发出新请求，可能是到与获取HTML文档的服务器不同的服务器，以获取图像。 

图像有许多可选属性。最重要的是`width`和`height`属性；通过告诉浏览器图像的大小，它可以在下载图像文件之前呈现整个网页，为图像留出空间。

| **属性** | **代码示例** | **典型渲染** |
| --- | --- | --- |
| 尺寸 `width/ height` |

```
<img width=100 height=100
src="http://www.eveandersson.com/alex.jpg">
```

| ![](../Images/6da60e15a7f9ea4b991a4a94fe974a12.jpg) |
| --- |
| 边框 `border` |

```
<img width=100 height=100 border=2
src="http://www.eveandersson.com/alex.jpg">
```

| ![](../Images/6da60e15a7f9ea4b991a4a94fe974a12.jpg) |
| --- |
| 对齐 `align` |

```
<img align=right
width=100 height=100
src="http://www.eveandersson.com/alex.jpg">
Canine-American
```

| ![](../Images/6da60e15a7f9ea4b991a4a94fe974a12.jpg) 美国犬类 |
| --- |
| 对齐 `align` |

```
<img align=left
width=100 height=100
src="http://www.eveandersson.com/alex.jpg">
Canine-American
```

| ![](../Images/6da60e15a7f9ea4b991a4a94fe974a12.jpg) 美国犬类 |
| --- |
| 水平间距（两侧）`hspace` |

```
<img hspace=10
align=left width=100 height=100
src="http://www.eveandersson.com/alex.jpg">
Canine-American
```

| ![](../Images/6da60e15a7f9ea4b991a4a94fe974a12.jpg) 美国犬类 |
| --- |
| 垂直间距（上下）`vspace` |

```
<img vspace=10
width=100 height=100
src="http://www.eveandersson.com/alex.jpg">
```

| ![](../Images/6da60e15a7f9ea4b991a4a94fe974a12.jpg) |
| --- |

### 表格

这里是创建HTML表格时使用的标签：

> | `<nobr><table>, </table>  </nobr>` | 开始和结束表格 |
> | --- | --- |
> | `<nobr><tr>, </tr></nobr>` | 表格行 |
> | `<nobr><td>, </td></nobr>` | 表格单元 |
> | `<nobr><th>, </th></nobr>` | 表头；类似于表格单元，但文本是粗体且居中 |

这些标签中的许多可以具有属性，例如指定对齐、边框、单元格间距和填充以及背景颜色。示例：

| **代码示例** | **典型渲染** |
| --- | --- |

|

```
<table border=2
  cellspacing=5
  cellpadding=5>
<tr>
 <th>Year</th>
 <th>Revenue</th>
 <th>Expenditures</th>
 <th>Profits</th>
</tr>
<tr>
 <td>1999</td>
 <td>$58,295</td>
 <td>$73,688</td>
 <td>$(15,393)</td>
</tr>
<tr>
 <td>2000</td>
 <td>$902,995</td>
 <td>$145,400</td>
 <td>$757,595</td>
</tr>
</table>
```

|

&#124; 年份 &#124; 收入 &#124; 支出 &#124; 利润 &#124;

&#124; 1999 &#124; $58,295 &#124; $73,688 &#124; $(15,393) &#124;

&#124; 2000 &#124; $902,995 &#124; $145,400 &#124; $757,595 &#124;

|

|

```
<!-- reduce the
cellspacing and
right-align the
text in the cells -->

<table border=2
  cellspacing=2
  cellpadding=5>
<tr>
 <th>Year</th>
 <th>Revenue</th>
 <th>Expenditures</th>
 <th>Profits</th>
</tr>
<tr>
 <td>1999</td>
 <td align=right>
   $58,295</td>
 <td align=right>
   $73,688</td>
 <td align=right>
   $(15,393)</td>
</tr>
<tr>
 <td>2000</td>
 <td align=right>
   $902,995</td>
 <td align=right>
   $145,400</td>
 <td align=right>
   $757,595</td>
</tr>
</table>
```

|

&#124; 年份 &#124; 收入 &#124; 支出 &#124; 利润 &#124;

&#124; 1999 &#124; $58,295 &#124; $73,688 &#124; $(15,393) &#124;

&#124; 2000 &#124; $902,995 &#124; $145,400 &#124; $757,595 &#124;

|

|

```
<!-- remove the
border -->

<table border=0
   cellspacing=2
   cellpadding=5>
<tr>
 <th>Year</th>
 <th>Revenue</th>
 <th>Expenditures</th>
 <th>Profits</th>
</tr>
<tr>
 <td>1999</td>
 <td>$58,295</td>
 <td>$73,688</td>
 <td>$(15,393)</td>
</tr>
<tr>
 <td>2000</td>
 <td>$902,995</td>
 <td>$145,400</td>
 <td>$757,595</td>
</tr>
</table>
```

|

&#124; 年份 &#124; 收入 &#124; 支出 &#124; 利润 &#124;

&#124; 1999 &#124; $58,295 &#124; $73,688 &#124; $(15,393) &#124;

&#124; 2000 &#124; $902,995 &#124; $145,400 &#124; $757,595 &#124;

|

|

```
<!-- shade every
other row -->

<table border=0
  cellspacing=2
  cellpadding=5>
<tr bgcolor="#cecece">
 <th>Year</th>
 <th>Revenue</th>
 <th>Expenditures</th>
 <th>Profits</th>
</tr>
<tr bgcolor=white>
 <td>1999</td>
 <td>$58,295</td>
 <td>$73,688</td>
 <td>$(15,393)</td>
</tr>
<tr bgcolor="#cecece">
 <td>2000</td>
 <td>$902,995</td>
 <td>$145,400</td>
 <td>$757,595</td>
</tr>
</table>
```

|

&#124; 年份 &#124; 收入 &#124; 支出 &#124; 利润 &#124;

&#124; 1999 &#124; $58,295 &#124; $73,688 &#124; $(15,393) &#124;

&#124; 2000 &#124; $902,995 &#124; $145,400 &#124; $757,595 &#124;

|

### 表单

要从用户那里收集数据，请使用`form`标签：

> ````
> <form method=POST action=/register/new>
> 
> ````

`action`是表单提交到的URL，可能对应于服务器文件系统中的计算机程序，例如Java服务器页面、PHP或Perl脚本等。

表单的`method`可以是`GET`或`POST`。唯一的区别在于，使用`method=GET`时，用户提交的变量将显示在下一页URL的查询字符串中。如果您希望用户能够将结果页加为书签，这将很有用。然而，如果用户预计要输入长字符串的数据，`method=POST`更合适，因为一些旧浏览器只处理包含少于256个字符的查询字符串（新版本浏览器可以处理几千个）。进一步注意，如果使用`GET`方法，表单变量值将出现在服务器访问日志中，可能会造成安全或隐私风险。

| **代码示例** |
| --- |

|

```
<form method=POST action=/survey/demographic>
<input type=hidden name=user_id value=2205>
Age: <input type=text size=2><br>
Sex: <input type=radio name=sex value=m>male
     <input type=radio name=sex value=f>female<br>
What are you interested in (check all that apply)?
<input type=checkbox name=interest value="aerobatics">Aerobatics
<input type=checkbox name=interest value="helicopters">Helicopters
<input type=checkbox name=interest value="IFR">IFR
<input type=checkbox name=interest value="seaplanes">Seaplanes
<br>
Where do you live?
         <select name=continent_live>
         <option value=north_america>North America
         <option value=south_america>South America
         <option value=africa>Africa
         <option value=europe>Europe
         <option value=asia>Asia
         <option value=australia>Australia	
         </select>
         <br>
Which continents have you visited?<br>
         <select multiple size=3 name=continent_visited>
         <option value=north_america>North America
         <option value=south_america>South America
         <option value=africa>Africa
         <option value=europe>Europe
         <option value=asia>Asia
         <option value=australia>Australia	
         </select>
         <br>
Describe your favorite airplane trip:<br>
<textarea name=favorite_trip_story rows=5 cols=50></textarea>
<p>
<input type=submit value="Continue">
</form>
```

|

|  |
| --- |
| **典型渲染** |

|  |**
